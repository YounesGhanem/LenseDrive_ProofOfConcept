ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mcp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.RI_SetRegCommandParser,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.global	RI_SetRegCommandParser
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	RI_SetRegCommandParser:
  28              	.LVL0:
  29              	.LFB1090:
  30              		.file 1 "Src/mcp.c"
   1:Src/mcp.c     **** 
   2:Src/mcp.c     **** /**
   3:Src/mcp.c     ****   ******************************************************************************
   4:Src/mcp.c     ****   * @file    mcp.c
   5:Src/mcp.c     ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mcp.c     ****   * @brief   This file provides firmware functions that implement the MCP protocol
   7:Src/mcp.c     ****   *
   8:Src/mcp.c     ****   *
   9:Src/mcp.c     ****   ******************************************************************************
  10:Src/mcp.c     ****   * @attention
  11:Src/mcp.c     ****   *
  12:Src/mcp.c     ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  13:Src/mcp.c     ****   * All rights reserved.</center></h2>
  14:Src/mcp.c     ****   *
  15:Src/mcp.c     ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mcp.c     ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mcp.c     ****   * the License. You may obtain a copy of the License at:
  18:Src/mcp.c     ****   *                             www.st.com/SLA0044
  19:Src/mcp.c     ****   *
  20:Src/mcp.c     ****   ******************************************************************************
  21:Src/mcp.c     ****   */
  22:Src/mcp.c     **** 
  23:Src/mcp.c     **** #include "mc_type.h"
  24:Src/mcp.c     **** #include "mcp.h"
  25:Src/mcp.c     **** #include "register_interface.h"
  26:Src/mcp.c     **** #include "mc_config.h"
  27:Src/mcp.c     **** #include "mcp_config.h"
  28:Src/mcp.c     **** #include "mc_api.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 2


  29:Src/mcp.c     **** 
  30:Src/mcp.c     **** /** @addtogroup MCSDK
  31:Src/mcp.c     ****   * @{
  32:Src/mcp.c     ****   */
  33:Src/mcp.c     **** 
  34:Src/mcp.c     **** /** @defgroup MCP Motor Control Protocol
  35:Src/mcp.c     ****   *
  36:Src/mcp.c     ****   * @brief Motor Control Protocol components of the Motor Control SDK.
  37:Src/mcp.c     ****   *
  38:Src/mcp.c     ****   * These components implement the features needed to drive and monitor motor control applications 
  39:Src/mcp.c     ****   * They mainly focus on the communication with the controller, both on the receiving and the trans
  40:Src/mcp.c     ****   *
  41:Src/mcp.c     ****   * @{
  42:Src/mcp.c     ****   */
  43:Src/mcp.c     **** 
  44:Src/mcp.c     **** /**
  45:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to mo
  46:Src/mcp.c     ****   *
  47:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_SetRegisterGlob
  48:Src/mcp.c     ****   *
  49:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
  50:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
  51:Src/mcp.c     ****   *
  52:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  53:Src/mcp.c     ****   */
  54:Src/mcp.c     **** uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
  55:Src/mcp.c     **** {
  31              		.loc 1 55 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 24
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 55 1 is_stmt 0 view .LVU1
  36 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 36
  39              		.cfi_offset 4, -36
  40              		.cfi_offset 5, -32
  41              		.cfi_offset 6, -28
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 8, -20
  44              		.cfi_offset 9, -16
  45              		.cfi_offset 10, -12
  46              		.cfi_offset 11, -8
  47              		.cfi_offset 14, -4
  56:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  57:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  58:Src/mcp.c     ****   if (MC_NULL == pHandle)
  59:Src/mcp.c     ****   {
  60:Src/mcp.c     ****     retVal = MCP_CMD_NOK;
  61:Src/mcp.c     ****   }
  62:Src/mcp.c     ****   else
  63:Src/mcp.c     ****   {
  64:Src/mcp.c     **** #endif
  65:Src/mcp.c     ****     uint16_t * dataElementID;
  66:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
  67:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
  68:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 3


  48              		.loc 1 68 13 view .LVU2
  49 0004 B0F90C40 		ldrsh	r4, [r0, #12]
  69:Src/mcp.c     ****     uint16_t size = 0U;
  70:Src/mcp.c     ****     uint8_t accessResult;
  71:Src/mcp.c     **** 
  72:Src/mcp.c     ****     uint16_t regID;
  73:Src/mcp.c     ****     uint8_t typeID;
  74:Src/mcp.c     ****     uint8_t motorID;
  75:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
  50              		.loc 1 75 15 view .LVU3
  51 0008 324B     		ldr	r3, .L32
  55:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  52              		.loc 1 55 1 view .LVU4
  53 000a 89B0     		sub	sp, sp, #36
  54              	.LCFI1:
  55              		.cfi_def_cfa_offset 72
  69:Src/mcp.c     ****     uint16_t size = 0U;
  56              		.loc 1 69 14 view .LVU5
  57 000c 4FF0000A 		mov	r10, #0
  58              		.loc 1 75 15 view .LVU6
  59 0010 0693     		str	r3, [sp, #24]
  76:Src/mcp.c     ****     uint8_t number_of_item =0;
  77:Src/mcp.c     ****     pHandle->txLength = 0;
  78:Src/mcp.c     **** 
  79:Src/mcp.c     ****     while (rxLength > 0)
  60              		.loc 1 79 11 view .LVU7
  61 0012 5445     		cmp	r4, r10
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  62              		.loc 1 75 15 view .LVU8
  63 0014 304B     		ldr	r3, .L32+4
  69:Src/mcp.c     ****     uint8_t accessResult;
  64              		.loc 1 69 14 view .LVU9
  65 0016 ADF816A0 		strh	r10, [sp, #22]	@ movhi
  67:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
  66              		.loc 1 67 15 view .LVU10
  67 001a D0E901C6 		ldrd	ip, r6, [r0, #4]
  55:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  68              		.loc 1 55 1 view .LVU11
  69 001e 0746     		mov	r7, r0
  56:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  70              		.loc 1 56 3 is_stmt 1 view .LVU12
  71              	.LVL1:
  65:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
  72              		.loc 1 65 5 view .LVU13
  66:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
  73              		.loc 1 66 5 view .LVU14
  68:Src/mcp.c     ****     uint16_t size = 0U;
  74              		.loc 1 68 5 view .LVU15
  69:Src/mcp.c     ****     uint8_t accessResult;
  75              		.loc 1 69 5 view .LVU16
  70:Src/mcp.c     **** 
  76              		.loc 1 70 5 view .LVU17
  72:Src/mcp.c     ****     uint8_t typeID;
  77              		.loc 1 72 5 view .LVU18
  73:Src/mcp.c     ****     uint8_t motorID;
  78              		.loc 1 73 5 view .LVU19
  74:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 4


  79              		.loc 1 74 5 view .LVU20
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  80              		.loc 1 75 5 view .LVU21
  76:Src/mcp.c     ****     pHandle->txLength = 0;
  81              		.loc 1 76 5 view .LVU22
  77:Src/mcp.c     **** 
  82              		.loc 1 77 5 view .LVU23
  83              		.loc 1 79 5 view .LVU24
  84              		.loc 1 79 11 view .LVU25
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  85              		.loc 1 75 15 is_stmt 0 view .LVU26
  86 0020 0793     		str	r3, [sp, #28]
  77:Src/mcp.c     **** 
  87              		.loc 1 77 23 view .LVU27
  88 0022 A0F80EA0 		strh	r10, [r0, #14]	@ movhi
  89              		.loc 1 79 11 view .LVU28
  90 0026 3BDD     		ble	.L10
  91 0028 06EB0108 		add	r8, r6, r1
  56:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  92              		.loc 1 56 11 view .LVU29
  93 002c CDF80CA0 		str	r10, [sp, #12]
  80:Src/mcp.c     ****     {
  81:Src/mcp.c     ****       number_of_item ++;
  82:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
  83:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
  84:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
  85:Src/mcp.c     **** 
  86:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
  87:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
  88:Src/mcp.c     **** 
  89:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
  90:Src/mcp.c     **** 
  91:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
  92:Src/mcp.c     ****       {
  93:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
  94:Src/mcp.c     ****         rxLength = 0;
  95:Src/mcp.c     ****       }
  96:Src/mcp.c     ****       else
  97:Src/mcp.c     ****       {
  98:Src/mcp.c     ****         accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
  99:Src/mcp.c     ****         /* Prepare next data*/
 100:Src/mcp.c     ****         rxLength = (int16_t) (rxLength - size);
 101:Src/mcp.c     ****         rxData = rxData+size;
 102:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 103:Src/mcp.c     ****         if ((1U == number_of_item) && (0 == rxLength))
  94              		.loc 1 103 12 view .LVU30
  95 0030 C6F10109 		rsb	r9, r6, #1
  96              	.LVL2:
  97              	.L9:
  81:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
  98              		.loc 1 81 7 is_stmt 1 view .LVU31
  82:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
  99              		.loc 1 82 7 view .LVU32
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 100              		.loc 1 83 7 view .LVU33
  84:Src/mcp.c     **** 
 101              		.loc 1 84 7 view .LVU34
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 5


  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 102              		.loc 1 86 7 view .LVU35
  84:Src/mcp.c     **** 
 103              		.loc 1 84 14 is_stmt 0 view .LVU36
 104 0034 0CF10205 		add	r5, ip, #2
 105              	.LVL3:
  98:Src/mcp.c     ****         /* Prepare next data*/
 106              		.loc 1 98 9 is_stmt 1 view .LVU37
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 107              		.loc 1 86 15 is_stmt 0 view .LVU38
 108 0038 BCF800C0 		ldrh	ip, [ip]
 109              	.LVL4:
  87:Src/mcp.c     **** 
 110              		.loc 1 87 7 is_stmt 1 view .LVU39
  87:Src/mcp.c     **** 
 111              		.loc 1 87 16 is_stmt 0 view .LVU40
 112 003c 5FFA8CF1 		uxtb	r1, ip
 113              	.LVL5:
  89:Src/mcp.c     **** 
 114              		.loc 1 89 7 is_stmt 1 view .LVU41
  91:Src/mcp.c     ****       {
 115              		.loc 1 91 7 view .LVU42
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 116              		.loc 1 83 26 is_stmt 0 view .LVU43
 117 0040 023C     		subs	r4, r4, #2
 118              	.LVL6:
  98:Src/mcp.c     ****         /* Prepare next data*/
 119              		.loc 1 98 34 view .LVU44
 120 0042 01F0070B 		and	fp, r1, #7
 121 0046 0DF1200A 		add	r10, sp, #32
  91:Src/mcp.c     ****       {
 122              		.loc 1 91 10 view .LVU45
 123 004a 1CF0060F 		tst	ip, #6
  98:Src/mcp.c     ****         /* Prepare next data*/
 124              		.loc 1 98 24 view .LVU46
 125 004e 0FFA84FE 		sxth	lr, r4
 126 0052 0DF11603 		add	r3, sp, #22
 127 0056 2A46     		mov	r2, r5
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 128              		.loc 1 83 26 view .LVU47
 129 0058 A4B2     		uxth	r4, r4
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 130              		.loc 1 86 13 view .LVU48
 131 005a 2CF00700 		bic	r0, ip, #7
  98:Src/mcp.c     ****         /* Prepare next data*/
 132              		.loc 1 98 34 view .LVU49
 133 005e 0AEB8B0B 		add	fp, r10, fp, lsl #2
  98:Src/mcp.c     ****         /* Prepare next data*/
 134              		.loc 1 98 24 view .LVU50
 135 0062 01F03801 		and	r1, r1, #56
 136              	.LVL7:
  91:Src/mcp.c     ****       {
 137              		.loc 1 91 10 view .LVU51
 138 0066 22D1     		bne	.L12
  98:Src/mcp.c     ****         /* Prepare next data*/
 139              		.loc 1 98 24 view .LVU52
 140 0068 CDF800E0 		str	lr, [sp]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 6


 141 006c 5BF808BC 		ldr	fp, [fp, #-8]
 142 0070 D847     		blx	fp
 143              	.LVL8:
 104:Src/mcp.c     ****         {
 105:Src/mcp.c     ****           retVal = accessResult;
 106:Src/mcp.c     ****         }
 107:Src/mcp.c     ****         else
 108:Src/mcp.c     ****         {/* Store the result for each access to be able to report failing access */
 109:Src/mcp.c     ****           if (txSyncFreeSpace !=0 )
 144              		.loc 1 109 11 is_stmt 1 view .LVU53
 110:Src/mcp.c     ****           {
 111:Src/mcp.c     ****             *txData = accessResult;
 145              		.loc 1 111 13 view .LVU54
 100:Src/mcp.c     ****         rxData = rxData+size;
 146              		.loc 1 100 40 is_stmt 0 view .LVU55
 147 0072 BDF81620 		ldrh	r2, [sp, #22]
 103:Src/mcp.c     ****         {
 148              		.loc 1 103 12 view .LVU56
 149 0076 06EB0903 		add	r3, r6, r9
 150 007a DBB2     		uxtb	r3, r3
 151              	.LVL9:
 100:Src/mcp.c     ****         rxData = rxData+size;
 152              		.loc 1 100 9 is_stmt 1 view .LVU57
 100:Src/mcp.c     ****         rxData = rxData+size;
 153              		.loc 1 100 40 is_stmt 0 view .LVU58
 154 007c A41A     		subs	r4, r4, r2
 103:Src/mcp.c     ****         {
 155              		.loc 1 103 12 view .LVU59
 156 007e 012B     		cmp	r3, #1
 100:Src/mcp.c     ****         rxData = rxData+size;
 157              		.loc 1 100 18 view .LVU60
 158 0080 24B2     		sxth	r4, r4
 159              	.LVL10:
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 160              		.loc 1 101 9 is_stmt 1 view .LVU61
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 161              		.loc 1 101 16 is_stmt 0 view .LVU62
 162 0082 05EB020C 		add	ip, r5, r2
 163              	.LVL11:
 103:Src/mcp.c     ****         {
 164              		.loc 1 103 9 is_stmt 1 view .LVU63
 103:Src/mcp.c     ****         {
 165              		.loc 1 103 12 is_stmt 0 view .LVU64
 166 0086 1AD0     		beq	.L29
 167              	.L5:
 109:Src/mcp.c     ****           {
 168              		.loc 1 109 14 view .LVU65
 169 0088 4645     		cmp	r6, r8
 170 008a 14D0     		beq	.L11
 171              	.LVL12:
 112:Src/mcp.c     ****             txData = txData+1;
 113:Src/mcp.c     ****             pHandle->txLength++;
 114:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 115:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 116:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 172              		.loc 1 116 13 is_stmt 1 view .LVU66
 111:Src/mcp.c     ****             txData = txData+1;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 7


 173              		.loc 1 111 21 is_stmt 0 view .LVU67
 174 008c 06F8010B 		strb	r0, [r6], #1
 175              	.LVL13:
 112:Src/mcp.c     ****             txData = txData+1;
 176              		.loc 1 112 13 is_stmt 1 view .LVU68
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 177              		.loc 1 113 13 view .LVU69
  79:Src/mcp.c     ****     {
 178              		.loc 1 79 11 view .LVU70
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 179              		.loc 1 113 30 is_stmt 0 view .LVU71
 180 0090 FB89     		ldrh	r3, [r7, #14]
 181 0092 0133     		adds	r3, r3, #1
 182 0094 FB81     		strh	r3, [r7, #14]	@ movhi
 114:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 183              		.loc 1 114 13 is_stmt 1 view .LVU72
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 184              		.loc 1 115 13 view .LVU73
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 185              		.loc 1 115 20 is_stmt 0 view .LVU74
 186 0096 40B9     		cbnz	r0, .L30
 187              	.L7:
  79:Src/mcp.c     ****     {
 188              		.loc 1 79 11 view .LVU75
 189 0098 002C     		cmp	r4, #0
 190 009a CBDC     		bgt	.L9
 191              	.LVL14:
 117:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 118:Src/mcp.c     ****               /* We stop the parsing */
 119:Src/mcp.c     ****               rxLength = 0;
 120:Src/mcp.c     ****             }
 121:Src/mcp.c     ****           }
 122:Src/mcp.c     ****           else
 123:Src/mcp.c     ****           {
 124:Src/mcp.c     ****             /* Stop parsing the cmd buffer as no space to answer */
 125:Src/mcp.c     ****             /* If we reach this state, chances are high the command was badly formated or received 
 126:Src/mcp.c     ****             rxLength = 0;
 127:Src/mcp.c     ****             retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 128:Src/mcp.c     ****           }
 129:Src/mcp.c     ****         }
 130:Src/mcp.c     ****       }
 131:Src/mcp.c     ****     }
 132:Src/mcp.c     ****     /* If all accesses are fine, just one global MCP_CMD_OK is required*/
 133:Src/mcp.c     ****     if (MCP_CMD_OK == retVal)
 192              		.loc 1 133 5 is_stmt 1 view .LVU76
 193 009c 0398     		ldr	r0, [sp, #12]
 194              	.LVL15:
 195              		.loc 1 133 8 is_stmt 0 view .LVU77
 196 009e 38B9     		cbnz	r0, .L3
 197              	.LVL16:
 198              	.L10:
 134:Src/mcp.c     ****     {
 135:Src/mcp.c     ****       pHandle->txLength = 0;
 199              		.loc 1 135 7 is_stmt 1 view .LVU78
 200              		.loc 1 135 25 is_stmt 0 view .LVU79
 201 00a0 0020     		movs	r0, #0
 202 00a2 F881     		strh	r0, [r7, #14]	@ movhi
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 8


 136:Src/mcp.c     ****     }
 137:Src/mcp.c     ****     else
 138:Src/mcp.c     ****     {
 139:Src/mcp.c     ****       /* Nothing to do */
 140:Src/mcp.c     ****     }
 203              		.loc 1 140 5 is_stmt 1 view .LVU80
 141:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 142:Src/mcp.c     ****   }
 143:Src/mcp.c     **** #endif
 144:Src/mcp.c     ****   return (retVal);
 204              		.loc 1 144 3 view .LVU81
 145:Src/mcp.c     **** }
 205              		.loc 1 145 1 is_stmt 0 view .LVU82
 206 00a4 09B0     		add	sp, sp, #36
 207              	.LCFI2:
 208              		.cfi_remember_state
 209              		.cfi_def_cfa_offset 36
 210              		@ sp needed
 211 00a6 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 212              	.LVL17:
 213              	.L30:
 214              	.LCFI3:
 215              		.cfi_restore_state
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 216              		.loc 1 116 16 discriminator 4 view .LVU83
 217 00aa 0728     		cmp	r0, #7
 218 00ac 0CD1     		bne	.L31
 219              	.LVL18:
 220              	.L12:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 221              		.loc 1 115 20 view .LVU84
 222 00ae 0120     		movs	r0, #1
 223              	.LVL19:
 224              	.L3:
 140:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 225              		.loc 1 140 5 is_stmt 1 view .LVU85
 144:Src/mcp.c     **** }
 226              		.loc 1 144 3 view .LVU86
 227              		.loc 1 145 1 is_stmt 0 view .LVU87
 228 00b0 09B0     		add	sp, sp, #36
 229              	.LCFI4:
 230              		.cfi_remember_state
 231              		.cfi_def_cfa_offset 36
 232              		@ sp needed
 233 00b2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 234              	.LVL20:
 235              	.L11:
 236              	.LCFI5:
 237              		.cfi_restore_state
 127:Src/mcp.c     ****           }
 238              		.loc 1 127 20 view .LVU88
 239 00b6 0820     		movs	r0, #8
 240              	.LVL21:
 140:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 241              		.loc 1 140 5 is_stmt 1 view .LVU89
 144:Src/mcp.c     **** }
 242              		.loc 1 144 3 view .LVU90
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 9


 243              		.loc 1 145 1 is_stmt 0 view .LVU91
 244 00b8 09B0     		add	sp, sp, #36
 245              	.LCFI6:
 246              		.cfi_remember_state
 247              		.cfi_def_cfa_offset 36
 248              		@ sp needed
 249 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 250              	.LVL22:
 251              	.L29:
 252              	.LCFI7:
 253              		.cfi_restore_state
 103:Src/mcp.c     ****         {
 254              		.loc 1 103 36 discriminator 1 view .LVU92
 255 00be 002C     		cmp	r4, #0
 256 00c0 E2D1     		bne	.L5
 257              	.LVL23:
 133:Src/mcp.c     ****     {
 258              		.loc 1 133 5 is_stmt 1 view .LVU93
 133:Src/mcp.c     ****     {
 259              		.loc 1 133 8 is_stmt 0 view .LVU94
 260 00c2 0028     		cmp	r0, #0
 261 00c4 ECD0     		beq	.L10
 262 00c6 F3E7     		b	.L3
 263              	.LVL24:
 264              	.L31:
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 265              		.loc 1 116 59 discriminator 1 view .LVU95
 266 00c8 0A28     		cmp	r0, #10
 267 00ca F0D0     		beq	.L12
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 268              		.loc 1 115 20 view .LVU96
 269 00cc 0123     		movs	r3, #1
 270 00ce 0393     		str	r3, [sp, #12]
 271 00d0 E2E7     		b	.L7
 272              	.L33:
 273 00d2 00BF     		.align	2
 274              	.L32:
 275 00d4 00000000 		.word	RI_SetRegisterGlobal
 276 00d8 00000000 		.word	RI_SetRegisterMotor1
 277              		.cfi_endproc
 278              	.LFE1090:
 280              		.section	.text.RI_GetRegCommandParser,"ax",%progbits
 281              		.align	1
 282              		.p2align 2,,3
 283              		.global	RI_GetRegCommandParser
 284              		.syntax unified
 285              		.thumb
 286              		.thumb_func
 288              	RI_GetRegCommandParser:
 289              	.LVL25:
 290              	.LFB1091:
 146:Src/mcp.c     **** 
 147:Src/mcp.c     **** /**
 148:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to re
 149:Src/mcp.c     ****   *
 150:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_GetRegisterGlob
 151:Src/mcp.c     ****   *
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 10


 152:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 153:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
 154:Src/mcp.c     ****   *
 155:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
 156:Src/mcp.c     ****   */
 157:Src/mcp.c     **** uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
 158:Src/mcp.c     **** {
 291              		.loc 1 158 1 is_stmt 1 view -0
 292              		.cfi_startproc
 293              		@ args = 0, pretend = 0, frame = 16
 294              		@ frame_needed = 0, uses_anonymous_args = 0
 159:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 295              		.loc 1 159 3 view .LVU98
 160:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 161:Src/mcp.c     ****   if (MC_NULL == pHandle)
 162:Src/mcp.c     ****   {
 163:Src/mcp.c     ****     /* Nothing to do */
 164:Src/mcp.c     ****   }
 165:Src/mcp.c     ****   else
 166:Src/mcp.c     ****   {
 167:Src/mcp.c     **** #endif
 168:Src/mcp.c     ****     uint16_t * dataElementID;
 296              		.loc 1 168 5 view .LVU99
 169:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
 297              		.loc 1 169 5 view .LVU100
 158:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 298              		.loc 1 158 1 is_stmt 0 view .LVU101
 299 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 300              	.LCFI8:
 301              		.cfi_def_cfa_offset 32
 302              		.cfi_offset 4, -32
 303              		.cfi_offset 5, -28
 304              		.cfi_offset 6, -24
 305              		.cfi_offset 7, -20
 306              		.cfi_offset 8, -16
 307              		.cfi_offset 9, -12
 308              		.cfi_offset 10, -8
 309              		.cfi_offset 14, -4
 310 0004 86B0     		sub	sp, sp, #24
 311              	.LCFI9:
 312              		.cfi_def_cfa_offset 56
 170:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 171:Src/mcp.c     ****     uint16_t size = 0U;
 313              		.loc 1 171 14 view .LVU102
 314 0006 0023     		movs	r3, #0
 315 0008 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 173:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 174:Src/mcp.c     **** 
 175:Src/mcp.c     ****     uint16_t regID;
 176:Src/mcp.c     ****     uint8_t typeID;
 177:Src/mcp.c     ****     uint8_t motorID;
 178:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 179:Src/mcp.c     ****     pHandle->txLength = 0;
 316              		.loc 1 179 23 view .LVU103
 317 000c C381     		strh	r3, [r0, #14]	@ movhi
 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 11


 318              		.loc 1 172 14 view .LVU104
 319 000e B0F80C80 		ldrh	r8, [r0, #12]
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 320              		.loc 1 178 15 view .LVU105
 321 0012 1F4B     		ldr	r3, .L44
 322 0014 0493     		str	r3, [sp, #16]
 323 0016 1F4B     		ldr	r3, .L44+4
 169:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 324              		.loc 1 169 15 view .LVU106
 325 0018 D0F80490 		ldr	r9, [r0, #4]
 326              	.LVL26:
 170:Src/mcp.c     ****     uint16_t size = 0U;
 327              		.loc 1 170 5 is_stmt 1 view .LVU107
 170:Src/mcp.c     ****     uint16_t size = 0U;
 328              		.loc 1 170 15 is_stmt 0 view .LVU108
 329 001c 8668     		ldr	r6, [r0, #8]
 330              	.LVL27:
 171:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 331              		.loc 1 171 5 is_stmt 1 view .LVU109
 172:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 332              		.loc 1 172 5 view .LVU110
 173:Src/mcp.c     **** 
 333              		.loc 1 173 5 view .LVU111
 175:Src/mcp.c     ****     uint8_t typeID;
 334              		.loc 1 175 5 view .LVU112
 176:Src/mcp.c     ****     uint8_t motorID;
 335              		.loc 1 176 5 view .LVU113
 177:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 336              		.loc 1 177 5 view .LVU114
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 337              		.loc 1 178 5 view .LVU115
 338              		.loc 1 179 5 view .LVU116
 180:Src/mcp.c     ****     while (rxLength > 0U)
 339              		.loc 1 180 5 view .LVU117
 340              		.loc 1 180 11 view .LVU118
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 341              		.loc 1 178 15 is_stmt 0 view .LVU119
 342 001e 0593     		str	r3, [sp, #20]
 343              		.loc 1 180 11 view .LVU120
 344 0020 B8F1000F 		cmp	r8, #0
 345 0024 23D0     		beq	.L35
 346 0026 0746     		mov	r7, r0
 347 0028 0DB2     		sxth	r5, r1
 169:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 348              		.loc 1 169 15 view .LVU121
 349 002a 4C46     		mov	r4, r9
 350              	.LVL28:
 351              	.L37:
 181:Src/mcp.c     ****     {
 182:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
 352              		.loc 1 182 7 is_stmt 1 view .LVU122
 183:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 353              		.loc 1 183 7 view .LVU123
 184:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 354              		.loc 1 184 7 view .LVU124
 185:Src/mcp.c     **** 
 186:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 12


 355              		.loc 1 186 7 view .LVU125
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 188:Src/mcp.c     **** 
 189:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 190:Src/mcp.c     **** 
 191:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
 192:Src/mcp.c     ****       {
 193:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
 194:Src/mcp.c     ****         rxLength = 0;
 195:Src/mcp.c     ****       }
 196:Src/mcp.c     ****       else
 197:Src/mcp.c     ****       {
 198:Src/mcp.c     ****         retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 356              		.loc 1 198 9 view .LVU126
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 357              		.loc 1 186 15 is_stmt 0 view .LVU127
 358 002c 34F802CB 		ldrh	ip, [r4], #2
 359              	.LVL29:
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 360              		.loc 1 187 7 is_stmt 1 view .LVU128
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 361              		.loc 1 187 16 is_stmt 0 view .LVU129
 362 0030 5FFA8CF1 		uxtb	r1, ip
 363              	.LVL30:
 189:Src/mcp.c     **** 
 364              		.loc 1 189 7 is_stmt 1 view .LVU130
 191:Src/mcp.c     ****       {
 365              		.loc 1 191 7 view .LVU131
 366              		.loc 1 198 28 is_stmt 0 view .LVU132
 367 0034 01F0070E 		and	lr, r1, #7
 368 0038 0DF1180A 		add	r10, sp, #24
 191:Src/mcp.c     ****       {
 369              		.loc 1 191 10 view .LVU133
 370 003c 1CF0060F 		tst	ip, #6
 371              		.loc 1 198 18 view .LVU134
 372 0040 3246     		mov	r2, r6
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 373              		.loc 1 186 13 view .LVU135
 374 0042 2CF00700 		bic	r0, ip, #7
 375              		.loc 1 198 18 view .LVU136
 376 0046 0DF10E03 		add	r3, sp, #14
 377              		.loc 1 198 28 view .LVU137
 378 004a 0AEB8E0E 		add	lr, r10, lr, lsl #2
 379              		.loc 1 198 18 view .LVU138
 380 004e 01F03801 		and	r1, r1, #56
 381              	.LVL31:
 191:Src/mcp.c     ****       {
 382              		.loc 1 191 10 view .LVU139
 383 0052 0CD1     		bne	.L35
 384              	.LVL32:
 385              		.loc 1 198 18 view .LVU140
 386 0054 0095     		str	r5, [sp]
 387 0056 5EF808AC 		ldr	r10, [lr, #-8]
 388 005a D047     		blx	r10
 389              	.LVL33:
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 200:Src/mcp.c     ****         {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 13


 201:Src/mcp.c     ****           /* Prepare next data */
 202:Src/mcp.c     ****           txData = txData+size;
 390              		.loc 1 202 11 is_stmt 1 view .LVU141
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 391              		.loc 1 199 9 view .LVU142
 392 005c A8EB0403 		sub	r3, r8, r4
 180:Src/mcp.c     ****     {
 393              		.loc 1 180 11 is_stmt 0 view .LVU143
 394 0060 19FA83F3 		uxtah	r3, r9, r3
 395 0064 9BB2     		uxth	r3, r3
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 396              		.loc 1 199 12 view .LVU144
 397 0066 30B1     		cbz	r0, .L43
 398              	.LVL34:
 399              	.L36:
 203:Src/mcp.c     ****           pHandle->txLength += size;
 204:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 205:Src/mcp.c     ****         }
 206:Src/mcp.c     ****         else
 207:Src/mcp.c     ****         {
 208:Src/mcp.c     ****           rxLength = 0;
 209:Src/mcp.c     ****         }
 210:Src/mcp.c     ****       }
 211:Src/mcp.c     ****     }
 212:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 213:Src/mcp.c     ****   }
 214:Src/mcp.c     **** #endif
 215:Src/mcp.c     ****   return (retVal);
 400              		.loc 1 215 3 is_stmt 1 view .LVU145
 216:Src/mcp.c     **** }
 401              		.loc 1 216 1 is_stmt 0 view .LVU146
 402 0068 06B0     		add	sp, sp, #24
 403              	.LCFI10:
 404              		.cfi_remember_state
 405              		.cfi_def_cfa_offset 32
 406              		@ sp needed
 407 006a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 408              	.LVL35:
 409              	.L35:
 410              	.LCFI11:
 411              		.cfi_restore_state
 159:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 412              		.loc 1 159 11 view .LVU147
 413 006e 0120     		movs	r0, #1
 414              	.LVL36:
 215:Src/mcp.c     **** }
 415              		.loc 1 215 3 is_stmt 1 view .LVU148
 416              		.loc 1 216 1 is_stmt 0 view .LVU149
 417 0070 06B0     		add	sp, sp, #24
 418              	.LCFI12:
 419              		.cfi_remember_state
 420              		.cfi_def_cfa_offset 32
 421              		@ sp needed
 422 0072 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 423              	.LVL37:
 424              	.L43:
 425              	.LCFI13:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 14


 426              		.cfi_restore_state
 202:Src/mcp.c     ****           pHandle->txLength += size;
 427              		.loc 1 202 26 view .LVU150
 428 0076 BDF80EC0 		ldrh	ip, [sp, #14]
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 429              		.loc 1 203 29 view .LVU151
 430 007a FA89     		ldrh	r2, [r7, #14]
 204:Src/mcp.c     ****         }
 431              		.loc 1 204 38 view .LVU152
 432 007c A5EB0C05 		sub	r5, r5, ip
 433              	.LVL38:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 434              		.loc 1 203 29 view .LVU153
 435 0080 6244     		add	r2, r2, ip
 202:Src/mcp.c     ****           pHandle->txLength += size;
 436              		.loc 1 202 18 view .LVU154
 437 0082 6644     		add	r6, r6, ip
 438              	.LVL39:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 439              		.loc 1 203 11 is_stmt 1 view .LVU155
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 440              		.loc 1 203 29 is_stmt 0 view .LVU156
 441 0084 FA81     		strh	r2, [r7, #14]	@ movhi
 204:Src/mcp.c     ****         }
 442              		.loc 1 204 11 is_stmt 1 view .LVU157
 204:Src/mcp.c     ****         }
 443              		.loc 1 204 24 is_stmt 0 view .LVU158
 444 0086 2DB2     		sxth	r5, r5
 445              	.LVL40:
 180:Src/mcp.c     ****     {
 446              		.loc 1 180 11 is_stmt 1 view .LVU159
 447 0088 002B     		cmp	r3, #0
 448 008a CFD1     		bne	.L37
 449 008c ECE7     		b	.L36
 450              	.L45:
 451 008e 00BF     		.align	2
 452              	.L44:
 453 0090 00000000 		.word	RI_GetRegisterGlobal
 454 0094 00000000 		.word	RI_GetRegisterMotor1
 455              		.cfi_endproc
 456              	.LFE1091:
 458              		.section	.text.MCP_ReceivedPacket,"ax",%progbits
 459              		.align	1
 460              		.p2align 2,,3
 461              		.global	MCP_ReceivedPacket
 462              		.syntax unified
 463              		.thumb
 464              		.thumb_func
 466              	MCP_ReceivedPacket:
 467              	.LVL41:
 468              	.LFB1092:
 217:Src/mcp.c     **** 
 218:Src/mcp.c     **** /**
 219:Src/mcp.c     ****   * @brief  Parses the header from the received packet and call the required function depending on 
 220:Src/mcp.c     ****   *
 221:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 222:Src/mcp.c     ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 15


 223:Src/mcp.c     **** void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
 224:Src/mcp.c     **** {
 469              		.loc 1 224 1 view -0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Src/mcp.c     ****   const uint16_t *packetHeader;
 473              		.loc 1 225 3 view .LVU161
 226:Src/mcp.c     ****   uint16_t command;
 474              		.loc 1 226 3 view .LVU162
 227:Src/mcp.c     ****   int16_t txSyncFreeSpace;
 475              		.loc 1 227 3 view .LVU163
 228:Src/mcp.c     ****   uint8_t motorID;
 476              		.loc 1 228 3 view .LVU164
 229:Src/mcp.c     ****   uint8_t MCPResponse;
 477              		.loc 1 229 3 view .LVU165
 230:Src/mcp.c     ****   uint8_t userCommand=0;
 478              		.loc 1 230 3 view .LVU166
 231:Src/mcp.c     **** 
 232:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 233:Src/mcp.c     ****   if ((MC_NULL == pHandle) || (0U == pHandle->rxLength))
 234:Src/mcp.c     ****   {
 235:Src/mcp.c     ****     /* Nothing to do, txBuffer and txLength have not been modified */
 236:Src/mcp.c     ****   }
 237:Src/mcp.c     ****   else /* Length is 0, this is a request to send back the last packet */
 238:Src/mcp.c     ****   {
 239:Src/mcp.c     **** #endif
 240:Src/mcp.c     ****     packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 479              		.loc 1 240 5 view .LVU167
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 480              		.loc 1 224 1 is_stmt 0 view .LVU168
 481 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 482              	.LCFI14:
 483              		.cfi_def_cfa_offset 20
 484              		.cfi_offset 4, -20
 485              		.cfi_offset 5, -16
 486              		.cfi_offset 6, -12
 487              		.cfi_offset 7, -8
 488              		.cfi_offset 14, -4
 489              		.loc 1 240 18 view .LVU169
 490 0002 4568     		ldr	r5, [r0, #4]
 491              	.LVL42:
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 492              		.loc 1 241 5 is_stmt 1 view .LVU170
 493              		.loc 1 241 26 is_stmt 0 view .LVU171
 494 0004 2B88     		ldrh	r3, [r5]
 242:Src/mcp.c     **** 
 243:Src/mcp.c     ****     if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 495              		.loc 1 243 8 view .LVU172
 496 0006 03F47F42 		and	r2, r3, #65280
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 497              		.loc 1 241 13 view .LVU173
 498 000a 23F0070C 		bic	ip, r3, #7
 499              		.loc 1 243 8 view .LVU174
 500 000e B2F5807F 		cmp	r2, #256
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 501              		.loc 1 224 1 view .LVU175
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 16


 502 0012 83B0     		sub	sp, sp, #12
 503              	.LCFI15:
 504              		.cfi_def_cfa_offset 32
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 505              		.loc 1 224 1 view .LVU176
 506 0014 0446     		mov	r4, r0
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 507              		.loc 1 241 13 view .LVU177
 508 0016 1FFA8CFC 		uxth	ip, ip
 509              	.LVL43:
 510              		.loc 1 243 5 is_stmt 1 view .LVU178
 511              		.loc 1 243 8 is_stmt 0 view .LVU179
 512 001a 53D0     		beq	.L73
 244:Src/mcp.c     ****     {
 245:Src/mcp.c     ****       userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 246:Src/mcp.c     ****       command = MCP_USER_CMD;
 247:Src/mcp.c     ****     }
 248:Src/mcp.c     ****     else
 249:Src/mcp.c     ****     {
 250:Src/mcp.c     ****       /* Nothing to do */
 251:Src/mcp.c     ****     }
 513              		.loc 1 251 5 is_stmt 1 view .LVU180
 252:Src/mcp.c     **** 
 253:Src/mcp.c     ****     motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 514              		.loc 1 253 5 view .LVU181
 515              	.LVL44:
 254:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 516              		.loc 1 254 5 view .LVU182
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 517              		.loc 1 253 40 is_stmt 0 view .LVU183
 518 001c 013B     		subs	r3, r3, #1
 519              	.LVL45:
 520              		.loc 1 254 19 view .LVU184
 521 001e 03F00703 		and	r3, r3, #7
 522              	.LVL46:
 523              		.loc 1 254 19 view .LVU185
 524 0022 03EB8302 		add	r2, r3, r3, lsl #2
 525 0026 5B4F     		ldr	r7, .L75
 526 0028 03EB4203 		add	r3, r3, r2, lsl #1
 255:Src/mcp.c     **** 
 256:Src/mcp.c     ****     /* Removing MCP Header from RxBuffer */
 257:Src/mcp.c     ****     pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 258:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 527              		.loc 1 258 43 view .LVU186
 528 002c 0235     		adds	r5, r5, #2
 529              	.LVL47:
 254:Src/mcp.c     **** 
 530              		.loc 1 254 19 view .LVU187
 531 002e 07EB8307 		add	r7, r7, r3, lsl #2
 532              	.LVL48:
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 533              		.loc 1 257 5 is_stmt 1 view .LVU188
 259:Src/mcp.c     **** 
 260:Src/mcp.c     ****     /* Commands requiering payload response must be aware of space available for the payload */
 261:Src/mcp.c     ****     /* Last byte is reserved for MCP response*/
 262:Src/mcp.c     ****     txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 534              		.loc 1 262 56 is_stmt 0 view .LVU189
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 17


 535 0032 2368     		ldr	r3, [r4]
 258:Src/mcp.c     **** 
 536              		.loc 1 258 23 view .LVU190
 537 0034 4560     		str	r5, [r0, #4]
 538              	.LVL49:
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 539              		.loc 1 257 43 view .LVU191
 540 0036 8089     		ldrh	r0, [r0, #12]
 541              	.LVL50:
 542              		.loc 1 262 75 view .LVU192
 543 0038 9A89     		ldrh	r2, [r3, #12]
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 544              		.loc 1 257 43 view .LVU193
 545 003a 0238     		subs	r0, r0, #2
 546              		.loc 1 262 75 view .LVU194
 547 003c 013A     		subs	r2, r2, #1
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 548              		.loc 1 257 43 view .LVU195
 549 003e 80B2     		uxth	r0, r0
 263:Src/mcp.c     **** 
 264:Src/mcp.c     ****     /* Initialization of the tx length, command which send back data has to increment the txLength
 265:Src/mcp.c     ****      * (case of Read register) */
 266:Src/mcp.c     ****     pHandle->txLength = 0U;
 550              		.loc 1 266 23 view .LVU196
 551 0040 0026     		movs	r6, #0
 267:Src/mcp.c     **** 
 268:Src/mcp.c     ****     switch (command)
 552              		.loc 1 268 5 view .LVU197
 553 0042 BCF1380F 		cmp	ip, #56
 262:Src/mcp.c     **** 
 554              		.loc 1 262 75 view .LVU198
 555 0046 91B2     		uxth	r1, r2
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 556              		.loc 1 257 23 view .LVU199
 557 0048 A081     		strh	r0, [r4, #12]	@ movhi
 558              	.LVL51:
 258:Src/mcp.c     **** 
 559              		.loc 1 258 5 is_stmt 1 view .LVU200
 262:Src/mcp.c     **** 
 560              		.loc 1 262 5 view .LVU201
 266:Src/mcp.c     **** 
 561              		.loc 1 266 23 is_stmt 0 view .LVU202
 562 004a E681     		strh	r6, [r4, #14]	@ movhi
 262:Src/mcp.c     **** 
 563              		.loc 1 262 21 view .LVU203
 564 004c 12B2     		sxth	r2, r2
 565              	.LVL52:
 266:Src/mcp.c     **** 
 566              		.loc 1 266 5 is_stmt 1 view .LVU204
 567              		.loc 1 268 5 view .LVU205
 568 004e 2AD8     		bhi	.L50
 569 0050 BCF1380F 		cmp	ip, #56
 570 0054 1ED8     		bhi	.L66
 571 0056 DFE80CF0 		tbb	[pc, ip]
 572              	.L52:
 573 005a 63       		.byte	(.L59-.L52)/2
 574 005b 1D       		.byte	(.L66-.L52)/2
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 18


 575 005c 1D       		.byte	(.L66-.L52)/2
 576 005d 1D       		.byte	(.L66-.L52)/2
 577 005e 1D       		.byte	(.L66-.L52)/2
 578 005f 1D       		.byte	(.L66-.L52)/2
 579 0060 1D       		.byte	(.L66-.L52)/2
 580 0061 1D       		.byte	(.L66-.L52)/2
 581 0062 6B       		.byte	(.L58-.L52)/2
 582 0063 1D       		.byte	(.L66-.L52)/2
 583 0064 1D       		.byte	(.L66-.L52)/2
 584 0065 1D       		.byte	(.L66-.L52)/2
 585 0066 1D       		.byte	(.L66-.L52)/2
 586 0067 1D       		.byte	(.L66-.L52)/2
 587 0068 1D       		.byte	(.L66-.L52)/2
 588 0069 1D       		.byte	(.L66-.L52)/2
 589 006a 70       		.byte	(.L57-.L52)/2
 590 006b 1D       		.byte	(.L66-.L52)/2
 591 006c 1D       		.byte	(.L66-.L52)/2
 592 006d 1D       		.byte	(.L66-.L52)/2
 593 006e 1D       		.byte	(.L66-.L52)/2
 594 006f 1D       		.byte	(.L66-.L52)/2
 595 0070 1D       		.byte	(.L66-.L52)/2
 596 0071 1D       		.byte	(.L66-.L52)/2
 597 0072 75       		.byte	(.L56-.L52)/2
 598 0073 1D       		.byte	(.L66-.L52)/2
 599 0074 1D       		.byte	(.L66-.L52)/2
 600 0075 1D       		.byte	(.L66-.L52)/2
 601 0076 1D       		.byte	(.L66-.L52)/2
 602 0077 1D       		.byte	(.L66-.L52)/2
 603 0078 1D       		.byte	(.L66-.L52)/2
 604 0079 1D       		.byte	(.L66-.L52)/2
 605 007a 4C       		.byte	(.L64-.L52)/2
 606 007b 1D       		.byte	(.L66-.L52)/2
 607 007c 1D       		.byte	(.L66-.L52)/2
 608 007d 1D       		.byte	(.L66-.L52)/2
 609 007e 1D       		.byte	(.L66-.L52)/2
 610 007f 1D       		.byte	(.L66-.L52)/2
 611 0080 1D       		.byte	(.L66-.L52)/2
 612 0081 1D       		.byte	(.L66-.L52)/2
 613 0082 52       		.byte	(.L54-.L52)/2
 614 0083 1D       		.byte	(.L66-.L52)/2
 615 0084 1D       		.byte	(.L66-.L52)/2
 616 0085 1D       		.byte	(.L66-.L52)/2
 617 0086 1D       		.byte	(.L66-.L52)/2
 618 0087 1D       		.byte	(.L66-.L52)/2
 619 0088 1D       		.byte	(.L66-.L52)/2
 620 0089 1D       		.byte	(.L66-.L52)/2
 621 008a 47       		.byte	(.L53-.L52)/2
 622 008b 1D       		.byte	(.L66-.L52)/2
 623 008c 1D       		.byte	(.L66-.L52)/2
 624 008d 1D       		.byte	(.L66-.L52)/2
 625 008e 1D       		.byte	(.L66-.L52)/2
 626 008f 1D       		.byte	(.L66-.L52)/2
 627 0090 1D       		.byte	(.L66-.L52)/2
 628 0091 1D       		.byte	(.L66-.L52)/2
 629 0092 5D       		.byte	(.L51-.L52)/2
 630 0093 00       		.p2align 1
 631              	.L66:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 19


 632 0094 0023     		movs	r3, #0
 633 0096 0220     		movs	r0, #2
 634              	.LVL53:
 635              	.L49:
 269:Src/mcp.c     ****     {
 270:Src/mcp.c     ****       case GET_MCP_VERSION:
 271:Src/mcp.c     ****       {
 272:Src/mcp.c     ****         pHandle->txLength = 4U;
 273:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 274:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 275:Src/mcp.c     ****         break;
 276:Src/mcp.c     ****       }
 277:Src/mcp.c     **** 
 278:Src/mcp.c     ****       case SET_DATA_ELEMENT:
 279:Src/mcp.c     ****       {
 280:Src/mcp.c     ****         MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 281:Src/mcp.c     ****         break;
 282:Src/mcp.c     ****       }
 283:Src/mcp.c     **** 
 284:Src/mcp.c     ****       case GET_DATA_ELEMENT:
 285:Src/mcp.c     ****       {
 286:Src/mcp.c     ****         MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 287:Src/mcp.c     ****         break;
 288:Src/mcp.c     ****       }
 289:Src/mcp.c     **** 
 290:Src/mcp.c     ****       case START_MOTOR:
 291:Src/mcp.c     ****       {
 292:Src/mcp.c     ****         MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == false) ? MCP_CMD_OK : MCP_CMD_NOK;
 293:Src/mcp.c     **** 
 294:Src/mcp.c     ****         break;
 295:Src/mcp.c     ****       }
 296:Src/mcp.c     **** 
 297:Src/mcp.c     ****       case STOP_MOTOR: /* Todo: Check the pertinance of return value */
 298:Src/mcp.c     ****       {
 299:Src/mcp.c     ****         (void)MCI_StopMotor(pMCI);
 300:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 301:Src/mcp.c     ****         break;
 302:Src/mcp.c     ****       }
 303:Src/mcp.c     **** 
 304:Src/mcp.c     ****       case STOP_RAMP:
 305:Src/mcp.c     ****       {
 306:Src/mcp.c     ****         if (RUN == MCI_GetSTMState(pMCI))
 307:Src/mcp.c     ****         {
 308:Src/mcp.c     ****           MCI_StopRamp(pMCI);
 309:Src/mcp.c     ****         }
 310:Src/mcp.c     ****         else
 311:Src/mcp.c     ****         {
 312:Src/mcp.c     ****           /* Nothing to do */
 313:Src/mcp.c     ****         }
 314:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 315:Src/mcp.c     ****         break;
 316:Src/mcp.c     ****       }
 317:Src/mcp.c     **** 
 318:Src/mcp.c     ****       case START_STOP:
 319:Src/mcp.c     ****       {
 320:Src/mcp.c     ****         /* Queries the STM and a command start or stop depending on the state */
 321:Src/mcp.c     ****         if (IDLE == MCI_GetSTMState(pMCI))
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 20


 322:Src/mcp.c     ****         {
 323:Src/mcp.c     **** 
 324:Src/mcp.c     ****           MCPResponse = (MCI_StartWithPolarizationMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 325:Src/mcp.c     **** 
 326:Src/mcp.c     ****         }
 327:Src/mcp.c     ****         else
 328:Src/mcp.c     ****         {
 329:Src/mcp.c     ****           (void)MCI_StopMotor(pMCI);
 330:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 331:Src/mcp.c     ****         }
 332:Src/mcp.c     ****         break;
 333:Src/mcp.c     ****       }
 334:Src/mcp.c     **** 
 335:Src/mcp.c     ****       case FAULT_ACK:
 336:Src/mcp.c     ****       {
 337:Src/mcp.c     ****         (void)MCI_FaultAcknowledged(pMCI);
 338:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 339:Src/mcp.c     ****         break;
 340:Src/mcp.c     ****       }
 341:Src/mcp.c     **** 
 342:Src/mcp.c     ****       case IQDREF_CLEAR:
 343:Src/mcp.c     ****       {
 344:Src/mcp.c     ****         MCI_Clear_Iqdref(pMCI);
 345:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 346:Src/mcp.c     ****         break;
 347:Src/mcp.c     ****       }
 348:Src/mcp.c     **** 
 349:Src/mcp.c     ****       case PFC_ENABLE:
 350:Src/mcp.c     ****       case PFC_DISABLE:
 351:Src/mcp.c     ****       case PFC_FAULT_ACK:
 352:Src/mcp.c     ****       {
 353:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 354:Src/mcp.c     ****         break;
 355:Src/mcp.c     ****       }
 356:Src/mcp.c     **** 
 357:Src/mcp.c     ****       case PROFILER_CMD:
 358:Src/mcp.c     ****       {
 359:Src/mcp.c     ****         MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pH
 360:Src/mcp.c     ****                                          pHandle->txBuffer);
 361:Src/mcp.c     ****         break;
 362:Src/mcp.c     ****       }
 363:Src/mcp.c     **** 
 364:Src/mcp.c     ****       case MCP_USER_CMD:
 365:Src/mcp.c     ****       {
 366:Src/mcp.c     ****         if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 367:Src/mcp.c     ****         {
 368:Src/mcp.c     ****           MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncF
 369:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 370:Src/mcp.c     ****         }
 371:Src/mcp.c     ****         else
 372:Src/mcp.c     ****         {
 373:Src/mcp.c     ****           MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 374:Src/mcp.c     ****         }
 375:Src/mcp.c     ****         break;
 376:Src/mcp.c     ****       }
 377:Src/mcp.c     **** 
 378:Src/mcp.c     ****       default :
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 21


 379:Src/mcp.c     ****       {
 380:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 381:Src/mcp.c     ****         break;
 382:Src/mcp.c     ****       }
 383:Src/mcp.c     ****     }
 384:Src/mcp.c     ****     pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 636              		.loc 1 384 5 view .LVU206
 637              		.loc 1 384 42 is_stmt 0 view .LVU207
 638 0098 A268     		ldr	r2, [r4, #8]
 639 009a D054     		strb	r0, [r2, r3]
 385:Src/mcp.c     ****     pHandle->txLength++;
 640              		.loc 1 385 5 is_stmt 1 view .LVU208
 641              		.loc 1 385 22 is_stmt 0 view .LVU209
 642 009c E389     		ldrh	r3, [r4, #14]
 643 009e 0133     		adds	r3, r3, #1
 644 00a0 E381     		strh	r3, [r4, #14]	@ movhi
 386:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 387:Src/mcp.c     ****   }
 388:Src/mcp.c     **** #endif
 389:Src/mcp.c     **** }
 645              		.loc 1 389 1 view .LVU210
 646 00a2 03B0     		add	sp, sp, #12
 647              	.LCFI16:
 648              		.cfi_remember_state
 649              		.cfi_def_cfa_offset 20
 650              		@ sp needed
 651 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 652              	.LVL54:
 653              	.L50:
 654              	.LCFI17:
 655              		.cfi_restore_state
 268:Src/mcp.c     ****     {
 656              		.loc 1 268 5 view .LVU211
 657 00a6 BCF1680F 		cmp	ip, #104
 658 00aa 5FD0     		beq	.L60
 659 00ac BCF5807F 		cmp	ip, #256
 660 00b0 6DD0     		beq	.L67
 661 00b2 BCF1480F 		cmp	ip, #72
 662 00b6 EDD1     		bne	.L66
 344:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 663              		.loc 1 344 9 is_stmt 1 view .LVU212
 664 00b8 3846     		mov	r0, r7
 665 00ba FFF7FEFF 		bl	MCI_Clear_Iqdref
 666              	.LVL55:
 345:Src/mcp.c     ****         break;
 667              		.loc 1 345 9 view .LVU213
 346:Src/mcp.c     ****       }
 668              		.loc 1 346 9 view .LVU214
 384:Src/mcp.c     ****     pHandle->txLength++;
 669              		.loc 1 384 30 is_stmt 0 view .LVU215
 670 00be E389     		ldrh	r3, [r4, #14]
 345:Src/mcp.c     ****         break;
 671              		.loc 1 345 21 view .LVU216
 672 00c0 3046     		mov	r0, r6
 346:Src/mcp.c     ****       }
 673              		.loc 1 346 9 view .LVU217
 674 00c2 E9E7     		b	.L49
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 22


 675              	.LVL56:
 676              	.L73:
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 677              		.loc 1 245 7 is_stmt 1 view .LVU218
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 678              		.loc 1 257 43 is_stmt 0 view .LVU219
 679 00c4 8089     		ldrh	r0, [r0, #12]
 680              	.LVL57:
 262:Src/mcp.c     **** 
 681              		.loc 1 262 56 view .LVU220
 682 00c6 2368     		ldr	r3, [r4]
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 683              		.loc 1 257 43 view .LVU221
 684 00c8 0238     		subs	r0, r0, #2
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 685              		.loc 1 245 19 view .LVU222
 686 00ca CCF3C40C 		ubfx	ip, ip, #3, #5
 687              	.LVL58:
 246:Src/mcp.c     ****     }
 688              		.loc 1 246 7 is_stmt 1 view .LVU223
 251:Src/mcp.c     **** 
 689              		.loc 1 251 5 view .LVU224
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 690              		.loc 1 253 5 view .LVU225
 254:Src/mcp.c     **** 
 691              		.loc 1 254 5 view .LVU226
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 692              		.loc 1 257 5 view .LVU227
 262:Src/mcp.c     **** 
 693              		.loc 1 262 56 is_stmt 0 view .LVU228
 694 00ce 9A89     		ldrh	r2, [r3, #12]
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 695              		.loc 1 257 43 view .LVU229
 696 00d0 80B2     		uxth	r0, r0
 258:Src/mcp.c     **** 
 697              		.loc 1 258 43 view .LVU230
 698 00d2 0235     		adds	r5, r5, #2
 699              	.LVL59:
 266:Src/mcp.c     **** 
 700              		.loc 1 266 23 view .LVU231
 701 00d4 0023     		movs	r3, #0
 366:Src/mcp.c     ****         {
 702              		.loc 1 366 12 view .LVU232
 703 00d6 BCF1010F 		cmp	ip, #1
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 704              		.loc 1 257 23 view .LVU233
 705 00da A081     		strh	r0, [r4, #12]	@ movhi
 706              	.LVL60:
 258:Src/mcp.c     **** 
 707              		.loc 1 258 5 is_stmt 1 view .LVU234
 258:Src/mcp.c     **** 
 708              		.loc 1 258 23 is_stmt 0 view .LVU235
 709 00dc 6560     		str	r5, [r4, #4]
 710              	.LVL61:
 262:Src/mcp.c     **** 
 711              		.loc 1 262 5 is_stmt 1 view .LVU236
 266:Src/mcp.c     **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 23


 712              		.loc 1 266 5 view .LVU237
 266:Src/mcp.c     **** 
 713              		.loc 1 266 23 is_stmt 0 view .LVU238
 714 00de E381     		strh	r3, [r4, #14]	@ movhi
 268:Src/mcp.c     ****     {
 715              		.loc 1 268 5 is_stmt 1 view .LVU239
 716              	.LVL62:
 366:Src/mcp.c     ****         {
 717              		.loc 1 366 9 view .LVU240
 366:Src/mcp.c     ****         {
 718              		.loc 1 366 12 is_stmt 0 view .LVU241
 719 00e0 35D9     		bls	.L48
 720              	.LVL63:
 721              	.L65:
 314:Src/mcp.c     ****         break;
 722              		.loc 1 314 21 view .LVU242
 723 00e2 0023     		movs	r3, #0
 373:Src/mcp.c     ****         }
 724              		.loc 1 373 23 view .LVU243
 725 00e4 0D20     		movs	r0, #13
 726 00e6 D7E7     		b	.L49
 727              	.LVL64:
 728              	.L53:
 321:Src/mcp.c     ****         {
 729              		.loc 1 321 9 is_stmt 1 view .LVU244
 321:Src/mcp.c     ****         {
 730              		.loc 1 321 21 is_stmt 0 view .LVU245
 731 00e8 3846     		mov	r0, r7
 732 00ea FFF7FEFF 		bl	MCI_GetSTMState
 733              	.LVL65:
 321:Src/mcp.c     ****         {
 734              		.loc 1 321 12 view .LVU246
 735 00ee 0028     		cmp	r0, #0
 736 00f0 45D0     		beq	.L74
 737              	.L64:
 329:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 738              		.loc 1 329 11 is_stmt 1 view .LVU247
 329:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 739              		.loc 1 329 17 is_stmt 0 view .LVU248
 740 00f2 3846     		mov	r0, r7
 741 00f4 FFF7FEFF 		bl	MCI_StopMotor
 742              	.LVL66:
 743              	.L72:
 330:Src/mcp.c     ****         }
 744              		.loc 1 330 11 is_stmt 1 view .LVU249
 384:Src/mcp.c     ****     pHandle->txLength++;
 745              		.loc 1 384 30 is_stmt 0 view .LVU250
 746 00f8 E389     		ldrh	r3, [r4, #14]
 330:Src/mcp.c     ****         }
 747              		.loc 1 330 23 view .LVU251
 748 00fa 0020     		movs	r0, #0
 749 00fc CCE7     		b	.L49
 750              	.LVL67:
 751              	.L54:
 306:Src/mcp.c     ****         {
 752              		.loc 1 306 9 is_stmt 1 view .LVU252
 306:Src/mcp.c     ****         {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 24


 753              		.loc 1 306 20 is_stmt 0 view .LVU253
 754 00fe 3846     		mov	r0, r7
 755 0100 FFF7FEFF 		bl	MCI_GetSTMState
 756              	.LVL68:
 306:Src/mcp.c     ****         {
 757              		.loc 1 306 12 view .LVU254
 758 0104 0628     		cmp	r0, #6
 759 0106 F7D1     		bne	.L72
 308:Src/mcp.c     ****         }
 760              		.loc 1 308 11 is_stmt 1 view .LVU255
 761 0108 3846     		mov	r0, r7
 762 010a FFF7FEFF 		bl	MCI_StopRamp
 763              	.LVL69:
 384:Src/mcp.c     ****     pHandle->txLength++;
 764              		.loc 1 384 30 is_stmt 0 view .LVU256
 765 010e E389     		ldrh	r3, [r4, #14]
 314:Src/mcp.c     ****         break;
 766              		.loc 1 314 21 view .LVU257
 767 0110 0020     		movs	r0, #0
 768 0112 C1E7     		b	.L49
 769              	.LVL70:
 770              	.L51:
 337:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 771              		.loc 1 337 9 is_stmt 1 view .LVU258
 337:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 772              		.loc 1 337 15 is_stmt 0 view .LVU259
 773 0114 3846     		mov	r0, r7
 774 0116 FFF7FEFF 		bl	MCI_FaultAcknowledged
 775              	.LVL71:
 338:Src/mcp.c     ****         break;
 776              		.loc 1 338 9 is_stmt 1 view .LVU260
 339:Src/mcp.c     ****       }
 777              		.loc 1 339 9 view .LVU261
 384:Src/mcp.c     ****     pHandle->txLength++;
 778              		.loc 1 384 30 is_stmt 0 view .LVU262
 779 011a E389     		ldrh	r3, [r4, #14]
 338:Src/mcp.c     ****         break;
 780              		.loc 1 338 21 view .LVU263
 781 011c 0020     		movs	r0, #0
 339:Src/mcp.c     ****       }
 782              		.loc 1 339 9 view .LVU264
 783 011e BBE7     		b	.L49
 784              	.LVL72:
 785              	.L59:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 786              		.loc 1 272 9 is_stmt 1 view .LVU265
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 787              		.loc 1 273 17 is_stmt 0 view .LVU266
 788 0120 A368     		ldr	r3, [r4, #8]
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 789              		.loc 1 272 27 view .LVU267
 790 0122 0421     		movs	r1, #4
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 791              		.loc 1 273 28 view .LVU268
 792 0124 0122     		movs	r2, #1
 793              	.LVL73:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 25


 794              		.loc 1 272 27 view .LVU269
 795 0126 E181     		strh	r1, [r4, #14]	@ movhi
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 796              		.loc 1 273 9 is_stmt 1 view .LVU270
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 797              		.loc 1 273 28 is_stmt 0 view .LVU271
 798 0128 1A70     		strb	r2, [r3]
 799              	.LVL74:
 274:Src/mcp.c     ****         break;
 800              		.loc 1 274 9 is_stmt 1 view .LVU272
 275:Src/mcp.c     ****       }
 801              		.loc 1 275 9 view .LVU273
 384:Src/mcp.c     ****     pHandle->txLength++;
 802              		.loc 1 384 30 is_stmt 0 view .LVU274
 803 012a E389     		ldrh	r3, [r4, #14]
 274:Src/mcp.c     ****         break;
 804              		.loc 1 274 21 view .LVU275
 805 012c 0020     		movs	r0, #0
 275:Src/mcp.c     ****       }
 806              		.loc 1 275 9 view .LVU276
 807 012e B3E7     		b	.L49
 808              	.LVL75:
 809              	.L58:
 280:Src/mcp.c     ****         break;
 810              		.loc 1 280 9 is_stmt 1 view .LVU277
 280:Src/mcp.c     ****         break;
 811              		.loc 1 280 23 is_stmt 0 view .LVU278
 812 0130 2046     		mov	r0, r4
 813 0132 FFF7FEFF 		bl	RI_SetRegCommandParser
 814              	.LVL76:
 384:Src/mcp.c     ****     pHandle->txLength++;
 815              		.loc 1 384 30 view .LVU279
 816 0136 E389     		ldrh	r3, [r4, #14]
 817              	.LVL77:
 281:Src/mcp.c     ****       }
 818              		.loc 1 281 9 is_stmt 1 view .LVU280
 819 0138 AEE7     		b	.L49
 820              	.LVL78:
 821              	.L57:
 286:Src/mcp.c     ****         break;
 822              		.loc 1 286 9 view .LVU281
 286:Src/mcp.c     ****         break;
 823              		.loc 1 286 23 is_stmt 0 view .LVU282
 824 013a 2046     		mov	r0, r4
 825 013c FFF7FEFF 		bl	RI_GetRegCommandParser
 826              	.LVL79:
 384:Src/mcp.c     ****     pHandle->txLength++;
 827              		.loc 1 384 30 view .LVU283
 828 0140 E389     		ldrh	r3, [r4, #14]
 829              	.LVL80:
 287:Src/mcp.c     ****       }
 830              		.loc 1 287 9 is_stmt 1 view .LVU284
 831 0142 A9E7     		b	.L49
 832              	.LVL81:
 833              	.L56:
 292:Src/mcp.c     **** 
 834              		.loc 1 292 9 view .LVU285
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 26


 292:Src/mcp.c     **** 
 835              		.loc 1 292 24 is_stmt 0 view .LVU286
 836 0144 3846     		mov	r0, r7
 837 0146 FFF7FEFF 		bl	MCI_StartWithPolarizationMotor
 838              	.LVL82:
 384:Src/mcp.c     ****     pHandle->txLength++;
 839              		.loc 1 384 30 view .LVU287
 840 014a E389     		ldrh	r3, [r4, #14]
 841 014c A4E7     		b	.L49
 842              	.LVL83:
 843              	.L48:
 262:Src/mcp.c     **** 
 844              		.loc 1 262 75 view .LVU288
 845 014e 013A     		subs	r2, r2, #1
 846              	.LVL84:
 262:Src/mcp.c     **** 
 847              		.loc 1 262 21 view .LVU289
 848 0150 12B2     		sxth	r2, r2
 849              	.LVL85:
 850              	.L61:
 366:Src/mcp.c     ****         {
 851              		.loc 1 366 71 discriminator 1 view .LVU290
 852 0152 114B     		ldr	r3, .L75+4
 853 0154 53F82C60 		ldr	r6, [r3, ip, lsl #2]
 366:Src/mcp.c     ****         {
 854              		.loc 1 366 51 discriminator 1 view .LVU291
 855 0158 002E     		cmp	r6, #0
 856 015a C2D0     		beq	.L65
 368:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 857              		.loc 1 368 11 is_stmt 1 view .LVU292
 368:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 858              		.loc 1 368 25 is_stmt 0 view .LVU293
 859 015c A368     		ldr	r3, [r4, #8]
 860 015e 0093     		str	r3, [sp]
 861 0160 2946     		mov	r1, r5
 862 0162 04F10E03 		add	r3, r4, #14
 863 0166 B047     		blx	r6
 864              	.LVL86:
 384:Src/mcp.c     ****     pHandle->txLength++;
 865              		.loc 1 384 30 view .LVU294
 866 0168 E389     		ldrh	r3, [r4, #14]
 867              	.LVL87:
 368:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 868              		.loc 1 368 23 view .LVU295
 869 016a 95E7     		b	.L49
 870              	.LVL88:
 871              	.L60:
 359:Src/mcp.c     ****                                          pHandle->txBuffer);
 872              		.loc 1 359 9 is_stmt 1 view .LVU296
 359:Src/mcp.c     ****                                          pHandle->txBuffer);
 873              		.loc 1 359 23 is_stmt 0 view .LVU297
 874 016c A368     		ldr	r3, [r4, #8]
 875 016e 0093     		str	r3, [sp]
 876 0170 2946     		mov	r1, r5
 877 0172 04F10E03 		add	r3, r4, #14
 878 0176 FFF7FEFF 		bl	MC_ProfilerCommand
 879              	.LVL89:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 27


 384:Src/mcp.c     ****     pHandle->txLength++;
 880              		.loc 1 384 30 view .LVU298
 881 017a E389     		ldrh	r3, [r4, #14]
 882              	.LVL90:
 361:Src/mcp.c     ****       }
 883              		.loc 1 361 9 is_stmt 1 view .LVU299
 884 017c 8CE7     		b	.L49
 885              	.LVL91:
 886              	.L74:
 324:Src/mcp.c     **** 
 887              		.loc 1 324 11 view .LVU300
 324:Src/mcp.c     **** 
 888              		.loc 1 324 26 is_stmt 0 view .LVU301
 889 017e 3846     		mov	r0, r7
 890 0180 FFF7FEFF 		bl	MCI_StartWithPolarizationMotor
 891              	.LVL92:
 324:Src/mcp.c     **** 
 892              		.loc 1 324 85 view .LVU302
 893 0184 80F00100 		eor	r0, r0, #1
 384:Src/mcp.c     ****     pHandle->txLength++;
 894              		.loc 1 384 30 view .LVU303
 895 0188 E389     		ldrh	r3, [r4, #14]
 324:Src/mcp.c     **** 
 896              		.loc 1 324 23 view .LVU304
 897 018a C0B2     		uxtb	r0, r0
 898              	.LVL93:
 324:Src/mcp.c     **** 
 899              		.loc 1 324 23 view .LVU305
 900 018c 84E7     		b	.L49
 901              	.LVL94:
 902              	.L67:
 268:Src/mcp.c     ****     {
 903              		.loc 1 268 5 view .LVU306
 904 018e B446     		mov	ip, r6
 905              	.LVL95:
 268:Src/mcp.c     ****     {
 906              		.loc 1 268 5 view .LVU307
 907 0190 DFE7     		b	.L61
 908              	.L76:
 909 0192 00BF     		.align	2
 910              	.L75:
 911 0194 00000000 		.word	Mci
 912 0198 00000000 		.word	MCP_UserCallBack
 913              		.cfi_endproc
 914              	.LFE1092:
 916              		.section	.text.MCP_RegisterCallBack,"ax",%progbits
 917              		.align	1
 918              		.p2align 2,,3
 919              		.global	MCP_RegisterCallBack
 920              		.syntax unified
 921              		.thumb
 922              		.thumb_func
 924              	MCP_RegisterCallBack:
 925              	.LVL96:
 926              	.LFB1093:
 390:Src/mcp.c     **** 
 391:Src/mcp.c     **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 28


 392:Src/mcp.c     ****   * @brief  Stores user's MCP function to be later called as MCP function.
 393:Src/mcp.c     ****   *
 394:Src/mcp.c     ****   * @param  callBackID: ID used to get to the stored @p fctCB function
 395:Src/mcp.c     ****   * @param  fctCB: User call back function structure
 396:Src/mcp.c     ****   *
 397:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not
 398:Src/mcp.c     ****   */
 399:Src/mcp.c     **** uint8_t MCP_RegisterCallBack (uint8_t callBackID, MCP_user_cb_t fctCB)
 400:Src/mcp.c     **** {
 927              		.loc 1 400 1 is_stmt 1 view -0
 928              		.cfi_startproc
 929              		@ args = 0, pretend = 0, frame = 0
 930              		@ frame_needed = 0, uses_anonymous_args = 0
 931              		@ link register save eliminated.
 401:Src/mcp.c     ****   uint8_t result;
 932              		.loc 1 401 3 view .LVU309
 402:Src/mcp.c     **** 
 403:Src/mcp.c     ****   if (callBackID < MCP_USER_CALLBACK_MAX)
 933              		.loc 1 403 3 view .LVU310
 934              		.loc 1 403 6 is_stmt 0 view .LVU311
 935 0000 0128     		cmp	r0, #1
 404:Src/mcp.c     ****   {
 405:Src/mcp.c     ****     MCP_UserCallBack[callBackID] = fctCB;
 936              		.loc 1 405 5 is_stmt 1 view .LVU312
 400:Src/mcp.c     ****   uint8_t result;
 937              		.loc 1 400 1 is_stmt 0 view .LVU313
 938 0002 0346     		mov	r3, r0
 939              		.loc 1 405 34 view .LVU314
 940 0004 9DBF     		ittte	ls
 941 0006 034A     		ldrls	r2, .L80
 406:Src/mcp.c     ****     result = MCP_CMD_OK;
 942              		.loc 1 406 12 view .LVU315
 943 0008 0020     		movls	r0, #0
 944              	.LVL97:
 405:Src/mcp.c     ****     result = MCP_CMD_OK;
 945              		.loc 1 405 34 view .LVU316
 946 000a 42F82310 		strls	r1, [r2, r3, lsl #2]
 947              		.loc 1 406 5 is_stmt 1 view .LVU317
 948              	.LVL98:
 407:Src/mcp.c     ****   }
 408:Src/mcp.c     ****   else
 409:Src/mcp.c     ****   {
 410:Src/mcp.c     ****     result = MCP_CMD_NOK;
 949              		.loc 1 410 12 is_stmt 0 view .LVU318
 950 000e 0120     		movhi	r0, #1
 951              	.LVL99:
 411:Src/mcp.c     ****   }
 412:Src/mcp.c     ****   return (result);
 952              		.loc 1 412 3 is_stmt 1 view .LVU319
 413:Src/mcp.c     **** }
 953              		.loc 1 413 1 is_stmt 0 view .LVU320
 954 0010 7047     		bx	lr
 955              	.L81:
 956 0012 00BF     		.align	2
 957              	.L80:
 958 0014 00000000 		.word	MCP_UserCallBack
 959              		.cfi_endproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 29


 960              	.LFE1093:
 962              		.text
 963              	.Letext0:
 964              		.file 2 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 965              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 966              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 967              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 968              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 969              		.file 7 "Inc/mc_type.h"
 970              		.file 8 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 971              		.file 9 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 972              		.file 10 "Inc/pwm_curr_fdbk.h"
 973              		.file 11 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 974              		.file 12 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 975              		.file 13 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 976              		.file 14 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 977              		.file 15 "Inc/mc_interface.h"
 978              		.file 16 "Inc/mcp_config.h"
 979              		.file 17 "Inc/mc_api.h"
 980              		.file 18 "Inc/mc_config.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s 			page 30


DEFINED SYMBOLS
                            *ABS*:00000000 mcp.c
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:20     .text.RI_SetRegCommandParser:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:27     .text.RI_SetRegCommandParser:00000000 RI_SetRegCommandParser
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:275    .text.RI_SetRegCommandParser:000000d4 $d
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:281    .text.RI_GetRegCommandParser:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:288    .text.RI_GetRegCommandParser:00000000 RI_GetRegCommandParser
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:453    .text.RI_GetRegCommandParser:00000090 $d
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:459    .text.MCP_ReceivedPacket:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:466    .text.MCP_ReceivedPacket:00000000 MCP_ReceivedPacket
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:573    .text.MCP_ReceivedPacket:0000005a $d
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:911    .text.MCP_ReceivedPacket:00000194 $d
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:917    .text.MCP_RegisterCallBack:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:924    .text.MCP_RegisterCallBack:00000000 MCP_RegisterCallBack
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:958    .text.MCP_RegisterCallBack:00000014 $d
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:630    .text.MCP_ReceivedPacket:00000093 $d
C:\Users\ep_ygh\AppData\Local\Temp\cclQKINX.s:630    .text.MCP_ReceivedPacket:00000094 $t

UNDEFINED SYMBOLS
RI_SetRegisterGlobal
RI_SetRegisterMotor1
RI_GetRegisterGlobal
RI_GetRegisterMotor1
MCI_Clear_Iqdref
MCI_GetSTMState
MCI_StopMotor
MCI_StopRamp
MCI_FaultAcknowledged
MCI_StartWithPolarizationMotor
MC_ProfilerCommand
Mci
MCP_UserCallBack
