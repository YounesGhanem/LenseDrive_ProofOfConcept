ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mc_interface.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MCI_Init,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.weak	MCI_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MCI_Init:
  28              	.LVL0:
  29              	.LFB1090:
  30              		.file 1 "Src/mc_interface.c"
   1:Src/mc_interface.c **** 
   2:Src/mc_interface.c **** /**
   3:Src/mc_interface.c ****   ******************************************************************************
   4:Src/mc_interface.c ****   * @file    mc_interface.c
   5:Src/mc_interface.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_interface.c ****   * @brief   This file provides firmware functions that implement the features
   7:Src/mc_interface.c ****   *          of the MC Interface component of the Motor Control SDK:
   8:Src/mc_interface.c ****   *
   9:Src/mc_interface.c ****   ******************************************************************************
  10:Src/mc_interface.c ****   * @attention
  11:Src/mc_interface.c ****   *
  12:Src/mc_interface.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  13:Src/mc_interface.c ****   * All rights reserved.</center></h2>
  14:Src/mc_interface.c ****   *
  15:Src/mc_interface.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mc_interface.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mc_interface.c ****   * the License. You may obtain a copy of the License at:
  18:Src/mc_interface.c ****   *                             www.st.com/SLA0044
  19:Src/mc_interface.c ****   *
  20:Src/mc_interface.c ****   ******************************************************************************
  21:Src/mc_interface.c ****   * @ingroup MCInterface
  22:Src/mc_interface.c ****   */
  23:Src/mc_interface.c **** 
  24:Src/mc_interface.c **** /* Includes ------------------------------------------------------------------*/
  25:Src/mc_interface.c **** #include "mc_math.h"
  26:Src/mc_interface.c **** #include "speed_torq_ctrl.h"
  27:Src/mc_interface.c **** #include "mc_interface.h"
  28:Src/mc_interface.c **** #include "motorcontrol.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 2


  29:Src/mc_interface.c **** 
  30:Src/mc_interface.c **** #define ROUNDING_OFF
  31:Src/mc_interface.c **** 
  32:Src/mc_interface.c **** /** @addtogroup MCSDK
  33:Src/mc_interface.c ****   * @{
  34:Src/mc_interface.c ****   */
  35:Src/mc_interface.c **** 
  36:Src/mc_interface.c **** /** @addtogroup CAI
  37:Src/mc_interface.c ****   * @{
  38:Src/mc_interface.c ****   */
  39:Src/mc_interface.c **** 
  40:Src/mc_interface.c **** /** @defgroup MCInterface Motor Control Interface
  41:Src/mc_interface.c ****   * @brief MC Interface component of the Motor Control SDK
  42:Src/mc_interface.c ****   *
  43:Src/mc_interface.c ****   *  This interface allows for performing basic operations on the motor driven by a
  44:Src/mc_interface.c ****   *  Motor Control SDK based application. With it, motors can be started and stopped, speed or
  45:Src/mc_interface.c ****   *  torque ramps can be programmed and executed and information on the state of the motor can
  46:Src/mc_interface.c ****   *  be retrieved, among others.
  47:Src/mc_interface.c ****   *
  48:Src/mc_interface.c ****   *  These functions aims at being the main interface used by an application to control the motor.
  49:Src/mc_interface.c ****   *
  50:Src/mc_interface.c ****   * @{
  51:Src/mc_interface.c ****   */
  52:Src/mc_interface.c **** /* Private macros ------------------------------------------------------------*/
  53:Src/mc_interface.c **** 
  54:Src/mc_interface.c **** #define round(x) ((x)>=0?(int32_t)((x)+0.5):(int32_t)((x)-0.5))
  55:Src/mc_interface.c **** 
  56:Src/mc_interface.c **** /* Functions -----------------------------------------------*/
  57:Src/mc_interface.c **** 
  58:Src/mc_interface.c **** /**
  59:Src/mc_interface.c ****   * @brief  Initializes all the object variables, usually it has to be called
  60:Src/mc_interface.c ****   *         once right after object creation. It is also used to assign the
  61:Src/mc_interface.c ****   *         state machine object, the speed and torque controller, and the FOC
  62:Src/mc_interface.c ****   *         drive object to be used by MC Interface.
  63:Src/mc_interface.c ****   * @param  pHandle pointer on the component instance to initialize.
  64:Src/mc_interface.c ****   * @param  pSTC the speed and torque controller used by the MCI.
  65:Src/mc_interface.c ****   * @param  pFOCVars pointer to FOC vars to be used by MCI.
  66:Src/mc_interface.c ****   * @param  pPosCtrl pointer to the position controller to be used by the MCI
  67:Src/mc_interface.c ****   *         (only present if position control is enabled)
  68:Src/mc_interface.c ****   * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  69:Src/mc_interface.c ****   */
  70:Src/mc_interface.c **** __weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, pFOCVars_t pFOCVars,
  71:Src/mc_interface.c ****                      PWMC_Handle_t *pPWMHandle )
  72:Src/mc_interface.c **** {
  31              		.loc 1 72 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  73:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  74:Src/mc_interface.c ****   if (MC_NULL == pHandle)
  75:Src/mc_interface.c ****   {
  76:Src/mc_interface.c ****     /* Nothing to do */
  77:Src/mc_interface.c ****   }
  78:Src/mc_interface.c ****   else
  79:Src/mc_interface.c ****   {
  80:Src/mc_interface.c **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 3


  81:Src/mc_interface.c ****     pHandle->pSTC = pSTC;
  36              		.loc 1 81 5 view .LVU1
  72:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  37              		.loc 1 72 1 is_stmt 0 view .LVU2
  38 0000 10B4     		push	{r4}
  39              	.LCFI0:
  40              		.cfi_def_cfa_offset 4
  41              		.cfi_offset 4, -4
  82:Src/mc_interface.c ****     pHandle->pFOCVars = pFOCVars;
  83:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  84:Src/mc_interface.c **** 
  85:Src/mc_interface.c ****     /* Buffer related initialization */
  86:Src/mc_interface.c ****     pHandle->lastCommand = MCI_NOCOMMANDSYET;
  42              		.loc 1 86 26 view .LVU3
  43 0002 0024     		movs	r4, #0
  87:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  88:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  89:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  90:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  91:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  92:Src/mc_interface.c ****     pHandle->State = IDLE;
  93:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  44              		.loc 1 93 28 view .LVU4
  45 0004 C0E90844 		strd	r4, r4, [r0, #32]
  86:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  46              		.loc 1 86 26 view .LVU5
  47 0008 0474     		strb	r4, [r0, #16]
  87:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  48              		.loc 1 87 26 view .LVU6
  49 000a C0F81240 		str	r4, [r0, #18]	@ unaligned
  90:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  50              		.loc 1 90 27 view .LVU7
  51 000e 80F82840 		strb	r4, [r0, #40]
  82:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  52              		.loc 1 82 23 view .LVU8
  53 0012 C0E90012 		strd	r1, r2, [r0]
  83:Src/mc_interface.c **** 
  54              		.loc 1 83 5 is_stmt 1 view .LVU9
  94:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
  95:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  96:Src/mc_interface.c ****   }
  97:Src/mc_interface.c **** #endif
  98:Src/mc_interface.c **** }
  55              		.loc 1 98 1 is_stmt 0 view .LVU10
  56 0016 5DF8044B 		ldr	r4, [sp], #4
  57              	.LCFI1:
  58              		.cfi_restore 4
  59              		.cfi_def_cfa_offset 0
  83:Src/mc_interface.c **** 
  60              		.loc 1 83 19 view .LVU11
  61 001a 8360     		str	r3, [r0, #8]
  86:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  62              		.loc 1 86 5 is_stmt 1 view .LVU12
  87:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  63              		.loc 1 87 5 view .LVU13
  88:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  64              		.loc 1 88 5 view .LVU14
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 4


  89:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  65              		.loc 1 89 5 view .LVU15
  90:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  66              		.loc 1 90 5 view .LVU16
  91:Src/mc_interface.c ****     pHandle->State = IDLE;
  67              		.loc 1 91 5 view .LVU17
  92:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  68              		.loc 1 92 5 view .LVU18
  93:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
  69              		.loc 1 93 5 view .LVU19
  94:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  70              		.loc 1 94 5 view .LVU20
  71              		.loc 1 98 1 is_stmt 0 view .LVU21
  72 001c 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE1090:
  76 001e 00BF     		.section	.text.MCI_ExecSpeedRamp,"ax",%progbits
  77              		.align	1
  78              		.p2align 2,,3
  79              		.weak	MCI_ExecSpeedRamp
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	MCI_ExecSpeedRamp:
  85              	.LVL1:
  86              	.LFB1091:
  99:Src/mc_interface.c **** 
 100:Src/mc_interface.c **** /**
 101:Src/mc_interface.c ****   * @brief  Programs a motor speed ramp
 102:Src/mc_interface.c ****   *
 103:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 104:Src/mc_interface.c ****   * @param  hFinalSpeed The value of mechanical rotor speed reference at the
 105:Src/mc_interface.c ****   *         end of the ramp expressed in the unit defined by #SPEED_UNIT.
 106:Src/mc_interface.c ****   * @param  hDurationms The duration of the ramp expressed in milliseconds. It
 107:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 108:Src/mc_interface.c ****   *         value.
 109:Src/mc_interface.c ****   *
 110:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 111:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 112:Src/mc_interface.c ****   * state is reached.
 113:Src/mc_interface.c ****   *
 114:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 115:Src/mc_interface.c ****   * function.
 116:Src/mc_interface.c ****   *
 117:Src/mc_interface.c ****   * @sa MCI_ExecSpeedRamp_F
 118:Src/mc_interface.c ****   */
 119:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle, int16_t hFinalSpeed, uint16_t hDurationms)
 120:Src/mc_interface.c **** {
  87              		.loc 1 120 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 121:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 122:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 123:Src/mc_interface.c ****   {
 124:Src/mc_interface.c ****     /* Nothing to do */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 5


 125:Src/mc_interface.c ****   }
 126:Src/mc_interface.c ****   else
 127:Src/mc_interface.c ****   {
 128:Src/mc_interface.c **** #endif
 129:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
  92              		.loc 1 129 5 view .LVU23
  93              		.loc 1 129 26 is_stmt 0 view .LVU24
  94 0000 0123     		movs	r3, #1
  95 0002 0374     		strb	r3, [r0, #16]
 130:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  96              		.loc 1 130 5 is_stmt 1 view .LVU25
  97              		.loc 1 130 26 is_stmt 0 view .LVU26
  98 0004 4182     		strh	r1, [r0, #18]	@ movhi
 131:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
  99              		.loc 1 131 5 is_stmt 1 view .LVU27
 100              		.loc 1 131 26 is_stmt 0 view .LVU28
 101 0006 0284     		strh	r2, [r0, #32]	@ movhi
 132:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 102              		.loc 1 132 5 is_stmt 1 view .LVU29
 103              		.loc 1 132 27 is_stmt 0 view .LVU30
 104 0008 80F82830 		strb	r3, [r0, #40]
 133:Src/mc_interface.c **** 
 134:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 135:Src/mc_interface.c ****   }
 136:Src/mc_interface.c **** #endif
 137:Src/mc_interface.c **** }
 105              		.loc 1 137 1 view .LVU31
 106 000c 7047     		bx	lr
 107              		.cfi_endproc
 108              	.LFE1091:
 110 000e 00BF     		.section	.text.MCI_ExecSpeedRamp_F,"ax",%progbits
 111              		.align	1
 112              		.p2align 2,,3
 113              		.weak	MCI_ExecSpeedRamp_F
 114              		.syntax unified
 115              		.thumb
 116              		.thumb_func
 118              	MCI_ExecSpeedRamp_F:
 119              	.LVL2:
 120              	.LFB1092:
 138:Src/mc_interface.c **** 
 139:Src/mc_interface.c **** /**
 140:Src/mc_interface.c ****   * @brief  Programs a motor speed ramp
 141:Src/mc_interface.c ****   *
 142:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 143:Src/mc_interface.c ****   * @param  FinalSpeed is the value of mechanical rotor speed reference at the
 144:Src/mc_interface.c ****   *         end of the ramp expressed in RPM.
 145:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 146:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 147:Src/mc_interface.c ****   *         value.
 148:Src/mc_interface.c ****   *
 149:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 150:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 151:Src/mc_interface.c ****   * state is reached.
 152:Src/mc_interface.c ****   *
 153:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 154:Src/mc_interface.c ****   * function.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 6


 155:Src/mc_interface.c ****   *
 156:Src/mc_interface.c ****   * @sa MCI_ExecSpeedRamp
 157:Src/mc_interface.c ****   */
 158:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp_F(MCI_Handle_t *pHandle, const float_t FinalSpeed, uint16_t hDuration
 159:Src/mc_interface.c **** {
 121              		.loc 1 159 1 is_stmt 1 view -0
 122              		.cfi_startproc
 123              		@ args = 0, pretend = 0, frame = 0
 124              		@ frame_needed = 0, uses_anonymous_args = 0
 160:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 161:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 162:Src/mc_interface.c ****   {
 163:Src/mc_interface.c ****     /* Nothing to do */
 164:Src/mc_interface.c ****   }
 165:Src/mc_interface.c ****   else
 166:Src/mc_interface.c ****   {
 167:Src/mc_interface.c **** #endif
 168:Src/mc_interface.c ****     int16_t hFinalSpeed = (((int16_t)FinalSpeed * (int16_t)SPEED_UNIT) / (int16_t)U_RPM);
 125              		.loc 1 168 5 view .LVU33
 169:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 126              		.loc 1 169 5 view .LVU34
 168:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 127              		.loc 1 168 29 is_stmt 0 view .LVU35
 128 0000 BDEEC00A 		vcvt.s32.f32	s0, s0
 129              	.LVL3:
 159:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 130              		.loc 1 159 1 view .LVU36
 131 0004 10B5     		push	{r4, lr}
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 4, -8
 135              		.cfi_offset 14, -4
 168:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 136              		.loc 1 168 13 view .LVU37
 137 0006 10EE103A 		vmov	r3, s0	@ int
 138 000a 054C     		ldr	r4, .L7
 139 000c 1BB2     		sxth	r3, r3
 159:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 140              		.loc 1 159 1 view .LVU38
 141 000e 0A46     		mov	r2, r1
 168:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 142              		.loc 1 168 13 view .LVU39
 143 0010 84FB0314 		smull	r1, r4, r4, r3
 144              	.LVL4:
 168:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 145              		.loc 1 168 13 view .LVU40
 146 0014 A4EBE373 		sub	r3, r4, r3, asr #31
 147              		.loc 1 169 5 view .LVU41
 148 0018 19B2     		sxth	r1, r3
 149 001a FFF7FEFF 		bl	MCI_ExecSpeedRamp
 150              	.LVL5:
 170:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 171:Src/mc_interface.c ****   }
 172:Src/mc_interface.c **** #endif
 173:Src/mc_interface.c **** }
 151              		.loc 1 173 1 view .LVU42
 152 001e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 7


 153              	.L8:
 154              		.align	2
 155              	.L7:
 156 0020 ABAAAA2A 		.word	715827883
 157              		.cfi_endproc
 158              	.LFE1092:
 160              		.section	.text.MCI_ExecTorqueRamp,"ax",%progbits
 161              		.align	1
 162              		.p2align 2,,3
 163              		.weak	MCI_ExecTorqueRamp
 164              		.syntax unified
 165              		.thumb
 166              		.thumb_func
 168              	MCI_ExecTorqueRamp:
 169              	.LVL6:
 170              	.LFB1093:
 174:Src/mc_interface.c **** 
 175:Src/mc_interface.c **** /**
 176:Src/mc_interface.c ****   * @brief  Programs a motor torque ramp
 177:Src/mc_interface.c ****   *
 178:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 179:Src/mc_interface.c ****   * @param  hFinalTorque is the value of motor torque reference at the end of
 180:Src/mc_interface.c ****   *         the ramp. This value represents actually the $I_q$ current expressed in
 181:Src/mc_interface.c ****   *         digit.
 182:Src/mc_interface.c ****   *         To convert current expressed in Amps to current expressed in digit
 183:Src/mc_interface.c ****   *         is possible to use the formula:
 184:Src/mc_interface.c ****   *         Current (digit) = [Current(Amp) * 65536 * Rshunt * Aop] / Vdd micro.
 185:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 186:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 187:Src/mc_interface.c ****   *         value.
 188:Src/mc_interface.c ****   *
 189:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 190:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 191:Src/mc_interface.c ****   * state is reached.
 192:Src/mc_interface.c ****   *
 193:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 194:Src/mc_interface.c ****   * function.
 195:Src/mc_interface.c ****   *
 196:Src/mc_interface.c ****   * @sa MCI_ExecTorqueRamp_F
 197:Src/mc_interface.c ****   */
 198:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle, int16_t hFinalTorque, uint16_t hDurationms)
 199:Src/mc_interface.c **** {
 171              		.loc 1 199 1 is_stmt 1 view -0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 0
 174              		@ frame_needed = 0, uses_anonymous_args = 0
 175              		@ link register save eliminated.
 200:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 201:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 202:Src/mc_interface.c ****   {
 203:Src/mc_interface.c ****     /* Nothing to do */
 204:Src/mc_interface.c ****   }
 205:Src/mc_interface.c ****   else
 206:Src/mc_interface.c ****   {
 207:Src/mc_interface.c **** #endif
 208:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 176              		.loc 1 208 5 view .LVU44
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 8


 177              		.loc 1 208 26 is_stmt 0 view .LVU45
 178 0000 4FF0020C 		mov	ip, #2
 209:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 210:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 211:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 179              		.loc 1 211 27 view .LVU46
 180 0004 40F20143 		movw	r3, #1025
 208:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 181              		.loc 1 208 26 view .LVU47
 182 0008 80F810C0 		strb	ip, [r0, #16]
 209:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 183              		.loc 1 209 5 is_stmt 1 view .LVU48
 209:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 184              		.loc 1 209 27 is_stmt 0 view .LVU49
 185 000c 8182     		strh	r1, [r0, #20]	@ movhi
 210:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 186              		.loc 1 210 5 is_stmt 1 view .LVU50
 210:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 187              		.loc 1 210 26 is_stmt 0 view .LVU51
 188 000e 0284     		strh	r2, [r0, #32]	@ movhi
 189              		.loc 1 211 5 is_stmt 1 view .LVU52
 212:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 190              		.loc 1 212 5 view .LVU53
 211:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 191              		.loc 1 211 27 is_stmt 0 view .LVU54
 192 0010 0385     		strh	r3, [r0, #40]	@ movhi
 213:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 214:Src/mc_interface.c ****   }
 215:Src/mc_interface.c **** #endif
 216:Src/mc_interface.c **** }
 193              		.loc 1 216 1 view .LVU55
 194 0012 7047     		bx	lr
 195              		.cfi_endproc
 196              	.LFE1093:
 198              		.section	.text.MCI_ExecTorqueRamp_F,"ax",%progbits
 199              		.align	1
 200              		.p2align 2,,3
 201              		.weak	MCI_ExecTorqueRamp_F
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 206              	MCI_ExecTorqueRamp_F:
 207              	.LVL7:
 208              	.LFB1094:
 217:Src/mc_interface.c **** 
 218:Src/mc_interface.c **** /**
 219:Src/mc_interface.c ****   * @brief  Programs a motor torque ramp
 220:Src/mc_interface.c ****   *
 221:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 222:Src/mc_interface.c ****   * @param  FinalTorque is the value of motor torque reference at the end of
 223:Src/mc_interface.c ****   *         the ramp. This value represents actually the $I_q$ current expressed in
 224:Src/mc_interface.c ****   *         Ampere.
 225:Src/mc_interface.c ****   *         Here the formula for conversion from current in Ampere to digit:
 226:Src/mc_interface.c ****   *           I(s16) = [i(Amp) * 65536 * Rshunt * Aop] / Vdd_micro.
 227:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 228:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 229:Src/mc_interface.c ****   *         value.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 9


 230:Src/mc_interface.c ****   *
 231:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 232:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 233:Src/mc_interface.c ****   * state is reached.
 234:Src/mc_interface.c ****   *
 235:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 236:Src/mc_interface.c ****   * function.
 237:Src/mc_interface.c ****   *
 238:Src/mc_interface.c ****   * @sa MCI_ExecTorqueRamp
 239:Src/mc_interface.c ****   */
 240:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp_F(MCI_Handle_t *pHandle, const float_t FinalTorque, uint16_t hDurati
 241:Src/mc_interface.c **** {
 209              		.loc 1 241 1 is_stmt 1 view -0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 242:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 243:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 244:Src/mc_interface.c ****   {
 245:Src/mc_interface.c ****     /* Nothing to do */
 246:Src/mc_interface.c ****   }
 247:Src/mc_interface.c ****   else
 248:Src/mc_interface.c ****   {
 249:Src/mc_interface.c **** #endif
 250:Src/mc_interface.c ****     int16_t hFinalTorque = ((int16_t)FinalTorque * (int16_t)CURRENT_CONV_FACTOR);
 213              		.loc 1 250 5 view .LVU57
 251:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 214              		.loc 1 251 5 view .LVU58
 250:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 215              		.loc 1 250 29 is_stmt 0 view .LVU59
 216 0000 FDEEC07A 		vcvt.s32.f32	s15, s0
 241:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 217              		.loc 1 241 1 view .LVU60
 218 0004 08B5     		push	{r3, lr}
 219              	.LCFI3:
 220              		.cfi_def_cfa_offset 8
 221              		.cfi_offset 3, -8
 222              		.cfi_offset 14, -4
 250:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 223              		.loc 1 250 29 view .LVU61
 224 0006 17EE903A 		vmov	r3, s15	@ int
 241:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 225              		.loc 1 241 1 view .LVU62
 226 000a 0A46     		mov	r2, r1
 250:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 227              		.loc 1 250 50 view .LVU63
 228 000c 03EBC301 		add	r1, r3, r3, lsl #3
 229              	.LVL8:
 250:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 230              		.loc 1 250 50 view .LVU64
 231 0010 C1EB4111 		rsb	r1, r1, r1, lsl #5
 232 0014 C3EB4101 		rsb	r1, r3, r1, lsl #1
 233 0018 01EBC101 		add	r1, r1, r1, lsl #3
 234 001c 03EB4101 		add	r1, r3, r1, lsl #1
 235              		.loc 1 251 5 view .LVU65
 236 0020 09B2     		sxth	r1, r1
 237 0022 FFF7FEFF 		bl	MCI_ExecTorqueRamp
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 10


 238              	.LVL9:
 252:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 253:Src/mc_interface.c ****   }
 254:Src/mc_interface.c **** #endif
 255:Src/mc_interface.c **** }
 239              		.loc 1 255 1 view .LVU66
 240 0026 08BD     		pop	{r3, pc}
 241              		.cfi_endproc
 242              	.LFE1094:
 244              		.section	.text.MCI_SetSpeedMode,"ax",%progbits
 245              		.align	1
 246              		.p2align 2,,3
 247              		.weak	MCI_SetSpeedMode
 248              		.syntax unified
 249              		.thumb
 250              		.thumb_func
 252              	MCI_SetSpeedMode:
 253              	.LVL10:
 254              	.LFB1097:
 256:Src/mc_interface.c **** 
 257:Src/mc_interface.c **** /**
 258:Src/mc_interface.c ****   * @brief  Sets the motor current references $I_q$ and $I_d$ directly.
 259:Src/mc_interface.c ****   *
 260:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 261:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t format.
 262:Src/mc_interface.c ****   *
 263:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 264:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 265:Src/mc_interface.c ****   * state is reached.
 266:Src/mc_interface.c ****   *
 267:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 268:Src/mc_interface.c ****   * function.
 269:Src/mc_interface.c **** 
 270:Src/mc_interface.c ****   @sa MCI_SetCurrentReferences_F
 271:Src/mc_interface.c ****   */
 272:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
 273:Src/mc_interface.c **** {
 274:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 275:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 276:Src/mc_interface.c ****   {
 277:Src/mc_interface.c ****     /* Nothing to do */
 278:Src/mc_interface.c ****   }
 279:Src/mc_interface.c ****   else
 280:Src/mc_interface.c ****   {
 281:Src/mc_interface.c **** #endif
 282:Src/mc_interface.c **** 
 283:Src/mc_interface.c ****     MC_ControlMode_t mode;
 284:Src/mc_interface.c ****     mode = MCI_GetControlMode( pHandle );
 285:Src/mc_interface.c ****     if (mode == MCM_OPEN_LOOP_CURRENT_MODE)
 286:Src/mc_interface.c ****     {
 287:Src/mc_interface.c ****       pHandle->Iqdref.q = Iqdref.q;
 288:Src/mc_interface.c ****       pHandle->Iqdref.d = Iqdref.d;
 289:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 290:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.d = Iqdref.d;
 291:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = mode;
 292:Src/mc_interface.c ****     }
 293:Src/mc_interface.c ****     else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 11


 294:Src/mc_interface.c ****     {
 295:Src/mc_interface.c ****       pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 296:Src/mc_interface.c ****       pHandle->Iqdref.q = Iqdref.q;
 297:Src/mc_interface.c ****       pHandle->Iqdref.d = Iqdref.d;
 298:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 299:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 300:Src/mc_interface.c ****     }
 301:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 302:Src/mc_interface.c ****   }
 303:Src/mc_interface.c **** #endif
 304:Src/mc_interface.c **** }
 305:Src/mc_interface.c **** 
 306:Src/mc_interface.c **** /**
 307:Src/mc_interface.c ****   * @brief  Sets the motor current references $I_q$ and $I_d$ directly.
 308:Src/mc_interface.c ****   *
 309:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 310:Src/mc_interface.c ****   * @param  IqdRef current (A) references on qd reference frame in qd_f_t format.
 311:Src/mc_interface.c ****   *
 312:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 313:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 314:Src/mc_interface.c ****   * state is reached.
 315:Src/mc_interface.c ****   *
 316:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 317:Src/mc_interface.c ****   * function.
 318:Src/mc_interface.c **** 
 319:Src/mc_interface.c ****   @sa MCI_SetCurrentReferences
 320:Src/mc_interface.c ****   */
 321:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences_F(MCI_Handle_t *pHandle, qd_f_t IqdRef)
 322:Src/mc_interface.c **** {
 323:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 324:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 325:Src/mc_interface.c ****   {
 326:Src/mc_interface.c ****     /* Nothing to do */
 327:Src/mc_interface.c ****   }
 328:Src/mc_interface.c ****   else
 329:Src/mc_interface.c ****   {
 330:Src/mc_interface.c **** #endif
 331:Src/mc_interface.c ****     qd_t iqDrefTemp;
 332:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 333:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 334:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 335:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 336:Src/mc_interface.c ****   }
 337:Src/mc_interface.c **** #endif
 338:Src/mc_interface.c **** }
 339:Src/mc_interface.c **** /**
 340:Src/mc_interface.c ****   * @brief  Sets the target motor's control mode to Speed mode.
 341:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 342:Src/mc_interface.c ****   *
 343:Src/mc_interface.c ****   * @note This function is only available when the Open loop Debug feature is
 344:Src/mc_interface.c ****   * enabled at firmware generation time.
 345:Src/mc_interface.c ****   */
 346:Src/mc_interface.c **** __weak void MCI_SetSpeedMode(MCI_Handle_t *pHandle)
 347:Src/mc_interface.c **** {
 255              		.loc 1 347 1 is_stmt 1 view -0
 256              		.cfi_startproc
 257              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 12


 258              		@ frame_needed = 0, uses_anonymous_args = 0
 348:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 349:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 350:Src/mc_interface.c ****   {
 351:Src/mc_interface.c ****     /* Nothing to do */
 352:Src/mc_interface.c ****   }
 353:Src/mc_interface.c ****   else
 354:Src/mc_interface.c ****   {
 355:Src/mc_interface.c **** #endif
 356:Src/mc_interface.c ****     pHandle->pFOCVars->bDriveInput = INTERNAL;
 259              		.loc 1 356 5 view .LVU68
 260              		.loc 1 356 36 is_stmt 0 view .LVU69
 261 0000 4368     		ldr	r3, [r0, #4]
 347:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 262              		.loc 1 347 1 view .LVU70
 263 0002 10B5     		push	{r4, lr}
 264              	.LCFI4:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 4, -8
 267              		.cfi_offset 14, -4
 268              		.loc 1 356 36 view .LVU71
 269 0004 0022     		movs	r2, #0
 270 0006 83F82420 		strb	r2, [r3, #36]
 357:Src/mc_interface.c ****     STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 271              		.loc 1 357 5 is_stmt 1 view .LVU72
 347:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 272              		.loc 1 347 1 is_stmt 0 view .LVU73
 273 000a 0446     		mov	r4, r0
 274              		.loc 1 357 5 view .LVU74
 275 000c 0321     		movs	r1, #3
 276 000e 0068     		ldr	r0, [r0]
 277              	.LVL11:
 278              		.loc 1 357 5 view .LVU75
 279 0010 FFF7FEFF 		bl	STC_SetControlMode
 280              	.LVL12:
 358:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 281              		.loc 1 358 5 is_stmt 1 view .LVU76
 282              		.loc 1 358 36 is_stmt 0 view .LVU77
 283 0014 0323     		movs	r3, #3
 284 0016 84F82930 		strb	r3, [r4, #41]
 359:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 360:Src/mc_interface.c ****   }
 361:Src/mc_interface.c **** #endif
 362:Src/mc_interface.c **** }
 285              		.loc 1 362 1 view .LVU78
 286 001a 10BD     		pop	{r4, pc}
 287              		.loc 1 362 1 view .LVU79
 288              		.cfi_endproc
 289              	.LFE1097:
 291              		.section	.text.MCI_SetOpenLoopCurrent,"ax",%progbits
 292              		.align	1
 293              		.p2align 2,,3
 294              		.weak	MCI_SetOpenLoopCurrent
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 299              	MCI_SetOpenLoopCurrent:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 13


 300              	.LVL13:
 301              	.LFB1098:
 363:Src/mc_interface.c **** 
 364:Src/mc_interface.c **** /**
 365:Src/mc_interface.c ****   * @brief  Sets the target motor's control mode to Open loop Current mode.
 366:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 367:Src/mc_interface.c ****   *
 368:Src/mc_interface.c ****   * @note This function is only available when the Open loop Debug feature is
 369:Src/mc_interface.c ****   * enabled at firmware generation time.
 370:Src/mc_interface.c ****   */
 371:Src/mc_interface.c **** __weak void MCI_SetOpenLoopCurrent(MCI_Handle_t *pHandle)
 372:Src/mc_interface.c **** {
 302              		.loc 1 372 1 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 373:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 306              		.loc 1 373 3 view .LVU81
 307              		.loc 1 373 34 is_stmt 0 view .LVU82
 308 0000 4368     		ldr	r3, [r0, #4]
 372:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 309              		.loc 1 372 1 view .LVU83
 310 0002 10B5     		push	{r4, lr}
 311              	.LCFI5:
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 4, -8
 314              		.cfi_offset 14, -4
 315              		.loc 1 373 34 view .LVU84
 316 0004 0122     		movs	r2, #1
 317 0006 83F82420 		strb	r2, [r3, #36]
 374:Src/mc_interface.c ****   STC_SetControlMode(pHandle->pSTC, MCM_OPEN_LOOP_CURRENT_MODE);
 318              		.loc 1 374 3 is_stmt 1 view .LVU85
 372:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 319              		.loc 1 372 1 is_stmt 0 view .LVU86
 320 000a 0446     		mov	r4, r0
 321              		.loc 1 374 3 view .LVU87
 322 000c 0221     		movs	r1, #2
 323 000e 0068     		ldr	r0, [r0]
 324              	.LVL14:
 325              		.loc 1 374 3 view .LVU88
 326 0010 FFF7FEFF 		bl	STC_SetControlMode
 327              	.LVL15:
 375:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_CURRENT_MODE;
 328              		.loc 1 375 3 is_stmt 1 view .LVU89
 329              		.loc 1 375 34 is_stmt 0 view .LVU90
 330 0014 0223     		movs	r3, #2
 331 0016 84F82930 		strb	r3, [r4, #41]
 376:Src/mc_interface.c **** }
 332              		.loc 1 376 1 view .LVU91
 333 001a 10BD     		pop	{r4, pc}
 334              		.loc 1 376 1 view .LVU92
 335              		.cfi_endproc
 336              	.LFE1098:
 338              		.section	.text.MCI_SetOpenLoopVoltage,"ax",%progbits
 339              		.align	1
 340              		.p2align 2,,3
 341              		.weak	MCI_SetOpenLoopVoltage
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 14


 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 346              	MCI_SetOpenLoopVoltage:
 347              	.LVL16:
 348              	.LFB1099:
 377:Src/mc_interface.c **** 
 378:Src/mc_interface.c **** /**
 379:Src/mc_interface.c ****   * @brief  Sets the target motor's control mode to Open loop Voltage mode.
 380:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 381:Src/mc_interface.c ****   *
 382:Src/mc_interface.c ****   * @note This function is only available when the Open loop Debug feature is
 383:Src/mc_interface.c ****   * enabled at firm
 384:Src/mc_interface.c ****   */
 385:Src/mc_interface.c **** __weak void MCI_SetOpenLoopVoltage(MCI_Handle_t *pHandle)
 386:Src/mc_interface.c **** {
 349              		.loc 1 386 1 is_stmt 1 view -0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 387:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 353              		.loc 1 387 3 view .LVU94
 386:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 354              		.loc 1 386 1 is_stmt 0 view .LVU95
 355 0000 38B5     		push	{r3, r4, r5, lr}
 356              	.LCFI6:
 357              		.cfi_def_cfa_offset 16
 358              		.cfi_offset 3, -16
 359              		.cfi_offset 4, -12
 360              		.cfi_offset 5, -8
 361              		.cfi_offset 14, -4
 362              		.loc 1 387 34 view .LVU96
 363 0002 4368     		ldr	r3, [r0, #4]
 364 0004 0125     		movs	r5, #1
 386:Src/mc_interface.c ****   pHandle->pFOCVars->bDriveInput = EXTERNAL;
 365              		.loc 1 386 1 view .LVU97
 366 0006 0446     		mov	r4, r0
 367              		.loc 1 387 34 view .LVU98
 368 0008 83F82450 		strb	r5, [r3, #36]
 388:Src/mc_interface.c ****   STC_SetControlMode(pHandle->pSTC, MCM_OPEN_LOOP_VOLTAGE_MODE);
 369              		.loc 1 388 3 is_stmt 1 view .LVU99
 370 000c 0068     		ldr	r0, [r0]
 371              	.LVL17:
 372              		.loc 1 388 3 is_stmt 0 view .LVU100
 373 000e 2946     		mov	r1, r5
 374 0010 FFF7FEFF 		bl	STC_SetControlMode
 375              	.LVL18:
 389:Src/mc_interface.c ****   pHandle->LastModalitySetByUser = MCM_OPEN_LOOP_VOLTAGE_MODE;
 376              		.loc 1 389 3 is_stmt 1 view .LVU101
 377              		.loc 1 389 34 is_stmt 0 view .LVU102
 378 0014 84F82950 		strb	r5, [r4, #41]
 390:Src/mc_interface.c **** }
 379              		.loc 1 390 1 view .LVU103
 380 0018 38BD     		pop	{r3, r4, r5, pc}
 381              		.loc 1 390 1 view .LVU104
 382              		.cfi_endproc
 383              	.LFE1099:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 15


 385 001a 00BF     		.section	.text.MCI_GetCalibratedOffsetsMotor,"ax",%progbits
 386              		.align	1
 387              		.p2align 2,,3
 388              		.weak	MCI_GetCalibratedOffsetsMotor
 389              		.syntax unified
 390              		.thumb
 391              		.thumb_func
 393              	MCI_GetCalibratedOffsetsMotor:
 394              	.LVL19:
 395              	.LFB1103:
 391:Src/mc_interface.c **** 
 392:Src/mc_interface.c **** /**
 393:Src/mc_interface.c ****   * @brief  Initiates a motor startup procedure
 394:Src/mc_interface.c ****   *
 395:Src/mc_interface.c ****   * @param  pHandle Handle on the target motor interface structure
 396:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed;
 397:Src/mc_interface.c ****   *         returns false otherwise
 398:Src/mc_interface.c ****   *
 399:Src/mc_interface.c ****   *  If the state machine of target the motor is in #IDLE state the command is
 400:Src/mc_interface.c ****   * executed instantaneously otherwise it is discarded. Users can check
 401:Src/mc_interface.c ****   * the return value of the function to get its status. The state of the motor
 402:Src/mc_interface.c ****   * can be queried with the MCI_GetSTMState() function.
 403:Src/mc_interface.c ****   *
 404:Src/mc_interface.c ****   * Before calling MCI_StartMotor() it is mandatory to execute one of the
 405:Src/mc_interface.c ****   * following commands, in order to set a torque or a speed reference
 406:Src/mc_interface.c ****   * otherwise the behavior of the motor when it reaches the #RUN state will
 407:Src/mc_interface.c ****   * be unpredictable:
 408:Src/mc_interface.c ****   *  - MCI_ExecSpeedRamp
 409:Src/mc_interface.c ****   *  - MCI_ExecTorqueRamp
 410:Src/mc_interface.c ****   *  - MCI_SetCurrentReferences
 411:Src/mc_interface.c ****   *
 412:Src/mc_interface.c ****   * If the offsets of the current measurement circuitry offsets are not known yet,
 413:Src/mc_interface.c ****   * an offset calibration procedure is executed to measure them prior to acutally
 414:Src/mc_interface.c ****   * starting up the motor.
 415:Src/mc_interface.c ****   *
 416:Src/mc_interface.c ****   * @note The MCI_StartMotor command only triggers the execution of the start-up
 417:Src/mc_interface.c ****   * procedure (or eventually the offset calibration procedure) and returns
 418:Src/mc_interface.c ****   * immediately after. It is not blocking the execution of the application until
 419:Src/mc_interface.c ****   * the motor is indeed running in steady state. If the application needs to wait
 420:Src/mc_interface.c ****   * for the motor to be running in steady state, the application has to check the
 421:Src/mc_interface.c ****   * state machine of the motor and verify that the #RUN state has been reached.
 422:Src/mc_interface.c ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
 423:Src/mc_interface.c ****   */
 424:Src/mc_interface.c **** __weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
 425:Src/mc_interface.c **** {
 426:Src/mc_interface.c ****   bool retVal = false;
 427:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 428:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 429:Src/mc_interface.c ****   {
 430:Src/mc_interface.c ****     /* Nothing to do */
 431:Src/mc_interface.c ****   }
 432:Src/mc_interface.c ****   else
 433:Src/mc_interface.c ****   {
 434:Src/mc_interface.c **** #endif
 435:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 436:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 437:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 16


 438:Src/mc_interface.c ****     {
 439:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_START;
 440:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 441:Src/mc_interface.c ****       retVal = true;
 442:Src/mc_interface.c ****     }
 443:Src/mc_interface.c ****     else
 444:Src/mc_interface.c ****     {
 445:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 446:Src/mc_interface.c ****     }
 447:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 448:Src/mc_interface.c ****   }
 449:Src/mc_interface.c **** #endif
 450:Src/mc_interface.c ****   return (retVal);
 451:Src/mc_interface.c **** }
 452:Src/mc_interface.c **** 
 453:Src/mc_interface.c **** /**
 454:Src/mc_interface.c ****   * @brief  Initiates a motor startup procedure preceded by an offset
 455:Src/mc_interface.c ****   *         calibration procedure
 456:Src/mc_interface.c ****   *
 457:Src/mc_interface.c ****   * @param  pHandle Handle on the target motor interface structure
 458:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed;
 459:Src/mc_interface.c ****   *         returns false otherwise
 460:Src/mc_interface.c ****   *
 461:Src/mc_interface.c ****   *  If the state machine of target the motor is in #IDLE state the command is
 462:Src/mc_interface.c ****   * executed instantaneously otherwise it is discarded. Users can check
 463:Src/mc_interface.c ****   * the return value of the function to get its status. The state of the motor
 464:Src/mc_interface.c ****   * can be queried with the MCI_GetSTMState() function.
 465:Src/mc_interface.c ****   *
 466:Src/mc_interface.c ****   * Before calling MCI_StartMotor() it is mandatory to execute one of the
 467:Src/mc_interface.c ****   * following commands, in order to set a torque or a speed reference
 468:Src/mc_interface.c ****   * otherwise the behavior of the motor when it reaches the #RUN state will
 469:Src/mc_interface.c ****   * be unpredictable:
 470:Src/mc_interface.c ****   *  - MCI_ExecSpeedRamp
 471:Src/mc_interface.c ****   *  - MCI_ExecTorqueRamp
 472:Src/mc_interface.c ****   *  - MCI_SetCurrentReferences
 473:Src/mc_interface.c ****   *
 474:Src/mc_interface.c ****   * Whether the current measurement circuitry offsets are known or not, an
 475:Src/mc_interface.c ****   * offset calibration procedure is executed to (re)measure them. Once it has
 476:Src/mc_interface.c ****   * completed, the start up procedure of the motor is executed.
 477:Src/mc_interface.c ****   *
 478:Src/mc_interface.c ****   * @note The MCI_StartMotor command only triggers the execution of the start-up
 479:Src/mc_interface.c ****   * procedure (or eventually the offset calibration procedure) and returns
 480:Src/mc_interface.c ****   * immediately after. It is not blocking the execution of the application until
 481:Src/mc_interface.c ****   * the motor is indeed running in steady state. If the application needs to wait
 482:Src/mc_interface.c ****   * for the motor to be running in steady state, the application has to check the
 483:Src/mc_interface.c ****   * state machine of the motor and verify that the #RUN state has been reached.
 484:Src/mc_interface.c ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
 485:Src/mc_interface.c ****   */
 486:Src/mc_interface.c **** __weak bool MCI_StartWithPolarizationMotor(MCI_Handle_t* pHandle)
 487:Src/mc_interface.c **** {
 488:Src/mc_interface.c ****   bool retVal = true;
 489:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 490:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 491:Src/mc_interface.c ****   {
 492:Src/mc_interface.c ****     /* Nothing to do */
 493:Src/mc_interface.c ****   }
 494:Src/mc_interface.c ****   else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 17


 495:Src/mc_interface.c ****   {
 496:Src/mc_interface.c **** #endif
 497:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 498:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 499:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 500:Src/mc_interface.c ****     {
 501:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_START;
 502:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 503:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 504:Src/mc_interface.c ****       retVal = false;
 505:Src/mc_interface.c ****   }
 506:Src/mc_interface.c ****   else
 507:Src/mc_interface.c ****   {
 508:Src/mc_interface.c ****     /* Reject the command as the condition are not met */
 509:Src/mc_interface.c ****   }
 510:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 511:Src/mc_interface.c ****   }
 512:Src/mc_interface.c **** #endif
 513:Src/mc_interface.c ****   return (retVal);
 514:Src/mc_interface.c **** }
 515:Src/mc_interface.c **** 
 516:Src/mc_interface.c **** /**
 517:Src/mc_interface.c ****   * @brief  This is a user command used to begin the phase offset calibration
 518:Src/mc_interface.c ****   *         procedure. If the state machine is in IDLE state the command is executed
 519:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 520:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 521:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartOffsetMeasurments command is used to begin phase
 522:Src/mc_interface.c ****   *         offset calibration procedure moving the state machine from IDLE state to
 523:Src/mc_interface.c ****   *         OFFSET_CALIB. The command MCI_StartOffsetMeasurments is not blocking
 524:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 525:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 526:Src/mc_interface.c ****   *         any other state) has been reached.
 527:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 528:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 529:Src/mc_interface.c ****   *         otherwise it return false.
 530:Src/mc_interface.c ****   */
 531:Src/mc_interface.c **** __weak bool MCI_StartOffsetMeasurments(MCI_Handle_t *pHandle)
 532:Src/mc_interface.c **** {
 533:Src/mc_interface.c ****   bool retVal = false;
 534:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 535:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 536:Src/mc_interface.c ****   {
 537:Src/mc_interface.c ****     /* Nothing to do */
 538:Src/mc_interface.c ****   }
 539:Src/mc_interface.c ****   else
 540:Src/mc_interface.c ****   {
 541:Src/mc_interface.c **** #endif
 542:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 543:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 544:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 545:Src/mc_interface.c ****     {
 546:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_MEASURE_OFFSETS;
 547:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 548:Src/mc_interface.c ****       retVal = true;
 549:Src/mc_interface.c ****     }
 550:Src/mc_interface.c ****     else
 551:Src/mc_interface.c ****     {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 18


 552:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 553:Src/mc_interface.c ****     }
 554:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 555:Src/mc_interface.c ****   }
 556:Src/mc_interface.c **** #endif
 557:Src/mc_interface.c ****   return (retVal);
 558:Src/mc_interface.c **** }
 559:Src/mc_interface.c **** 
 560:Src/mc_interface.c **** /**
 561:Src/mc_interface.c ****   * @brief  Gets the phase current measurement offset values
 562:Src/mc_interface.c ****   *
 563:Src/mc_interface.c ****   * The offset values are written in the PolarizationOffsets structure provided that they
 564:Src/mc_interface.c ****   * have been previously provided for the Motor Control subsystem or measured by it.
 565:Src/mc_interface.c ****   *
 566:Src/mc_interface.c ****   * If the offset have not previously been provided to the Motor Control subsystem or
 567:Src/mc_interface.c ****   * if it has not measured them the function returns false and nothing is written in the
 568:Src/mc_interface.c ****   * PolarizationOffsets structure.
 569:Src/mc_interface.c ****   *
 570:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 571:Src/mc_interface.c ****   * @param  PolarizationOffsets Pointer on ploarization offset structure in which offsets will be w
 572:Src/mc_interface.c ****   * @retval returns true if the command is successfully executed; returns false otherwise.
 573:Src/mc_interface.c ****   */
 574:Src/mc_interface.c **** __weak bool MCI_GetCalibratedOffsetsMotor(MCI_Handle_t *pHandle, PolarizationOffsets_t *Polarizatio
 575:Src/mc_interface.c **** {
 396              		.loc 1 575 1 is_stmt 1 view -0
 397              		.cfi_startproc
 398              		@ args = 0, pretend = 0, frame = 0
 399              		@ frame_needed = 0, uses_anonymous_args = 0
 576:Src/mc_interface.c ****   bool retVal = false;
 400              		.loc 1 576 3 view .LVU106
 577:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 578:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 579:Src/mc_interface.c ****   {
 580:Src/mc_interface.c ****     /* Nothing to do */
 581:Src/mc_interface.c ****   }
 582:Src/mc_interface.c ****   else
 583:Src/mc_interface.c ****   {
 584:Src/mc_interface.c **** #endif
 585:Src/mc_interface.c ****     if (pHandle->pPWM->offsetCalibStatus == true)
 401              		.loc 1 585 5 view .LVU107
 402              		.loc 1 585 16 is_stmt 0 view .LVU108
 403 0000 8068     		ldr	r0, [r0, #8]
 404              	.LVL20:
 575:Src/mc_interface.c ****   bool retVal = false;
 405              		.loc 1 575 1 view .LVU109
 406 0002 10B5     		push	{r4, lr}
 407              	.LCFI7:
 408              		.cfi_def_cfa_offset 8
 409              		.cfi_offset 4, -8
 410              		.cfi_offset 14, -4
 411              		.loc 1 585 22 view .LVU110
 412 0004 90F88140 		ldrb	r4, [r0, #129]	@ zero_extendqisi2
 413              		.loc 1 585 8 view .LVU111
 414 0008 0CB9     		cbnz	r4, .L24
 415              	.LVL21:
 586:Src/mc_interface.c ****     {
 587:Src/mc_interface.c ****       PWMC_GetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 19


 588:Src/mc_interface.c ****       retVal = true;
 589:Src/mc_interface.c ****     }
 590:Src/mc_interface.c ****     else
 591:Src/mc_interface.c ****     {
 592:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 593:Src/mc_interface.c ****     }
 416              		.loc 1 593 5 is_stmt 1 view .LVU112
 594:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 595:Src/mc_interface.c ****   }
 596:Src/mc_interface.c **** #endif
 597:Src/mc_interface.c **** 
 598:Src/mc_interface.c ****   return(retVal);
 417              		.loc 1 598 3 view .LVU113
 599:Src/mc_interface.c **** }
 418              		.loc 1 599 1 is_stmt 0 view .LVU114
 419 000a 2046     		mov	r0, r4
 420 000c 10BD     		pop	{r4, pc}
 421              	.LVL22:
 422              	.L24:
 587:Src/mc_interface.c ****       retVal = true;
 423              		.loc 1 587 7 is_stmt 1 view .LVU115
 424 000e FFF7FEFF 		bl	PWMC_GetOffsetCalib
 425              	.LVL23:
 588:Src/mc_interface.c ****     }
 426              		.loc 1 588 7 view .LVU116
 593:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 427              		.loc 1 593 5 view .LVU117
 598:Src/mc_interface.c **** }
 428              		.loc 1 598 3 view .LVU118
 429              		.loc 1 599 1 is_stmt 0 view .LVU119
 430 0012 2046     		mov	r0, r4
 431 0014 10BD     		pop	{r4, pc}
 432              		.loc 1 599 1 view .LVU120
 433              		.cfi_endproc
 434              	.LFE1103:
 436 0016 00BF     		.section	.text.MCI_FaultProcessing,"ax",%progbits
 437              		.align	1
 438              		.p2align 2,,3
 439              		.weak	MCI_FaultProcessing
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 444              	MCI_FaultProcessing:
 445              	.LVL24:
 446              	.LFB1107:
 600:Src/mc_interface.c **** 
 601:Src/mc_interface.c **** /**
 602:Src/mc_interface.c ****   * @brief  Sets the phase current measurement offset values
 603:Src/mc_interface.c ****   *
 604:Src/mc_interface.c ****   * If the state machine is in IDLE state the command is executed
 605:Src/mc_interface.c ****   * instantaneously otherwise the command is discarded. User must take
 606:Src/mc_interface.c ****   * care of this possibility by checking the return value.
 607:Src/mc_interface.c ****   *
 608:Src/mc_interface.c ****   * @note The MCI_SetCalibratedOffsetsMotor command is used to set the phase
 609:Src/mc_interface.c ****   *  offset values . The command MCI_SetCalibratedOffsetsMotor is not blocking
 610:Src/mc_interface.c ****   * the execution of project until the measurments are done; to do this, the user
 611:Src/mc_interface.c ****   * have to check the state machine and verify that the IDLE state (or
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 20


 612:Src/mc_interface.c ****   * any other state) has been reached.
 613:Src/mc_interface.c ****   *
 614:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 615:Src/mc_interface.c ****   * @param  PolarizationOffsets Pointer on ploarization offset structure that contains phase A,
 616:Src/mc_interface.c ****   *         and C values.
 617:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed
 618:Src/mc_interface.c ****   *         otherwise it return false.
 619:Src/mc_interface.c ****   */
 620:Src/mc_interface.c **** __weak bool MCI_SetCalibratedOffsetsMotor(MCI_Handle_t *pHandle, PolarizationOffsets_t *Polarizatio
 621:Src/mc_interface.c **** {
 622:Src/mc_interface.c ****   bool retVal = false;
 623:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 624:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 625:Src/mc_interface.c ****   {
 626:Src/mc_interface.c ****     /* Nothing to do */
 627:Src/mc_interface.c ****   }
 628:Src/mc_interface.c ****   else
 629:Src/mc_interface.c ****   {
 630:Src/mc_interface.c **** #endif
 631:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 632:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 633:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 634:Src/mc_interface.c ****     {
 635:Src/mc_interface.c ****       PWMC_SetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 636:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 637:Src/mc_interface.c ****       retVal = true;
 638:Src/mc_interface.c ****     }
 639:Src/mc_interface.c ****     else
 640:Src/mc_interface.c ****     {
 641:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 642:Src/mc_interface.c ****     }
 643:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 644:Src/mc_interface.c ****   }
 645:Src/mc_interface.c **** #endif
 646:Src/mc_interface.c ****     return(retVal);
 647:Src/mc_interface.c **** }
 648:Src/mc_interface.c **** 
 649:Src/mc_interface.c **** /**
 650:Src/mc_interface.c ****   * @brief Initiates the stop procedure for a motor
 651:Src/mc_interface.c ****   *
 652:Src/mc_interface.c ****   *  If the state machine is in any state but the #ICLWAIT, #IDLE, #FAULT_NOW and
 653:Src/mc_interface.c ****   * #FAULT_OVER states, the command is immediately executed. Otherwise, it is
 654:Src/mc_interface.c ****   * discarded. The Application can check the return value to know whether the
 655:Src/mc_interface.c ****   * command was executed or discarded.
 656:Src/mc_interface.c ****   *
 657:Src/mc_interface.c ****   * @note The MCI_StopMotor() command only triggers the stop motor procedure
 658:Src/mc_interface.c ****   * and then returns. It is not blocking the application until the motor is indeed
 659:Src/mc_interface.c ****   * stopped. To know if it has stopped, the application can query the motor's state
 660:Src/mc_interface.c ****   * machine and check if the #IDLE state has been reached.
 661:Src/mc_interface.c ****   *
 662:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 663:Src/mc_interface.c ****   * @retval returns true if the command is successfully executed, false otherwise.
 664:Src/mc_interface.c ****   */
 665:Src/mc_interface.c **** __weak bool MCI_StopMotor(MCI_Handle_t *pHandle)
 666:Src/mc_interface.c **** {
 667:Src/mc_interface.c ****   bool retVal = false;
 668:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 21


 669:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 670:Src/mc_interface.c ****   {
 671:Src/mc_interface.c ****     /* Nothing to do */
 672:Src/mc_interface.c ****   }
 673:Src/mc_interface.c ****   else
 674:Src/mc_interface.c ****   {
 675:Src/mc_interface.c **** #endif
 676:Src/mc_interface.c ****     bool status;
 677:Src/mc_interface.c ****     MCI_State_t State;
 678:Src/mc_interface.c **** 
 679:Src/mc_interface.c ****     State = MCI_GetSTMState(pHandle);
 680:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 681:Src/mc_interface.c ****     {
 682:Src/mc_interface.c ****       status = false;
 683:Src/mc_interface.c ****     }
 684:Src/mc_interface.c ****     else
 685:Src/mc_interface.c ****     {
 686:Src/mc_interface.c ****       status = true;
 687:Src/mc_interface.c ****     }
 688:Src/mc_interface.c **** 
 689:Src/mc_interface.c ****     if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 690:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 691:Src/mc_interface.c ****         (status == true))
 692:Src/mc_interface.c ****     {
 693:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_STOP;
 694:Src/mc_interface.c ****       retVal = true;
 695:Src/mc_interface.c ****     }
 696:Src/mc_interface.c ****     else
 697:Src/mc_interface.c ****     {
 698:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 699:Src/mc_interface.c ****     }
 700:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 701:Src/mc_interface.c ****   }
 702:Src/mc_interface.c **** #endif
 703:Src/mc_interface.c ****   return (retVal);
 704:Src/mc_interface.c **** }
 705:Src/mc_interface.c **** 
 706:Src/mc_interface.c **** /**
 707:Src/mc_interface.c ****  * @brief Acknowledges Motor Control faults that occurred on the target motor 1.
 708:Src/mc_interface.c ****  *
 709:Src/mc_interface.c ****  *  This function must be called before the motor can be started again when a fault
 710:Src/mc_interface.c ****  * condition has occured. It clears the faults status and resets the state machine
 711:Src/mc_interface.c ****  * of the target motor to the #IDLE state provided that there is no active fault
 712:Src/mc_interface.c ****  * condition anymore.
 713:Src/mc_interface.c ****  *
 714:Src/mc_interface.c ****  *  If the state machine of the target motor is in the #FAULT_OVER state, the function
 715:Src/mc_interface.c ****  * clears the list of past faults, transitions to the #IDLE state and returns true.
 716:Src/mc_interface.c ****  * Otherwise, it oes nothing and returns false.
 717:Src/mc_interface.c ****  *
 718:Src/mc_interface.c ****  * @param  pHandle Pointer on the target motor drive structure.
 719:Src/mc_interface.c ****  */
 720:Src/mc_interface.c **** __weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
 721:Src/mc_interface.c **** {
 722:Src/mc_interface.c ****   bool reVal = false;
 723:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 724:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 725:Src/mc_interface.c ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 22


 726:Src/mc_interface.c ****     /* Nothing to do */
 727:Src/mc_interface.c ****   }
 728:Src/mc_interface.c ****   else
 729:Src/mc_interface.c ****   {
 730:Src/mc_interface.c **** #endif
 731:Src/mc_interface.c ****     if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle))
 732:Src/mc_interface.c ****     {
 733:Src/mc_interface.c ****       pHandle->PastFaults = MC_NO_FAULTS;
 734:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 735:Src/mc_interface.c ****       reVal = true;
 736:Src/mc_interface.c ****     }
 737:Src/mc_interface.c ****     else
 738:Src/mc_interface.c ****     {
 739:Src/mc_interface.c ****       /* Reject the command as the conditions are not met */
 740:Src/mc_interface.c ****     }
 741:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 742:Src/mc_interface.c ****   }
 743:Src/mc_interface.c **** #endif
 744:Src/mc_interface.c ****   return (reVal);
 745:Src/mc_interface.c **** }
 746:Src/mc_interface.c **** 
 747:Src/mc_interface.c **** /**
 748:Src/mc_interface.c ****  * @brief It clocks both HW and SW faults processing and update the state
 749:Src/mc_interface.c ****  *        machine accordingly with hSetErrors, hResetErrors and present state.
 750:Src/mc_interface.c ****  *        Refer to State_t description for more information about fault states.
 751:Src/mc_interface.c ****  * @param pHandle pointer of type  STM_Handle_t
 752:Src/mc_interface.c ****  * @param hSetErrors Bit field reporting faults currently present
 753:Src/mc_interface.c ****  * @param hResetErrors Bit field reporting faults to be cleared
 754:Src/mc_interface.c ****  */
 755:Src/mc_interface.c **** __weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
 756:Src/mc_interface.c **** {
 447              		.loc 1 756 1 is_stmt 1 view -0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              		@ link register save eliminated.
 757:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 758:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 759:Src/mc_interface.c ****   {
 760:Src/mc_interface.c ****     /* Nothing to do */
 761:Src/mc_interface.c ****   }
 762:Src/mc_interface.c ****   else
 763:Src/mc_interface.c ****   {
 764:Src/mc_interface.c **** #endif
 765:Src/mc_interface.c ****     /* Set current errors */
 766:Src/mc_interface.c ****     pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 452              		.loc 1 766 5 view .LVU122
 453              		.loc 1 766 69 is_stmt 0 view .LVU123
 454 0000 838C     		ldrh	r3, [r0, #36]
 767:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 455              		.loc 1 767 25 view .LVU124
 456 0002 B0F826C0 		ldrh	ip, [r0, #38]
 766:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 457              		.loc 1 766 69 view .LVU125
 458 0006 0B43     		orrs	r3, r3, r1
 459 0008 23EA0203 		bic	r3, r3, r2
 460              		.loc 1 767 25 view .LVU126
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 23


 461 000c 41EA0C01 		orr	r1, r1, ip
 462              	.LVL25:
 766:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 463              		.loc 1 766 28 view .LVU127
 464 0010 8384     		strh	r3, [r0, #36]	@ movhi
 465              		.loc 1 767 5 is_stmt 1 view .LVU128
 466              		.loc 1 767 25 is_stmt 0 view .LVU129
 467 0012 C184     		strh	r1, [r0, #38]	@ movhi
 768:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 769:Src/mc_interface.c ****   }
 770:Src/mc_interface.c **** #endif
 771:Src/mc_interface.c **** }
 468              		.loc 1 771 1 view .LVU130
 469 0014 7047     		bx	lr
 470              		.cfi_endproc
 471              	.LFE1107:
 473 0016 00BF     		.section	.text.MCI_ExecBufferedCommands,"ax",%progbits
 474              		.align	1
 475              		.p2align 2,,3
 476              		.weak	MCI_ExecBufferedCommands
 477              		.syntax unified
 478              		.thumb
 479              		.thumb_func
 481              	MCI_ExecBufferedCommands:
 482              	.LVL26:
 483              	.LFB1108:
 772:Src/mc_interface.c **** 
 773:Src/mc_interface.c **** /**
 774:Src/mc_interface.c ****   * @brief  This is usually a method managed by task. It must be called
 775:Src/mc_interface.c ****   *         periodically in order to check the status of the related pSTM object
 776:Src/mc_interface.c ****   *         and eventually to execute the buffered command if the condition
 777:Src/mc_interface.c ****   *         occurs.
 778:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 779:Src/mc_interface.c ****   */
 780:Src/mc_interface.c **** __weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
 781:Src/mc_interface.c **** {
 484              		.loc 1 781 1 is_stmt 1 view -0
 485              		.cfi_startproc
 486              		@ args = 0, pretend = 0, frame = 0
 487              		@ frame_needed = 0, uses_anonymous_args = 0
 782:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 783:Src/mc_interface.c ****   if (NULL == pHandle)
 784:Src/mc_interface.c ****   {
 785:Src/mc_interface.c ****     /* Nothing to do */
 786:Src/mc_interface.c ****   }
 787:Src/mc_interface.c ****   else
 788:Src/mc_interface.c ****   {
 789:Src/mc_interface.c **** #endif
 790:Src/mc_interface.c ****     if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 488              		.loc 1 790 5 view .LVU132
 489              		.loc 1 790 8 is_stmt 0 view .LVU133
 490 0000 90F82830 		ldrb	r3, [r0, #40]	@ zero_extendqisi2
 491 0004 012B     		cmp	r3, #1
 492 0006 00D0     		beq	.L44
 493 0008 7047     		bx	lr
 494              	.L44:
 781:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 24


 495              		.loc 1 781 1 view .LVU134
 496 000a 10B5     		push	{r4, lr}
 497              	.LCFI8:
 498              		.cfi_def_cfa_offset 8
 499              		.cfi_offset 4, -8
 500              		.cfi_offset 14, -4
 501              	.LBB4:
 791:Src/mc_interface.c ****     {
 792:Src/mc_interface.c ****       bool commandHasBeenExecuted = false;
 793:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 502              		.loc 1 793 7 view .LVU135
 503 000c 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 504 000e 013B     		subs	r3, r3, #1
 505 0010 0446     		mov	r4, r0
 792:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 506              		.loc 1 792 7 is_stmt 1 view .LVU136
 507              	.LVL27:
 508              		.loc 1 793 7 view .LVU137
 509 0012 042B     		cmp	r3, #4
 510 0014 2AD8     		bhi	.L28
 511 0016 DFE803F0 		tbb	[pc, r3]
 512              	.L30:
 513 001a 2D       		.byte	(.L34-.L30)/2
 514 001b 19       		.byte	(.L33-.L30)/2
 515 001c 11       		.byte	(.L32-.L30)/2
 516 001d 03       		.byte	(.L29-.L30)/2
 517 001e 03       		.byte	(.L29-.L30)/2
 518 001f 00       		.p2align 1
 519              	.L29:
 794:Src/mc_interface.c ****       {
 795:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDRAMP:
 796:Src/mc_interface.c ****         {
 797:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 798:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 799:Src/mc_interface.c ****           VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 800:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 801:Src/mc_interface.c ****           break;
 802:Src/mc_interface.c ****         }
 803:Src/mc_interface.c **** 
 804:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUERAMP:
 805:Src/mc_interface.c ****         {
 806:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 807:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 808:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 809:Src/mc_interface.c ****           break;
 810:Src/mc_interface.c ****         }
 811:Src/mc_interface.c **** 
 812:Src/mc_interface.c ****         case MCI_CMD_SETCURRENTREFERENCES:
 813:Src/mc_interface.c ****         {
 814:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 815:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 816:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 817:Src/mc_interface.c ****           break;
 818:Src/mc_interface.c ****         }
 819:Src/mc_interface.c **** 
 820:Src/mc_interface.c ****         case MCI_CMD_SETOPENLOOPCURRENT:
 821:Src/mc_interface.c ****         {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 25


 822:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 823:Src/mc_interface.c ****           VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 824:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 825:Src/mc_interface.c ****           break;
 826:Src/mc_interface.c ****         }
 827:Src/mc_interface.c **** 
 828:Src/mc_interface.c ****         case MCI_CMD_SETOPENLOOPVOLTAGE:
 829:Src/mc_interface.c ****         {
 830:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 520              		.loc 1 830 11 view .LVU138
 521              		.loc 1 830 42 is_stmt 0 view .LVU139
 522 0020 4368     		ldr	r3, [r0, #4]
 523 0022 0122     		movs	r2, #1
 524 0024 83F82420 		strb	r2, [r3, #36]
 831:Src/mc_interface.c ****           VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 525              		.loc 1 831 11 is_stmt 1 view .LVU140
 526 0028 028C     		ldrh	r2, [r0, #32]
 527 002a B0F91210 		ldrsh	r1, [r0, #18]
 528 002e C068     		ldr	r0, [r0, #12]
 529              	.LVL28:
 530              		.loc 1 831 11 is_stmt 0 view .LVU141
 531 0030 FFF7FEFF 		bl	VSS_SetMecAcceleration
 532              	.LVL29:
 832:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 533              		.loc 1 832 11 is_stmt 1 view .LVU142
 833:Src/mc_interface.c ****           break;
 534              		.loc 1 833 11 view .LVU143
 834:Src/mc_interface.c ****         }
 835:Src/mc_interface.c **** 
 836:Src/mc_interface.c ****         default:
 837:Src/mc_interface.c ****           break;
 838:Src/mc_interface.c ****       }
 839:Src/mc_interface.c **** 
 840:Src/mc_interface.c ****       if (commandHasBeenExecuted)
 535              		.loc 1 840 7 view .LVU144
 536              	.L36:
 841:Src/mc_interface.c ****       {
 842:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 537              		.loc 1 842 9 view .LVU145
 538              		.loc 1 842 31 is_stmt 0 view .LVU146
 539 0034 0223     		movs	r3, #2
 540 0036 84F82830 		strb	r3, [r4, #40]
 541              	.LBE4:
 843:Src/mc_interface.c ****       }
 844:Src/mc_interface.c ****       else
 845:Src/mc_interface.c ****       {
 846:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 847:Src/mc_interface.c ****       }
 848:Src/mc_interface.c ****     }
 849:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 850:Src/mc_interface.c ****   }
 851:Src/mc_interface.c **** #endif
 852:Src/mc_interface.c **** }
 542              		.loc 1 852 1 view .LVU147
 543 003a 10BD     		pop	{r4, pc}
 544              	.LVL30:
 545              	.L32:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 26


 546              	.LBB5:
 814:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 547              		.loc 1 814 11 is_stmt 1 view .LVU148
 814:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 548              		.loc 1 814 18 is_stmt 0 view .LVU149
 549 003c 4368     		ldr	r3, [r0, #4]
 814:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 550              		.loc 1 814 42 view .LVU150
 551 003e 0122     		movs	r2, #1
 552 0040 83F82420 		strb	r2, [r3, #36]
 815:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 553              		.loc 1 815 11 is_stmt 1 view .LVU151
 815:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 554              		.loc 1 815 37 is_stmt 0 view .LVU152
 555 0044 D0F81620 		ldr	r2, [r0, #22]	@ unaligned
 556 0048 1A61     		str	r2, [r3, #16]	@ unaligned
 816:Src/mc_interface.c ****           break;
 557              		.loc 1 816 11 is_stmt 1 view .LVU153
 558              	.LVL31:
 817:Src/mc_interface.c ****         }
 559              		.loc 1 817 11 view .LVU154
 840:Src/mc_interface.c ****       {
 560              		.loc 1 840 7 view .LVU155
 561 004a F3E7     		b	.L36
 562              	.LVL32:
 563              	.L33:
 806:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 564              		.loc 1 806 11 view .LVU156
 806:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 565              		.loc 1 806 42 is_stmt 0 view .LVU157
 566 004c 4368     		ldr	r3, [r0, #4]
 567 004e 0022     		movs	r2, #0
 568 0050 83F82420 		strb	r2, [r3, #36]
 807:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 569              		.loc 1 807 11 is_stmt 1 view .LVU158
 570 0054 0068     		ldr	r0, [r0]
 571              	.LVL33:
 807:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 572              		.loc 1 807 11 is_stmt 0 view .LVU159
 573 0056 0421     		movs	r1, #4
 574 0058 FFF7FEFF 		bl	STC_SetControlMode
 575              	.LVL34:
 808:Src/mc_interface.c ****           break;
 576              		.loc 1 808 11 is_stmt 1 view .LVU160
 808:Src/mc_interface.c ****           break;
 577              		.loc 1 808 36 is_stmt 0 view .LVU161
 578 005c 228C     		ldrh	r2, [r4, #32]
 579 005e B4F91410 		ldrsh	r1, [r4, #20]
 580 0062 2068     		ldr	r0, [r4]
 581 0064 FFF7FEFF 		bl	STC_ExecRamp
 582              	.LVL35:
 809:Src/mc_interface.c ****         }
 583              		.loc 1 809 11 is_stmt 1 view .LVU162
 584              	.L35:
 840:Src/mc_interface.c ****       {
 585              		.loc 1 840 7 view .LVU163
 840:Src/mc_interface.c ****       {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 27


 586              		.loc 1 840 10 is_stmt 0 view .LVU164
 587 0068 0028     		cmp	r0, #0
 588 006a E3D1     		bne	.L36
 589              	.LVL36:
 590              	.L28:
 846:Src/mc_interface.c ****       }
 591              		.loc 1 846 9 is_stmt 1 view .LVU165
 846:Src/mc_interface.c ****       }
 592              		.loc 1 846 31 is_stmt 0 view .LVU166
 593 006c 0323     		movs	r3, #3
 594 006e 84F82830 		strb	r3, [r4, #40]
 595              	.LBE5:
 596              		.loc 1 852 1 view .LVU167
 597 0072 10BD     		pop	{r4, pc}
 598              	.LVL37:
 599              	.L34:
 600              	.LBB6:
 797:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 601              		.loc 1 797 11 is_stmt 1 view .LVU168
 797:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 602              		.loc 1 797 42 is_stmt 0 view .LVU169
 603 0074 4368     		ldr	r3, [r0, #4]
 604 0076 0022     		movs	r2, #0
 605 0078 83F82420 		strb	r2, [r3, #36]
 798:Src/mc_interface.c ****           VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 606              		.loc 1 798 11 is_stmt 1 view .LVU170
 607 007c 0068     		ldr	r0, [r0]
 608              	.LVL38:
 798:Src/mc_interface.c ****           VSS_SetMecAcceleration( pHandle->pVSS, pHandle->hFinalSpeed, pHandle->hDurationms);
 609              		.loc 1 798 11 is_stmt 0 view .LVU171
 610 007e 0321     		movs	r1, #3
 611 0080 FFF7FEFF 		bl	STC_SetControlMode
 612              	.LVL39:
 799:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 613              		.loc 1 799 11 is_stmt 1 view .LVU172
 614 0084 228C     		ldrh	r2, [r4, #32]
 615 0086 B4F91210 		ldrsh	r1, [r4, #18]
 616 008a E068     		ldr	r0, [r4, #12]
 617 008c FFF7FEFF 		bl	VSS_SetMecAcceleration
 618              	.LVL40:
 800:Src/mc_interface.c ****           break;
 619              		.loc 1 800 11 view .LVU173
 800:Src/mc_interface.c ****           break;
 620              		.loc 1 800 36 is_stmt 0 view .LVU174
 621 0090 228C     		ldrh	r2, [r4, #32]
 622 0092 B4F91210 		ldrsh	r1, [r4, #18]
 623 0096 2068     		ldr	r0, [r4]
 624 0098 FFF7FEFF 		bl	STC_ExecRamp
 625              	.LVL41:
 801:Src/mc_interface.c ****         }
 626              		.loc 1 801 11 is_stmt 1 view .LVU175
 627 009c E4E7     		b	.L35
 628              	.LBE6:
 629              		.cfi_endproc
 630              	.LFE1108:
 632 009e 00BF     		.section	.text.MCI_IsCommandAcknowledged,"ax",%progbits
 633              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 28


 634              		.p2align 2,,3
 635              		.weak	MCI_IsCommandAcknowledged
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 640              	MCI_IsCommandAcknowledged:
 641              	.LVL42:
 642              	.LFB1109:
 853:Src/mc_interface.c **** 
 854:Src/mc_interface.c **** /**
 855:Src/mc_interface.c ****   * @brief  Returns information about the state of the last buffered command.
 856:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 857:Src/mc_interface.c ****   * @retval The state of the last buffered command
 858:Src/mc_interface.c ****   *
 859:Src/mc_interface.c ****   * The state returned by this function can be one of the following codes:
 860:Src/mc_interface.c ****   * - #MCI_BUFFER_EMPTY if no buffered command has been called.
 861:Src/mc_interface.c ****   * - #MCI_COMMAND_NOT_ALREADY_EXECUTED if the buffered command
 862:Src/mc_interface.c ****   * condition has not already occurred.
 863:Src/mc_interface.c ****   * - #MCI_COMMAND_EXECUTED_SUCCESSFULLY if the buffered command has
 864:Src/mc_interface.c ****   * been executed successfully. In this case calling this function resets
 865:Src/mc_interface.c ****   * the command state to #MCI_BUFFER_EMPTY.
 866:Src/mc_interface.c ****   * - #MCI_COMMAND_EXECUTED_UNSUCCESSFULLY if the buffered command has
 867:Src/mc_interface.c ****   * been executed unsuccessfully. In this case calling this function
 868:Src/mc_interface.c ****   * resets the command state to #MCI_BUFFER_EMPTY.
 869:Src/mc_interface.c ****   */
 870:Src/mc_interface.c **** __weak MCI_CommandState_t MCI_IsCommandAcknowledged(MCI_Handle_t *pHandle)
 871:Src/mc_interface.c **** {
 643              		.loc 1 871 1 view -0
 644              		.cfi_startproc
 645              		@ args = 0, pretend = 0, frame = 0
 646              		@ frame_needed = 0, uses_anonymous_args = 0
 647              		@ link register save eliminated.
 872:Src/mc_interface.c ****   MCI_CommandState_t retVal;
 648              		.loc 1 872 3 view .LVU177
 873:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 874:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 875:Src/mc_interface.c ****   {
 876:Src/mc_interface.c ****     retVal = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 877:Src/mc_interface.c ****   }
 878:Src/mc_interface.c ****   else
 879:Src/mc_interface.c ****   {
 880:Src/mc_interface.c **** #endif
 881:Src/mc_interface.c ****     retVal = pHandle->CommandState;
 649              		.loc 1 881 5 view .LVU178
 650              		.loc 1 881 12 is_stmt 0 view .LVU179
 651 0000 90F82830 		ldrb	r3, [r0, #40]	@ zero_extendqisi2
 652              	.LVL43:
 882:Src/mc_interface.c **** 
 883:Src/mc_interface.c ****     if ((MCI_COMMAND_EXECUTED_SUCCESSFULLY == retVal) || (MCI_COMMAND_EXECUTED_UNSUCCESSFULLY == re
 653              		.loc 1 883 5 is_stmt 1 view .LVU180
 654              		.loc 1 883 8 is_stmt 0 view .LVU181
 655 0004 9A1E     		subs	r2, r3, #2
 656 0006 012A     		cmp	r2, #1
 884:Src/mc_interface.c ****     {
 885:Src/mc_interface.c ****       pHandle->CommandState = MCI_BUFFER_EMPTY;
 657              		.loc 1 885 7 is_stmt 1 view .LVU182
 658              		.loc 1 885 29 is_stmt 0 view .LVU183
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 29


 659 0008 9CBF     		itt	ls
 660 000a 0022     		movls	r2, #0
 661 000c 80F82820 		strbls	r2, [r0, #40]
 886:Src/mc_interface.c ****     }
 887:Src/mc_interface.c ****     else
 888:Src/mc_interface.c ****     {
 889:Src/mc_interface.c ****       /* Nothing to do */
 890:Src/mc_interface.c ****     }
 662              		.loc 1 890 5 is_stmt 1 view .LVU184
 891:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 892:Src/mc_interface.c ****   }
 893:Src/mc_interface.c **** #endif
 894:Src/mc_interface.c ****   return (retVal);
 663              		.loc 1 894 3 view .LVU185
 895:Src/mc_interface.c **** }
 664              		.loc 1 895 1 is_stmt 0 view .LVU186
 665 0010 1846     		mov	r0, r3
 666              	.LVL44:
 667              		.loc 1 895 1 view .LVU187
 668 0012 7047     		bx	lr
 669              		.cfi_endproc
 670              	.LFE1109:
 672              		.section	.text.MCI_GetSTMState,"ax",%progbits
 673              		.align	1
 674              		.p2align 2,,3
 675              		.weak	MCI_GetSTMState
 676              		.syntax unified
 677              		.thumb
 678              		.thumb_func
 680              	MCI_GetSTMState:
 681              	.LVL45:
 682              	.LFB1110:
 896:Src/mc_interface.c **** 
 897:Src/mc_interface.c **** /**
 898:Src/mc_interface.c ****   * @brief  It returns information about the state of the related pSTM object.
 899:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 900:Src/mc_interface.c ****   * @retval State_t It returns the current state of the related pSTM object.
 901:Src/mc_interface.c ****   */
 902:Src/mc_interface.c **** __weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 903:Src/mc_interface.c **** {
 683              		.loc 1 903 1 is_stmt 1 view -0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 0
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687              		@ link register save eliminated.
 904:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 905:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
 906:Src/mc_interface.c **** #else
 907:Src/mc_interface.c ****   return (pHandle->State);
 688              		.loc 1 907 3 view .LVU189
 908:Src/mc_interface.c **** #endif
 909:Src/mc_interface.c **** }
 689              		.loc 1 909 1 is_stmt 0 view .LVU190
 690 0000 90F82300 		ldrb	r0, [r0, #35]	@ zero_extendqisi2
 691              	.LVL46:
 692              		.loc 1 909 1 view .LVU191
 693 0004 7047     		bx	lr
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 30


 694              		.cfi_endproc
 695              	.LFE1110:
 697 0006 00BF     		.section	.text.MCI_GetOccurredFaults,"ax",%progbits
 698              		.align	1
 699              		.p2align 2,,3
 700              		.weak	MCI_GetOccurredFaults
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 705              	MCI_GetOccurredFaults:
 706              	.LVL47:
 707              	.LFB1111:
 910:Src/mc_interface.c **** 
 911:Src/mc_interface.c **** /**
 912:Src/mc_interface.c ****   * @brief Returns the list of non-acknowledged faults that occured on the target motor
 913:Src/mc_interface.c ****   *
 914:Src/mc_interface.c ****   * This function returns a bitfield indicating the faults that occured since the state machine
 915:Src/mc_interface.c ****   * of the target motor has been moved into the #FAULT_NOW state.
 916:Src/mc_interface.c ****   *
 917:Src/mc_interface.c ****   * Possible error codes are listed in the @ref fault_codes "Fault codes" section.
 918:Src/mc_interface.c ****   *
 919:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 920:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about the faults
 921:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 922:Src/mc_interface.c ****   */
 923:Src/mc_interface.c **** __weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 924:Src/mc_interface.c **** {
 708              		.loc 1 924 1 is_stmt 1 view -0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              		@ link register save eliminated.
 925:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 926:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
 927:Src/mc_interface.c **** #else
 928:Src/mc_interface.c ****   return ((uint16_t)pHandle->PastFaults);
 713              		.loc 1 928 3 view .LVU193
 929:Src/mc_interface.c **** #endif
 930:Src/mc_interface.c **** }
 714              		.loc 1 930 1 is_stmt 0 view .LVU194
 715 0000 C08C     		ldrh	r0, [r0, #38]
 716              	.LVL48:
 717              		.loc 1 930 1 view .LVU195
 718 0002 7047     		bx	lr
 719              		.cfi_endproc
 720              	.LFE1111:
 722              		.section	.text.MCI_GetCurrentFaults,"ax",%progbits
 723              		.align	1
 724              		.p2align 2,,3
 725              		.weak	MCI_GetCurrentFaults
 726              		.syntax unified
 727              		.thumb
 728              		.thumb_func
 730              	MCI_GetCurrentFaults:
 731              	.LVL49:
 732              	.LFB1112:
 931:Src/mc_interface.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 31


 932:Src/mc_interface.c **** /**
 933:Src/mc_interface.c ****   * @brief Returns the list of faults that are currently active on the target motor
 934:Src/mc_interface.c ****   *
 935:Src/mc_interface.c ****   * This function returns a bitfield that indicates faults that occured on the Motor
 936:Src/mc_interface.c ****   * Control subsystem for the target motor and that are still active (the conditions
 937:Src/mc_interface.c ****   * that triggered the faults returned are still true).
 938:Src/mc_interface.c ****   *
 939:Src/mc_interface.c ****   * Possible error codes are listed in the @ref fault_codes "Fault codes" section.
 940:Src/mc_interface.c ****   *
 941:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 942:Src/mc_interface.c ****   */
 943:Src/mc_interface.c **** __weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 944:Src/mc_interface.c **** {
 733              		.loc 1 944 1 is_stmt 1 view -0
 734              		.cfi_startproc
 735              		@ args = 0, pretend = 0, frame = 0
 736              		@ frame_needed = 0, uses_anonymous_args = 0
 737              		@ link register save eliminated.
 945:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 946:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
 947:Src/mc_interface.c **** #else
 948:Src/mc_interface.c ****   return ((uint16_t)pHandle->CurrentFaults);
 738              		.loc 1 948 3 view .LVU197
 949:Src/mc_interface.c **** #endif
 950:Src/mc_interface.c **** }
 739              		.loc 1 950 1 is_stmt 0 view .LVU198
 740 0000 808C     		ldrh	r0, [r0, #36]
 741              	.LVL50:
 742              		.loc 1 950 1 view .LVU199
 743 0002 7047     		bx	lr
 744              		.cfi_endproc
 745              	.LFE1112:
 747              		.section	.text.MCI_StartMotor,"ax",%progbits
 748              		.align	1
 749              		.p2align 2,,3
 750              		.weak	MCI_StartMotor
 751              		.syntax unified
 752              		.thumb
 753              		.thumb_func
 755              	MCI_StartMotor:
 756              	.LVL51:
 757              	.LFB1100:
 425:Src/mc_interface.c ****   bool retVal = false;
 758              		.loc 1 425 1 is_stmt 1 view -0
 759              		.cfi_startproc
 760              		@ args = 0, pretend = 0, frame = 0
 761              		@ frame_needed = 0, uses_anonymous_args = 0
 426:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 762              		.loc 1 426 3 view .LVU201
 435:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 763              		.loc 1 435 5 view .LVU202
 425:Src/mc_interface.c ****   bool retVal = false;
 764              		.loc 1 425 1 is_stmt 0 view .LVU203
 765 0000 10B5     		push	{r4, lr}
 766              	.LCFI9:
 767              		.cfi_def_cfa_offset 8
 768              		.cfi_offset 4, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 32


 769              		.cfi_offset 14, -4
 425:Src/mc_interface.c ****   bool retVal = false;
 770              		.loc 1 425 1 view .LVU204
 771 0002 0446     		mov	r4, r0
 435:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 772              		.loc 1 435 18 view .LVU205
 773 0004 FFF7FEFF 		bl	MCI_GetSTMState
 774              	.LVL52:
 435:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 775              		.loc 1 435 8 view .LVU206
 776 0008 08B1     		cbz	r0, .L51
 777              	.L53:
 426:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 778              		.loc 1 426 8 view .LVU207
 779 000a 0020     		movs	r0, #0
 780              	.LVL53:
 446:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 781              		.loc 1 446 5 is_stmt 1 view .LVU208
 450:Src/mc_interface.c **** }
 782              		.loc 1 450 3 view .LVU209
 451:Src/mc_interface.c **** 
 783              		.loc 1 451 1 is_stmt 0 view .LVU210
 784 000c 10BD     		pop	{r4, pc}
 785              	.LVL54:
 786              	.L51:
 436:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 787              		.loc 1 436 26 discriminator 1 view .LVU211
 788 000e 2046     		mov	r0, r4
 789 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 790              	.LVL55:
 435:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 791              		.loc 1 435 44 discriminator 1 view .LVU212
 792 0014 0028     		cmp	r0, #0
 793 0016 F8D1     		bne	.L53
 437:Src/mc_interface.c ****     {
 794              		.loc 1 437 26 view .LVU213
 795 0018 2046     		mov	r0, r4
 796 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 797              	.LVL56:
 436:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 798              		.loc 1 436 58 view .LVU214
 799 001e 0028     		cmp	r0, #0
 800 0020 F3D1     		bne	.L53
 439:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 801              		.loc 1 439 7 is_stmt 1 view .LVU215
 439:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 802              		.loc 1 439 30 is_stmt 0 view .LVU216
 803 0022 0120     		movs	r0, #1
 804 0024 84F82200 		strb	r0, [r4, #34]
 440:Src/mc_interface.c ****       retVal = true;
 805              		.loc 1 440 7 is_stmt 1 view .LVU217
 440:Src/mc_interface.c ****       retVal = true;
 806              		.loc 1 440 29 is_stmt 0 view .LVU218
 807 0028 84F82800 		strb	r0, [r4, #40]
 441:Src/mc_interface.c ****     }
 808              		.loc 1 441 7 is_stmt 1 view .LVU219
 809              	.LVL57:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 33


 446:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 810              		.loc 1 446 5 view .LVU220
 450:Src/mc_interface.c **** }
 811              		.loc 1 450 3 view .LVU221
 451:Src/mc_interface.c **** 
 812              		.loc 1 451 1 is_stmt 0 view .LVU222
 813 002c 10BD     		pop	{r4, pc}
 451:Src/mc_interface.c **** 
 814              		.loc 1 451 1 view .LVU223
 815              		.cfi_endproc
 816              	.LFE1100:
 818 002e 00BF     		.section	.text.MCI_StartWithPolarizationMotor,"ax",%progbits
 819              		.align	1
 820              		.p2align 2,,3
 821              		.weak	MCI_StartWithPolarizationMotor
 822              		.syntax unified
 823              		.thumb
 824              		.thumb_func
 826              	MCI_StartWithPolarizationMotor:
 827              	.LVL58:
 828              	.LFB1101:
 487:Src/mc_interface.c ****   bool retVal = true;
 829              		.loc 1 487 1 is_stmt 1 view -0
 830              		.cfi_startproc
 831              		@ args = 0, pretend = 0, frame = 0
 832              		@ frame_needed = 0, uses_anonymous_args = 0
 488:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 833              		.loc 1 488 3 view .LVU225
 497:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 834              		.loc 1 497 5 view .LVU226
 487:Src/mc_interface.c ****   bool retVal = true;
 835              		.loc 1 487 1 is_stmt 0 view .LVU227
 836 0000 10B5     		push	{r4, lr}
 837              	.LCFI10:
 838              		.cfi_def_cfa_offset 8
 839              		.cfi_offset 4, -8
 840              		.cfi_offset 14, -4
 487:Src/mc_interface.c ****   bool retVal = true;
 841              		.loc 1 487 1 view .LVU228
 842 0002 0446     		mov	r4, r0
 497:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 843              		.loc 1 497 18 view .LVU229
 844 0004 FFF7FEFF 		bl	MCI_GetSTMState
 845              	.LVL59:
 497:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 846              		.loc 1 497 8 view .LVU230
 847 0008 08B1     		cbz	r0, .L56
 848              	.L58:
 488:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 849              		.loc 1 488 8 view .LVU231
 850 000a 0120     		movs	r0, #1
 851              	.LVL60:
 509:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 852              		.loc 1 509 3 is_stmt 1 view .LVU232
 513:Src/mc_interface.c **** }
 853              		.loc 1 513 3 view .LVU233
 514:Src/mc_interface.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 34


 854              		.loc 1 514 1 is_stmt 0 view .LVU234
 855 000c 10BD     		pop	{r4, pc}
 856              	.LVL61:
 857              	.L56:
 498:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 858              		.loc 1 498 26 discriminator 1 view .LVU235
 859 000e 2046     		mov	r0, r4
 860 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 861              	.LVL62:
 497:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 862              		.loc 1 497 44 discriminator 1 view .LVU236
 863 0014 0028     		cmp	r0, #0
 864 0016 F8D1     		bne	.L58
 499:Src/mc_interface.c ****     {
 865              		.loc 1 499 26 view .LVU237
 866 0018 2046     		mov	r0, r4
 867 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 868              	.LVL63:
 498:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 869              		.loc 1 498 58 view .LVU238
 870 001e 0028     		cmp	r0, #0
 871 0020 F3D1     		bne	.L58
 501:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 872              		.loc 1 501 7 is_stmt 1 view .LVU239
 501:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 873              		.loc 1 501 30 is_stmt 0 view .LVU240
 874 0022 0122     		movs	r2, #1
 503:Src/mc_interface.c ****       retVal = false;
 875              		.loc 1 503 40 view .LVU241
 876 0024 A168     		ldr	r1, [r4, #8]
 501:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 877              		.loc 1 501 30 view .LVU242
 878 0026 84F82220 		strb	r2, [r4, #34]
 502:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 879              		.loc 1 502 7 is_stmt 1 view .LVU243
 502:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 880              		.loc 1 502 29 is_stmt 0 view .LVU244
 881 002a 84F82820 		strb	r2, [r4, #40]
 503:Src/mc_interface.c ****       retVal = false;
 882              		.loc 1 503 7 is_stmt 1 view .LVU245
 503:Src/mc_interface.c ****       retVal = false;
 883              		.loc 1 503 40 is_stmt 0 view .LVU246
 884 002e 81F88100 		strb	r0, [r1, #129]
 504:Src/mc_interface.c ****   }
 885              		.loc 1 504 7 is_stmt 1 view .LVU247
 886              	.LVL64:
 509:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 887              		.loc 1 509 3 view .LVU248
 513:Src/mc_interface.c **** }
 888              		.loc 1 513 3 view .LVU249
 514:Src/mc_interface.c **** 
 889              		.loc 1 514 1 is_stmt 0 view .LVU250
 890 0032 10BD     		pop	{r4, pc}
 514:Src/mc_interface.c **** 
 891              		.loc 1 514 1 view .LVU251
 892              		.cfi_endproc
 893              	.LFE1101:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 35


 895              		.section	.text.MCI_StartOffsetMeasurments,"ax",%progbits
 896              		.align	1
 897              		.p2align 2,,3
 898              		.weak	MCI_StartOffsetMeasurments
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 903              	MCI_StartOffsetMeasurments:
 904              	.LVL65:
 905              	.LFB1102:
 532:Src/mc_interface.c ****   bool retVal = false;
 906              		.loc 1 532 1 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 533:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 910              		.loc 1 533 3 view .LVU253
 542:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 911              		.loc 1 542 5 view .LVU254
 532:Src/mc_interface.c ****   bool retVal = false;
 912              		.loc 1 532 1 is_stmt 0 view .LVU255
 913 0000 10B5     		push	{r4, lr}
 914              	.LCFI11:
 915              		.cfi_def_cfa_offset 8
 916              		.cfi_offset 4, -8
 917              		.cfi_offset 14, -4
 532:Src/mc_interface.c ****   bool retVal = false;
 918              		.loc 1 532 1 view .LVU256
 919 0002 0446     		mov	r4, r0
 542:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 920              		.loc 1 542 18 view .LVU257
 921 0004 FFF7FEFF 		bl	MCI_GetSTMState
 922              	.LVL66:
 542:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 923              		.loc 1 542 8 view .LVU258
 924 0008 08B1     		cbz	r0, .L61
 925              	.L63:
 533:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 926              		.loc 1 533 8 view .LVU259
 927 000a 0020     		movs	r0, #0
 928              	.LVL67:
 553:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 929              		.loc 1 553 5 is_stmt 1 view .LVU260
 557:Src/mc_interface.c **** }
 930              		.loc 1 557 3 view .LVU261
 558:Src/mc_interface.c **** 
 931              		.loc 1 558 1 is_stmt 0 view .LVU262
 932 000c 10BD     		pop	{r4, pc}
 933              	.LVL68:
 934              	.L61:
 543:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 935              		.loc 1 543 26 discriminator 1 view .LVU263
 936 000e 2046     		mov	r0, r4
 937 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 938              	.LVL69:
 542:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 939              		.loc 1 542 44 discriminator 1 view .LVU264
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 36


 940 0014 0028     		cmp	r0, #0
 941 0016 F8D1     		bne	.L63
 544:Src/mc_interface.c ****     {
 942              		.loc 1 544 26 view .LVU265
 943 0018 2046     		mov	r0, r4
 944 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 945              	.LVL70:
 543:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 946              		.loc 1 543 58 view .LVU266
 947 001e 0346     		mov	r3, r0
 948 0020 0028     		cmp	r0, #0
 949 0022 F2D1     		bne	.L63
 546:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 950              		.loc 1 546 7 is_stmt 1 view .LVU267
 547:Src/mc_interface.c ****       retVal = true;
 951              		.loc 1 547 40 is_stmt 0 view .LVU268
 952 0024 A268     		ldr	r2, [r4, #8]
 546:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 953              		.loc 1 546 30 view .LVU269
 954 0026 0321     		movs	r1, #3
 955 0028 84F82210 		strb	r1, [r4, #34]
 547:Src/mc_interface.c ****       retVal = true;
 956              		.loc 1 547 7 is_stmt 1 view .LVU270
 548:Src/mc_interface.c ****     }
 957              		.loc 1 548 14 is_stmt 0 view .LVU271
 958 002c 0120     		movs	r0, #1
 547:Src/mc_interface.c ****       retVal = true;
 959              		.loc 1 547 40 view .LVU272
 960 002e 82F88130 		strb	r3, [r2, #129]
 548:Src/mc_interface.c ****     }
 961              		.loc 1 548 7 is_stmt 1 view .LVU273
 962              	.LVL71:
 553:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 963              		.loc 1 553 5 view .LVU274
 557:Src/mc_interface.c **** }
 964              		.loc 1 557 3 view .LVU275
 558:Src/mc_interface.c **** 
 965              		.loc 1 558 1 is_stmt 0 view .LVU276
 966 0032 10BD     		pop	{r4, pc}
 558:Src/mc_interface.c **** 
 967              		.loc 1 558 1 view .LVU277
 968              		.cfi_endproc
 969              	.LFE1102:
 971              		.section	.text.MCI_SetCalibratedOffsetsMotor,"ax",%progbits
 972              		.align	1
 973              		.p2align 2,,3
 974              		.weak	MCI_SetCalibratedOffsetsMotor
 975              		.syntax unified
 976              		.thumb
 977              		.thumb_func
 979              	MCI_SetCalibratedOffsetsMotor:
 980              	.LVL72:
 981              	.LFB1104:
 621:Src/mc_interface.c ****   bool retVal = false;
 982              		.loc 1 621 1 is_stmt 1 view -0
 983              		.cfi_startproc
 984              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 37


 985              		@ frame_needed = 0, uses_anonymous_args = 0
 622:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 986              		.loc 1 622 3 view .LVU279
 631:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 987              		.loc 1 631 5 view .LVU280
 621:Src/mc_interface.c ****   bool retVal = false;
 988              		.loc 1 621 1 is_stmt 0 view .LVU281
 989 0000 38B5     		push	{r3, r4, r5, lr}
 990              	.LCFI12:
 991              		.cfi_def_cfa_offset 16
 992              		.cfi_offset 3, -16
 993              		.cfi_offset 4, -12
 994              		.cfi_offset 5, -8
 995              		.cfi_offset 14, -4
 621:Src/mc_interface.c ****   bool retVal = false;
 996              		.loc 1 621 1 view .LVU282
 997 0002 0446     		mov	r4, r0
 998 0004 0D46     		mov	r5, r1
 631:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 999              		.loc 1 631 18 view .LVU283
 1000 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1001              	.LVL73:
 631:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1002              		.loc 1 631 8 view .LVU284
 1003 000a 08B1     		cbz	r0, .L66
 1004              	.L68:
 622:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1005              		.loc 1 622 8 view .LVU285
 1006 000c 0020     		movs	r0, #0
 1007              	.LVL74:
 642:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1008              		.loc 1 642 5 is_stmt 1 view .LVU286
 646:Src/mc_interface.c **** }
 1009              		.loc 1 646 5 view .LVU287
 647:Src/mc_interface.c **** 
 1010              		.loc 1 647 1 is_stmt 0 view .LVU288
 1011 000e 38BD     		pop	{r3, r4, r5, pc}
 1012              	.LVL75:
 1013              	.L66:
 632:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1014              		.loc 1 632 26 discriminator 1 view .LVU289
 1015 0010 2046     		mov	r0, r4
 1016 0012 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1017              	.LVL76:
 631:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1018              		.loc 1 631 44 discriminator 1 view .LVU290
 1019 0016 0028     		cmp	r0, #0
 1020 0018 F8D1     		bne	.L68
 633:Src/mc_interface.c ****     {
 1021              		.loc 1 633 26 view .LVU291
 1022 001a 2046     		mov	r0, r4
 1023 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1024              	.LVL77:
 632:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1025              		.loc 1 632 58 view .LVU292
 1026 0020 0028     		cmp	r0, #0
 1027 0022 F3D1     		bne	.L68
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 38


 635:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 1028              		.loc 1 635 7 is_stmt 1 view .LVU293
 1029 0024 A068     		ldr	r0, [r4, #8]
 1030 0026 2946     		mov	r1, r5
 1031 0028 FFF7FEFF 		bl	PWMC_SetOffsetCalib
 1032              	.LVL78:
 636:Src/mc_interface.c ****       retVal = true;
 1033              		.loc 1 636 7 view .LVU294
 636:Src/mc_interface.c ****       retVal = true;
 1034              		.loc 1 636 40 is_stmt 0 view .LVU295
 1035 002c A368     		ldr	r3, [r4, #8]
 1036 002e 0120     		movs	r0, #1
 1037 0030 83F88100 		strb	r0, [r3, #129]
 637:Src/mc_interface.c ****     }
 1038              		.loc 1 637 7 is_stmt 1 view .LVU296
 1039              	.LVL79:
 642:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1040              		.loc 1 642 5 view .LVU297
 646:Src/mc_interface.c **** }
 1041              		.loc 1 646 5 view .LVU298
 647:Src/mc_interface.c **** 
 1042              		.loc 1 647 1 is_stmt 0 view .LVU299
 1043 0034 38BD     		pop	{r3, r4, r5, pc}
 647:Src/mc_interface.c **** 
 1044              		.loc 1 647 1 view .LVU300
 1045              		.cfi_endproc
 1046              	.LFE1104:
 1048 0036 00BF     		.section	.text.MCI_StopMotor,"ax",%progbits
 1049              		.align	1
 1050              		.p2align 2,,3
 1051              		.weak	MCI_StopMotor
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1056              	MCI_StopMotor:
 1057              	.LVL80:
 1058              	.LFB1105:
 666:Src/mc_interface.c ****   bool retVal = false;
 1059              		.loc 1 666 1 is_stmt 1 view -0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 0
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 667:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1063              		.loc 1 667 3 view .LVU302
 676:Src/mc_interface.c ****     MCI_State_t State;
 1064              		.loc 1 676 5 view .LVU303
 677:Src/mc_interface.c **** 
 1065              		.loc 1 677 5 view .LVU304
 679:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 1066              		.loc 1 679 5 view .LVU305
 666:Src/mc_interface.c ****   bool retVal = false;
 1067              		.loc 1 666 1 is_stmt 0 view .LVU306
 1068 0000 38B5     		push	{r3, r4, r5, lr}
 1069              	.LCFI13:
 1070              		.cfi_def_cfa_offset 16
 1071              		.cfi_offset 3, -16
 1072              		.cfi_offset 4, -12
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 39


 1073              		.cfi_offset 5, -8
 1074              		.cfi_offset 14, -4
 666:Src/mc_interface.c ****   bool retVal = false;
 1075              		.loc 1 666 1 view .LVU307
 1076 0002 0546     		mov	r5, r0
 679:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 1077              		.loc 1 679 13 view .LVU308
 1078 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1079              	.LVL81:
 680:Src/mc_interface.c ****     {
 1080              		.loc 1 680 5 is_stmt 1 view .LVU309
 680:Src/mc_interface.c ****     {
 1081              		.loc 1 680 8 is_stmt 0 view .LVU310
 1082 0008 50B1     		cbz	r0, .L75
 680:Src/mc_interface.c ****     {
 1083              		.loc 1 680 25 discriminator 1 view .LVU311
 1084 000a B0F10C04 		subs	r4, r0, #12
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1085              		.loc 1 689 26 discriminator 1 view .LVU312
 1086 000e 2846     		mov	r0, r5
 1087              	.LVL82:
 680:Src/mc_interface.c ****     {
 1088              		.loc 1 680 25 discriminator 1 view .LVU313
 1089 0010 18BF     		it	ne
 1090 0012 0124     		movne	r4, #1
 1091              	.LVL83:
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1092              		.loc 1 689 5 is_stmt 1 discriminator 1 view .LVU314
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1093              		.loc 1 689 26 is_stmt 0 discriminator 1 view .LVU315
 1094 0014 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1095              	.LVL84:
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1096              		.loc 1 689 8 discriminator 1 view .LVU316
 1097 0018 40B1     		cbz	r0, .L72
 1098              	.L74:
 667:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1099              		.loc 1 667 8 view .LVU317
 1100 001a 0024     		movs	r4, #0
 1101              	.LVL85:
 1102              	.L73:
 699:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1103              		.loc 1 699 5 is_stmt 1 view .LVU318
 703:Src/mc_interface.c **** }
 1104              		.loc 1 703 3 view .LVU319
 704:Src/mc_interface.c **** 
 1105              		.loc 1 704 1 is_stmt 0 view .LVU320
 1106 001c 2046     		mov	r0, r4
 1107 001e 38BD     		pop	{r3, r4, r5, pc}
 1108              	.LVL86:
 1109              	.L75:
 682:Src/mc_interface.c ****     }
 1110              		.loc 1 682 14 view .LVU321
 1111 0020 0446     		mov	r4, r0
 1112              	.LVL87:
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1113              		.loc 1 689 5 is_stmt 1 view .LVU322
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 40


 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1114              		.loc 1 689 26 is_stmt 0 view .LVU323
 1115 0022 2846     		mov	r0, r5
 1116              	.LVL88:
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1117              		.loc 1 689 26 view .LVU324
 1118 0024 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1119              	.LVL89:
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1120              		.loc 1 689 8 view .LVU325
 1121 0028 0028     		cmp	r0, #0
 1122 002a F6D1     		bne	.L74
 1123              	.L72:
 690:Src/mc_interface.c ****         (status == true))
 1124              		.loc 1 690 26 discriminator 1 view .LVU326
 1125 002c 2846     		mov	r0, r5
 1126 002e FFF7FEFF 		bl	MCI_GetCurrentFaults
 1127              	.LVL90:
 689:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1128              		.loc 1 689 58 discriminator 1 view .LVU327
 1129 0032 0028     		cmp	r0, #0
 1130 0034 F1D1     		bne	.L74
 690:Src/mc_interface.c ****         (status == true))
 1131              		.loc 1 690 57 view .LVU328
 1132 0036 002C     		cmp	r4, #0
 1133 0038 EFD0     		beq	.L74
 693:Src/mc_interface.c ****       retVal = true;
 1134              		.loc 1 693 7 is_stmt 1 view .LVU329
 693:Src/mc_interface.c ****       retVal = true;
 1135              		.loc 1 693 30 is_stmt 0 view .LVU330
 1136 003a 0523     		movs	r3, #5
 1137 003c 85F82230 		strb	r3, [r5, #34]
 694:Src/mc_interface.c ****     }
 1138              		.loc 1 694 7 is_stmt 1 view .LVU331
 1139              	.LVL91:
 694:Src/mc_interface.c ****     }
 1140              		.loc 1 694 7 is_stmt 0 view .LVU332
 1141 0040 ECE7     		b	.L73
 1142              		.cfi_endproc
 1143              	.LFE1105:
 1145 0042 00BF     		.section	.text.MCI_FaultAcknowledged,"ax",%progbits
 1146              		.align	1
 1147              		.p2align 2,,3
 1148              		.weak	MCI_FaultAcknowledged
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
 1153              	MCI_FaultAcknowledged:
 1154              	.LVL92:
 1155              	.LFB1106:
 721:Src/mc_interface.c ****   bool reVal = false;
 1156              		.loc 1 721 1 is_stmt 1 view -0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 722:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1160              		.loc 1 722 3 view .LVU334
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 41


 731:Src/mc_interface.c ****     {
 1161              		.loc 1 731 5 view .LVU335
 721:Src/mc_interface.c ****   bool reVal = false;
 1162              		.loc 1 721 1 is_stmt 0 view .LVU336
 1163 0000 10B5     		push	{r4, lr}
 1164              	.LCFI14:
 1165              		.cfi_def_cfa_offset 8
 1166              		.cfi_offset 4, -8
 1167              		.cfi_offset 14, -4
 721:Src/mc_interface.c ****   bool reVal = false;
 1168              		.loc 1 721 1 view .LVU337
 1169 0002 0446     		mov	r4, r0
 731:Src/mc_interface.c ****     {
 1170              		.loc 1 731 24 view .LVU338
 1171 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1172              	.LVL93:
 731:Src/mc_interface.c ****     {
 1173              		.loc 1 731 8 view .LVU339
 1174 0008 0B28     		cmp	r0, #11
 1175 000a 01D0     		beq	.L81
 1176              	.L83:
 722:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1177              		.loc 1 722 8 view .LVU340
 1178 000c 0020     		movs	r0, #0
 1179              	.LVL94:
 740:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1180              		.loc 1 740 5 is_stmt 1 view .LVU341
 744:Src/mc_interface.c **** }
 1181              		.loc 1 744 3 view .LVU342
 745:Src/mc_interface.c **** 
 1182              		.loc 1 745 1 is_stmt 0 view .LVU343
 1183 000e 10BD     		pop	{r4, pc}
 1184              	.LVL95:
 1185              	.L81:
 731:Src/mc_interface.c ****     {
 1186              		.loc 1 731 70 discriminator 1 view .LVU344
 1187 0010 2046     		mov	r0, r4
 1188 0012 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1189              	.LVL96:
 731:Src/mc_interface.c ****     {
 1190              		.loc 1 731 50 discriminator 1 view .LVU345
 1191 0016 0028     		cmp	r0, #0
 1192 0018 F8D1     		bne	.L83
 733:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 1193              		.loc 1 733 7 is_stmt 1 view .LVU346
 734:Src/mc_interface.c ****       reVal = true;
 1194              		.loc 1 734 30 is_stmt 0 view .LVU347
 1195 001a 0223     		movs	r3, #2
 1196 001c 84F82230 		strb	r3, [r4, #34]
 733:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 1197              		.loc 1 733 27 view .LVU348
 1198 0020 E084     		strh	r0, [r4, #38]	@ movhi
 734:Src/mc_interface.c ****       reVal = true;
 1199              		.loc 1 734 7 is_stmt 1 view .LVU349
 735:Src/mc_interface.c ****     }
 1200              		.loc 1 735 7 view .LVU350
 1201              	.LVL97:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 42


 735:Src/mc_interface.c ****     }
 1202              		.loc 1 735 13 is_stmt 0 view .LVU351
 1203 0022 0120     		movs	r0, #1
 1204              	.LVL98:
 740:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1205              		.loc 1 740 5 is_stmt 1 view .LVU352
 744:Src/mc_interface.c **** }
 1206              		.loc 1 744 3 view .LVU353
 745:Src/mc_interface.c **** 
 1207              		.loc 1 745 1 is_stmt 0 view .LVU354
 1208 0024 10BD     		pop	{r4, pc}
 745:Src/mc_interface.c **** 
 1209              		.loc 1 745 1 view .LVU355
 1210              		.cfi_endproc
 1211              	.LFE1106:
 1213 0026 00BF     		.section	.text.MCI_GetFaultState,"ax",%progbits
 1214              		.align	1
 1215              		.p2align 2,,3
 1216              		.weak	MCI_GetFaultState
 1217              		.syntax unified
 1218              		.thumb
 1219              		.thumb_func
 1221              	MCI_GetFaultState:
 1222              	.LVL99:
 1223              	.LFB1113:
 951:Src/mc_interface.c **** 
 952:Src/mc_interface.c **** /**
 953:Src/mc_interface.c ****   * @brief Returns the lists of current and past faults that occurred on the target motor
 954:Src/mc_interface.c ****   *
 955:Src/mc_interface.c ****   *  This function returns two bitfields containing information about the faults currently
 956:Src/mc_interface.c ****   * present and the faults occurred since the state machine has been moved into the #FAULT_NOW
 957:Src/mc_interface.c ****   * state.
 958:Src/mc_interface.c ****   *
 959:Src/mc_interface.c ****   * These two bitfields are 16 bits wide each and are concatenated into the 32-bit data. The
 960:Src/mc_interface.c ****   * 16 most significant bits contains the status of the current faults while that of the
 961:Src/mc_interface.c ****   * past faults is in the 16 least significant bits.
 962:Src/mc_interface.c ****   *
 963:Src/mc_interface.c ****   * @sa MCI_GetOccurredFaults, MCI_GetCurrentFaults
 964:Src/mc_interface.c ****   *
 965:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 966:Src/mc_interface.c ****   */
 967:Src/mc_interface.c **** __weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 968:Src/mc_interface.c **** {
 1224              		.loc 1 968 1 is_stmt 1 view -0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 0, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 969:Src/mc_interface.c ****   uint32_t LocalFaultState;
 1229              		.loc 1 969 3 view .LVU357
 970:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 971:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 972:Src/mc_interface.c ****   {
 973:Src/mc_interface.c ****     LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
 974:Src/mc_interface.c ****   }
 975:Src/mc_interface.c ****   else
 976:Src/mc_interface.c ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 43


 977:Src/mc_interface.c **** #endif
 978:Src/mc_interface.c ****     LocalFaultState = (uint32_t)(pHandle->PastFaults);
 1230              		.loc 1 978 5 view .LVU358
 1231              		.loc 1 978 21 is_stmt 0 view .LVU359
 1232 0000 C38C     		ldrh	r3, [r0, #38]
 1233              	.LVL100:
 979:Src/mc_interface.c ****     LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1234              		.loc 1 979 5 is_stmt 1 view .LVU360
 980:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 981:Src/mc_interface.c ****   }
 982:Src/mc_interface.c **** #endif
 983:Src/mc_interface.c ****   return (LocalFaultState);
 1235              		.loc 1 983 3 view .LVU361
 979:Src/mc_interface.c ****     LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1236              		.loc 1 979 24 is_stmt 0 view .LVU362
 1237 0002 808C     		ldrh	r0, [r0, #36]
 1238              	.LVL101:
 984:Src/mc_interface.c **** }
 1239              		.loc 1 984 1 view .LVU363
 1240 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1241 0008 7047     		bx	lr
 1242              		.cfi_endproc
 1243              	.LFE1113:
 1245 000a 00BF     		.section	.text.MCI_GetControlMode,"ax",%progbits
 1246              		.align	1
 1247              		.p2align 2,,3
 1248              		.weak	MCI_GetControlMode
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1253              	MCI_GetControlMode:
 1254              	.LVL102:
 1255              	.LFB1114:
 985:Src/mc_interface.c **** 
 986:Src/mc_interface.c **** /**
 987:Src/mc_interface.c ****   * @brief  It returns the modality of the speed and torque controller.
 988:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 989:Src/mc_interface.c ****   * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
 990:Src/mc_interface.c ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 991:Src/mc_interface.c ****   */
 992:Src/mc_interface.c **** __weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 993:Src/mc_interface.c **** {
 1256              		.loc 1 993 1 is_stmt 1 view -0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              		@ link register save eliminated.
 994:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 995:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
 996:Src/mc_interface.c **** #else
 997:Src/mc_interface.c ****   return (pHandle->LastModalitySetByUser);
 1261              		.loc 1 997 3 view .LVU365
 998:Src/mc_interface.c **** #endif
 999:Src/mc_interface.c **** }
 1262              		.loc 1 999 1 is_stmt 0 view .LVU366
 1263 0000 90F82900 		ldrb	r0, [r0, #41]	@ zero_extendqisi2
 1264              	.LVL103:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 44


 1265              		.loc 1 999 1 view .LVU367
 1266 0004 7047     		bx	lr
 1267              		.cfi_endproc
 1268              	.LFE1114:
 1270 0006 00BF     		.section	.text.MCI_SetCurrentReferences,"ax",%progbits
 1271              		.align	1
 1272              		.p2align 2,,3
 1273              		.weak	MCI_SetCurrentReferences
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1278              	MCI_SetCurrentReferences:
 1279              	.LVL104:
 1280              	.LFB1095:
 273:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1281              		.loc 1 273 1 is_stmt 1 view -0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 8
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 273:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1285              		.loc 1 273 1 is_stmt 0 view .LVU369
 1286 0000 70B5     		push	{r4, r5, r6, lr}
 1287              	.LCFI15:
 1288              		.cfi_def_cfa_offset 16
 1289              		.cfi_offset 4, -16
 1290              		.cfi_offset 5, -12
 1291              		.cfi_offset 6, -8
 1292              		.cfi_offset 14, -4
 1293 0002 82B0     		sub	sp, sp, #8
 1294              	.LCFI16:
 1295              		.cfi_def_cfa_offset 24
 273:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1296              		.loc 1 273 1 view .LVU370
 1297 0004 0446     		mov	r4, r0
 1298 0006 0191     		str	r1, [sp, #4]
 1299 0008 0EB2     		sxth	r6, r1
 1300              	.LVL105:
 273:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1301              		.loc 1 273 1 view .LVU371
 1302 000a 0D14     		asrs	r5, r1, #16
 1303              	.LVL106:
 283:Src/mc_interface.c ****     mode = MCI_GetControlMode( pHandle );
 1304              		.loc 1 283 5 is_stmt 1 view .LVU372
 284:Src/mc_interface.c ****     if (mode == MCM_OPEN_LOOP_CURRENT_MODE)
 1305              		.loc 1 284 5 view .LVU373
 284:Src/mc_interface.c ****     if (mode == MCM_OPEN_LOOP_CURRENT_MODE)
 1306              		.loc 1 284 12 is_stmt 0 view .LVU374
 1307 000c FFF7FEFF 		bl	MCI_GetControlMode
 1308              	.LVL107:
 285:Src/mc_interface.c ****     {
 1309              		.loc 1 285 5 is_stmt 1 view .LVU375
 285:Src/mc_interface.c ****     {
 1310              		.loc 1 285 8 is_stmt 0 view .LVU376
 1311 0010 0228     		cmp	r0, #2
 1312 0012 08D0     		beq	.L91
 295:Src/mc_interface.c ****       pHandle->Iqdref.q = Iqdref.q;
 1313              		.loc 1 295 7 is_stmt 1 view .LVU377
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 45


 295:Src/mc_interface.c ****       pHandle->Iqdref.q = Iqdref.q;
 1314              		.loc 1 295 28 is_stmt 0 view .LVU378
 1315 0014 0322     		movs	r2, #3
 298:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 1316              		.loc 1 298 29 view .LVU379
 1317 0016 40F20143 		movw	r3, #1025
 295:Src/mc_interface.c ****       pHandle->Iqdref.q = Iqdref.q;
 1318              		.loc 1 295 28 view .LVU380
 1319 001a 2274     		strb	r2, [r4, #16]
 296:Src/mc_interface.c ****       pHandle->Iqdref.d = Iqdref.d;
 1320              		.loc 1 296 7 is_stmt 1 view .LVU381
 296:Src/mc_interface.c ****       pHandle->Iqdref.d = Iqdref.d;
 1321              		.loc 1 296 25 is_stmt 0 view .LVU382
 1322 001c E682     		strh	r6, [r4, #22]	@ movhi
 297:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1323              		.loc 1 297 7 is_stmt 1 view .LVU383
 297:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1324              		.loc 1 297 25 is_stmt 0 view .LVU384
 1325 001e 2583     		strh	r5, [r4, #24]	@ movhi
 298:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 1326              		.loc 1 298 7 is_stmt 1 view .LVU385
 299:Src/mc_interface.c ****     }
 1327              		.loc 1 299 7 view .LVU386
 298:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 1328              		.loc 1 298 29 is_stmt 0 view .LVU387
 1329 0020 2385     		strh	r3, [r4, #40]	@ movhi
 304:Src/mc_interface.c **** 
 1330              		.loc 1 304 1 view .LVU388
 1331 0022 02B0     		add	sp, sp, #8
 1332              	.LCFI17:
 1333              		.cfi_remember_state
 1334              		.cfi_def_cfa_offset 16
 1335              		@ sp needed
 1336 0024 70BD     		pop	{r4, r5, r6, pc}
 1337              	.LVL108:
 1338              	.L91:
 1339              	.LCFI18:
 1340              		.cfi_restore_state
 287:Src/mc_interface.c ****       pHandle->Iqdref.d = Iqdref.d;
 1341              		.loc 1 287 7 is_stmt 1 view .LVU389
 289:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.d = Iqdref.d;
 1342              		.loc 1 289 14 is_stmt 0 view .LVU390
 1343 0026 6368     		ldr	r3, [r4, #4]
 287:Src/mc_interface.c ****       pHandle->Iqdref.d = Iqdref.d;
 1344              		.loc 1 287 25 view .LVU391
 1345 0028 E682     		strh	r6, [r4, #22]	@ movhi
 288:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 1346              		.loc 1 288 7 is_stmt 1 view .LVU392
 288:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.q = Iqdref.q;
 1347              		.loc 1 288 25 is_stmt 0 view .LVU393
 1348 002a 2583     		strh	r5, [r4, #24]	@ movhi
 289:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.d = Iqdref.d;
 1349              		.loc 1 289 7 is_stmt 1 view .LVU394
 289:Src/mc_interface.c ****       pHandle->pFOCVars->Iqdref.d = Iqdref.d;
 1350              		.loc 1 289 35 is_stmt 0 view .LVU395
 1351 002c 1E82     		strh	r6, [r3, #16]	@ movhi
 290:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = mode;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 46


 1352              		.loc 1 290 7 is_stmt 1 view .LVU396
 290:Src/mc_interface.c ****       pHandle->LastModalitySetByUser = mode;
 1353              		.loc 1 290 35 is_stmt 0 view .LVU397
 1354 002e 5D82     		strh	r5, [r3, #18]	@ movhi
 291:Src/mc_interface.c ****     }
 1355              		.loc 1 291 7 is_stmt 1 view .LVU398
 291:Src/mc_interface.c ****     }
 1356              		.loc 1 291 38 is_stmt 0 view .LVU399
 1357 0030 84F82900 		strb	r0, [r4, #41]
 304:Src/mc_interface.c **** 
 1358              		.loc 1 304 1 view .LVU400
 1359 0034 02B0     		add	sp, sp, #8
 1360              	.LCFI19:
 1361              		.cfi_def_cfa_offset 16
 1362              		@ sp needed
 1363 0036 70BD     		pop	{r4, r5, r6, pc}
 304:Src/mc_interface.c **** 
 1364              		.loc 1 304 1 view .LVU401
 1365              		.cfi_endproc
 1366              	.LFE1095:
 1368              		.section	.text.MCI_SetCurrentReferences_F,"ax",%progbits
 1369              		.align	1
 1370              		.p2align 2,,3
 1371              		.weak	MCI_SetCurrentReferences_F
 1372              		.syntax unified
 1373              		.thumb
 1374              		.thumb_func
 1376              	MCI_SetCurrentReferences_F:
 1377              	.LVL109:
 1378              	.LFB1096:
 322:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1379              		.loc 1 322 1 is_stmt 1 view -0
 1380              		.cfi_startproc
 1381              		@ args = 0, pretend = 0, frame = 16
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 331:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 1383              		.loc 1 331 5 view .LVU403
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1384              		.loc 1 332 5 view .LVU404
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1385              		.loc 1 333 30 is_stmt 0 view .LVU405
 1386 0000 FDEEC07A 		vcvt.s32.f32	s15, s0
 322:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1387              		.loc 1 322 1 view .LVU406
 1388 0004 00B5     		push	{lr}
 1389              	.LCFI20:
 1390              		.cfi_def_cfa_offset 4
 1391              		.cfi_offset 14, -4
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1392              		.loc 1 333 30 view .LVU407
 1393 0006 17EE901A 		vmov	r1, s15	@ int
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1394              		.loc 1 332 30 view .LVU408
 1395 000a FDEEE07A 		vcvt.s32.f32	s15, s1
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1396              		.loc 1 333 48 view .LVU409
 1397 000e 01EBC103 		add	r3, r1, r1, lsl #3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 47


 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1398              		.loc 1 332 30 view .LVU410
 1399 0012 17EE90CA 		vmov	ip, s15	@ int
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1400              		.loc 1 332 48 view .LVU411
 1401 0016 0CEBCC02 		add	r2, ip, ip, lsl #3
 1402 001a C2EB4212 		rsb	r2, r2, r2, lsl #5
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1403              		.loc 1 333 48 view .LVU412
 1404 001e C3EB4313 		rsb	r3, r3, r3, lsl #5
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1405              		.loc 1 332 48 view .LVU413
 1406 0022 CCEB4202 		rsb	r2, ip, r2, lsl #1
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1407              		.loc 1 333 48 view .LVU414
 1408 0026 C1EB4303 		rsb	r3, r1, r3, lsl #1
 322:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1409              		.loc 1 322 1 view .LVU415
 1410 002a 85B0     		sub	sp, sp, #20
 1411              	.LCFI21:
 1412              		.cfi_def_cfa_offset 24
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1413              		.loc 1 332 48 view .LVU416
 1414 002c 02EBC202 		add	r2, r2, r2, lsl #3
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1415              		.loc 1 333 48 view .LVU417
 1416 0030 03EBC303 		add	r3, r3, r3, lsl #3
 1417 0034 01EB4303 		add	r3, r1, r3, lsl #1
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1418              		.loc 1 332 48 view .LVU418
 1419 0038 0CEB4202 		add	r2, ip, r2, lsl #1
 332:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 1420              		.loc 1 332 18 view .LVU419
 1421 003c ADF80E20 		strh	r2, [sp, #14]	@ movhi
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1422              		.loc 1 333 5 is_stmt 1 view .LVU420
 333:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 1423              		.loc 1 333 18 is_stmt 0 view .LVU421
 1424 0040 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 334:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1425              		.loc 1 334 5 is_stmt 1 view .LVU422
 1426 0044 0399     		ldr	r1, [sp, #12]
 1427 0046 FFF7FEFF 		bl	MCI_SetCurrentReferences
 1428              	.LVL110:
 338:Src/mc_interface.c **** /**
 1429              		.loc 1 338 1 is_stmt 0 view .LVU423
 1430 004a 05B0     		add	sp, sp, #20
 1431              	.LCFI22:
 1432              		.cfi_def_cfa_offset 4
 1433              		@ sp needed
 1434 004c 5DF804FB 		ldr	pc, [sp], #4
 1435              		.cfi_endproc
 1436              	.LFE1096:
 1438              		.section	.text.MCI_GetImposedMotorDirection,"ax",%progbits
 1439              		.align	1
 1440              		.p2align 2,,3
 1441              		.weak	MCI_GetImposedMotorDirection
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 48


 1442              		.syntax unified
 1443              		.thumb
 1444              		.thumb_func
 1446              	MCI_GetImposedMotorDirection:
 1447              	.LVL111:
 1448              	.LFB1115:
1000:Src/mc_interface.c **** 
1001:Src/mc_interface.c **** /**
1002:Src/mc_interface.c ****   * @brief  It returns the motor direction imposed by the last command
1003:Src/mc_interface.c ****   *         (MCI_ExecSpeedRamp, MCI_ExecTorqueRamp or MCI_SetCurrentReferences).
1004:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1005:Src/mc_interface.c ****   * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
1006:Src/mc_interface.c ****   *         hFinalTorque or Iqdref.q of the last command.
1007:Src/mc_interface.c ****   */
1008:Src/mc_interface.c **** __weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1009:Src/mc_interface.c **** {
 1449              		.loc 1 1009 1 is_stmt 1 view -0
 1450              		.cfi_startproc
 1451              		@ args = 0, pretend = 0, frame = 0
 1452              		@ frame_needed = 0, uses_anonymous_args = 0
 1453              		@ link register save eliminated.
1010:Src/mc_interface.c ****   int16_t retVal = 1;
 1454              		.loc 1 1010 3 view .LVU425
1011:Src/mc_interface.c **** 
1012:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1013:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1014:Src/mc_interface.c ****   {
1015:Src/mc_interface.c ****     /* Nothing to do */
1016:Src/mc_interface.c ****   }
1017:Src/mc_interface.c ****   else
1018:Src/mc_interface.c ****   {
1019:Src/mc_interface.c **** #endif
1020:Src/mc_interface.c ****     switch (pHandle->lastCommand)
 1455              		.loc 1 1020 5 view .LVU426
 1456              		.loc 1 1020 20 is_stmt 0 view .LVU427
 1457 0000 037C     		ldrb	r3, [r0, #16]	@ zero_extendqisi2
 1458              		.loc 1 1020 5 view .LVU428
 1459 0002 022B     		cmp	r3, #2
 1460 0004 05D0     		beq	.L95
 1461 0006 032B     		cmp	r3, #3
 1462 0008 13D0     		beq	.L96
 1463 000a 012B     		cmp	r3, #1
 1464 000c 09D0     		beq	.L102
 1465 000e 0120     		movs	r0, #1
 1466              	.LVL112:
1021:Src/mc_interface.c ****     {
1022:Src/mc_interface.c ****       case MCI_CMD_EXECSPEEDRAMP:
1023:Src/mc_interface.c ****       {
1024:Src/mc_interface.c ****         if (pHandle->hFinalSpeed < 0)
1025:Src/mc_interface.c ****         {
1026:Src/mc_interface.c ****           retVal = -1;
1027:Src/mc_interface.c ****         }
1028:Src/mc_interface.c ****         else
1029:Src/mc_interface.c ****         {
1030:Src/mc_interface.c ****           /* Nothing to do */
1031:Src/mc_interface.c ****         }
1032:Src/mc_interface.c ****         break;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 49


1033:Src/mc_interface.c ****       }
1034:Src/mc_interface.c **** 
1035:Src/mc_interface.c ****       case MCI_CMD_EXECTORQUERAMP:
1036:Src/mc_interface.c ****       {
1037:Src/mc_interface.c ****         if (pHandle->hFinalTorque < 0)
1038:Src/mc_interface.c ****         {
1039:Src/mc_interface.c ****           retVal = -1;
1040:Src/mc_interface.c ****         }
1041:Src/mc_interface.c ****         else
1042:Src/mc_interface.c ****         {
1043:Src/mc_interface.c ****           /* Nothing to do */
1044:Src/mc_interface.c ****         }
1045:Src/mc_interface.c ****         break;
1046:Src/mc_interface.c ****       }
1047:Src/mc_interface.c **** 
1048:Src/mc_interface.c ****       case MCI_CMD_SETCURRENTREFERENCES:
1049:Src/mc_interface.c ****       {
1050:Src/mc_interface.c ****         if (pHandle->Iqdref.q < 0)
1051:Src/mc_interface.c ****         {
1052:Src/mc_interface.c ****           retVal = -1;
1053:Src/mc_interface.c ****         }
1054:Src/mc_interface.c ****         else
1055:Src/mc_interface.c ****         {
1056:Src/mc_interface.c ****           /* Nothing to do */
1057:Src/mc_interface.c ****         }
1058:Src/mc_interface.c ****         break;
1059:Src/mc_interface.c ****        }
1060:Src/mc_interface.c ****       default:
1061:Src/mc_interface.c ****         break;
1062:Src/mc_interface.c ****     }
1063:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1064:Src/mc_interface.c ****   }
1065:Src/mc_interface.c **** #endif
1066:Src/mc_interface.c ****   return (retVal);
 1467              		.loc 1 1066 3 is_stmt 1 view .LVU429
1067:Src/mc_interface.c **** }
 1468              		.loc 1 1067 1 is_stmt 0 view .LVU430
 1469 0010 7047     		bx	lr
 1470              	.LVL113:
 1471              	.L95:
1037:Src/mc_interface.c ****         {
 1472              		.loc 1 1037 9 is_stmt 1 view .LVU431
1037:Src/mc_interface.c ****         {
 1473              		.loc 1 1037 12 is_stmt 0 view .LVU432
 1474 0012 B0F91430 		ldrsh	r3, [r0, #20]
1026:Src/mc_interface.c ****         }
 1475              		.loc 1 1026 18 view .LVU433
 1476 0016 002B     		cmp	r3, #0
 1477 0018 ACBF     		ite	ge
 1478 001a 0120     		movge	r0, #1
 1479              	.LVL114:
1026:Src/mc_interface.c ****         }
 1480              		.loc 1 1026 18 view .LVU434
 1481 001c 4FF0FF30 		movlt	r0, #-1
 1482 0020 7047     		bx	lr
 1483              	.LVL115:
 1484              	.L102:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 50


1024:Src/mc_interface.c ****         {
 1485              		.loc 1 1024 9 is_stmt 1 view .LVU435
1024:Src/mc_interface.c ****         {
 1486              		.loc 1 1024 12 is_stmt 0 view .LVU436
 1487 0022 B0F91230 		ldrsh	r3, [r0, #18]
1026:Src/mc_interface.c ****         }
 1488              		.loc 1 1026 18 view .LVU437
 1489 0026 002B     		cmp	r3, #0
 1490 0028 ACBF     		ite	ge
 1491 002a 0120     		movge	r0, #1
 1492              	.LVL116:
1026:Src/mc_interface.c ****         }
 1493              		.loc 1 1026 18 view .LVU438
 1494 002c 4FF0FF30 		movlt	r0, #-1
 1495 0030 7047     		bx	lr
 1496              	.LVL117:
 1497              	.L96:
1050:Src/mc_interface.c ****         {
 1498              		.loc 1 1050 9 is_stmt 1 view .LVU439
1050:Src/mc_interface.c ****         {
 1499              		.loc 1 1050 12 is_stmt 0 view .LVU440
 1500 0032 B0F91630 		ldrsh	r3, [r0, #22]
1026:Src/mc_interface.c ****         }
 1501              		.loc 1 1026 18 view .LVU441
 1502 0036 002B     		cmp	r3, #0
 1503 0038 ACBF     		ite	ge
 1504 003a 0120     		movge	r0, #1
 1505              	.LVL118:
1026:Src/mc_interface.c ****         }
 1506              		.loc 1 1026 18 view .LVU442
 1507 003c 4FF0FF30 		movlt	r0, #-1
 1508 0040 7047     		bx	lr
 1509              		.cfi_endproc
 1510              	.LFE1115:
 1512 0042 00BF     		.section	.text.MCI_GetLastRampFinalSpeed,"ax",%progbits
 1513              		.align	1
 1514              		.p2align 2,,3
 1515              		.weak	MCI_GetLastRampFinalSpeed
 1516              		.syntax unified
 1517              		.thumb
 1518              		.thumb_func
 1520              	MCI_GetLastRampFinalSpeed:
 1521              	.LVL119:
 1522              	.LFB1116:
1068:Src/mc_interface.c **** 
1069:Src/mc_interface.c **** /**
1070:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final speed sent by the
1071:Src/mc_interface.c ****   *         user expressed in the unit defined by #SPEED_UNIT.
1072:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1073:Src/mc_interface.c ****   * @retval int16_t last ramp final speed sent by the user expressed in
1074:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT.
1075:Src/mc_interface.c ****   */
1076:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1077:Src/mc_interface.c **** {
 1523              		.loc 1 1077 1 is_stmt 1 view -0
 1524              		.cfi_startproc
 1525              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 51


 1526              		@ frame_needed = 0, uses_anonymous_args = 0
 1527              		@ link register save eliminated.
1078:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1079:Src/mc_interface.c ****   int16_t retVal = 0;
1080:Src/mc_interface.c **** 
1081:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1082:Src/mc_interface.c ****   {
1083:Src/mc_interface.c ****     /* Nothing to do */
1084:Src/mc_interface.c ****   }
1085:Src/mc_interface.c ****   else
1086:Src/mc_interface.c ****   {
1087:Src/mc_interface.c ****     retVal = pHandle->hFinalSpeed;
1088:Src/mc_interface.c ****   }
1089:Src/mc_interface.c ****   return (retVal);
1090:Src/mc_interface.c **** #else
1091:Src/mc_interface.c ****   return (pHandle->hFinalSpeed);
 1528              		.loc 1 1091 3 view .LVU444
1092:Src/mc_interface.c **** #endif
1093:Src/mc_interface.c **** }
 1529              		.loc 1 1093 1 is_stmt 0 view .LVU445
 1530 0000 B0F91200 		ldrsh	r0, [r0, #18]
 1531              	.LVL120:
 1532              		.loc 1 1093 1 view .LVU446
 1533 0004 7047     		bx	lr
 1534              		.cfi_endproc
 1535              	.LFE1116:
 1537 0006 00BF     		.section	.text.MCI_GetLastRampFinalTorque,"ax",%progbits
 1538              		.align	1
 1539              		.p2align 2,,3
 1540              		.weak	MCI_GetLastRampFinalTorque
 1541              		.syntax unified
 1542              		.thumb
 1543              		.thumb_func
 1545              	MCI_GetLastRampFinalTorque:
 1546              	.LVL121:
 1547              	.LFB1117:
1094:Src/mc_interface.c **** 
1095:Src/mc_interface.c **** /**
1096:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
1097:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
1098:Src/mc_interface.c ****   *         digit.
1099:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1100:Src/mc_interface.c ****   * @retval int16_t last ramp final torque sent by the user expressed in digit
1101:Src/mc_interface.c ****   */
1102:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1103:Src/mc_interface.c **** {
 1548              		.loc 1 1103 1 is_stmt 1 view -0
 1549              		.cfi_startproc
 1550              		@ args = 0, pretend = 0, frame = 0
 1551              		@ frame_needed = 0, uses_anonymous_args = 0
 1552              		@ link register save eliminated.
1104:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1105:Src/mc_interface.c ****   int16_t retVal = 0;
1106:Src/mc_interface.c **** 
1107:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1108:Src/mc_interface.c ****   {
1109:Src/mc_interface.c ****     /* Nothing to do */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 52


1110:Src/mc_interface.c ****   }
1111:Src/mc_interface.c ****   else
1112:Src/mc_interface.c ****   {
1113:Src/mc_interface.c ****     retVal = pHandle->hFinalTorque;
1114:Src/mc_interface.c ****   }
1115:Src/mc_interface.c ****   return (retVal);
1116:Src/mc_interface.c **** #else
1117:Src/mc_interface.c ****   return (pHandle->hFinalTorque);
 1553              		.loc 1 1117 3 view .LVU448
1118:Src/mc_interface.c **** #endif
1119:Src/mc_interface.c **** }
 1554              		.loc 1 1119 1 is_stmt 0 view .LVU449
 1555 0000 B0F91400 		ldrsh	r0, [r0, #20]
 1556              	.LVL122:
 1557              		.loc 1 1119 1 view .LVU450
 1558 0004 7047     		bx	lr
 1559              		.cfi_endproc
 1560              	.LFE1117:
 1562 0006 00BF     		.section	.text.MCI_GetLastRampFinalDuration,"ax",%progbits
 1563              		.align	1
 1564              		.p2align 2,,3
 1565              		.weak	MCI_GetLastRampFinalDuration
 1566              		.syntax unified
 1567              		.thumb
 1568              		.thumb_func
 1570              	MCI_GetLastRampFinalDuration:
 1571              	.LVL123:
 1572              	.LFB1118:
1120:Src/mc_interface.c **** 
1121:Src/mc_interface.c **** /**
1122:Src/mc_interface.c ****   * @brief  It returns information about the last ramp Duration sent by the
1123:Src/mc_interface.c ****   *         user .
1124:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1125:Src/mc_interface.c ****   * @retval uint16_t last ramp final torque sent by the user expressed in digit
1126:Src/mc_interface.c ****   */
1127:Src/mc_interface.c **** __weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1128:Src/mc_interface.c **** {
 1573              		.loc 1 1128 1 is_stmt 1 view -0
 1574              		.cfi_startproc
 1575              		@ args = 0, pretend = 0, frame = 0
 1576              		@ frame_needed = 0, uses_anonymous_args = 0
 1577              		@ link register save eliminated.
1129:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1130:Src/mc_interface.c ****   uint16_t retVal = 0;
1131:Src/mc_interface.c **** 
1132:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1133:Src/mc_interface.c ****   {
1134:Src/mc_interface.c ****     /* Nothing to do */
1135:Src/mc_interface.c ****   }
1136:Src/mc_interface.c ****   else
1137:Src/mc_interface.c ****   {
1138:Src/mc_interface.c ****     retVal = pHandle->hDurationms;
1139:Src/mc_interface.c ****   }
1140:Src/mc_interface.c ****   return (retVal);
1141:Src/mc_interface.c **** #else
1142:Src/mc_interface.c ****   return (pHandle->hDurationms);
 1578              		.loc 1 1142 3 view .LVU452
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 53


1143:Src/mc_interface.c **** #endif
1144:Src/mc_interface.c **** }
 1579              		.loc 1 1144 1 is_stmt 0 view .LVU453
 1580 0000 008C     		ldrh	r0, [r0, #32]
 1581              	.LVL124:
 1582              		.loc 1 1144 1 view .LVU454
 1583 0002 7047     		bx	lr
 1584              		.cfi_endproc
 1585              	.LFE1118:
 1587              		.section	.text.MCI_GetLastRampFinalSpeed_F,"ax",%progbits
 1588              		.align	1
 1589              		.p2align 2,,3
 1590              		.weak	MCI_GetLastRampFinalSpeed_F
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1595              	MCI_GetLastRampFinalSpeed_F:
 1596              	.LVL125:
 1597              	.LFB1119:
1145:Src/mc_interface.c **** 
1146:Src/mc_interface.c **** /**
1147:Src/mc_interface.c ****   * @brief  It returns last ramp final speed expressed in rpm.
1148:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1149:Src/mc_interface.c ****   * @retval float_t last ramp final speed sent by the user expressed in rpm.
1150:Src/mc_interface.c ****   */
1151:Src/mc_interface.c **** __weak float_t MCI_GetLastRampFinalSpeed_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1152:Src/mc_interface.c **** {
 1598              		.loc 1 1152 1 is_stmt 1 view -0
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 0
 1601              		@ frame_needed = 0, uses_anonymous_args = 0
 1602              		@ link register save eliminated.
1153:Src/mc_interface.c ****   float_t reVal = 0.0f;
 1603              		.loc 1 1153 3 view .LVU456
1154:Src/mc_interface.c **** 
1155:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 1604              		.loc 1 1155 3 view .LVU457
 1605              		.loc 1 1155 6 is_stmt 0 view .LVU458
 1606 0000 70B1     		cbz	r0, .L108
1156:Src/mc_interface.c ****   {
1157:Src/mc_interface.c ****     /* Nothing to do */
1158:Src/mc_interface.c ****   }
1159:Src/mc_interface.c ****   else
1160:Src/mc_interface.c ****   {
1161:Src/mc_interface.c ****     reVal = (((float_t)pHandle->hFinalSpeed * (float_t)U_RPM) / (float_t)SPEED_UNIT);
 1607              		.loc 1 1161 5 is_stmt 1 view .LVU459
 1608              		.loc 1 1161 15 is_stmt 0 view .LVU460
 1609 0002 B0F91230 		ldrsh	r3, [r0, #18]
 1610              		.loc 1 1161 45 view .LVU461
 1611 0006 DFED086A 		vldr.32	s13, .L109
 1612              		.loc 1 1161 15 view .LVU462
 1613 000a 07EE903A 		vmov	s15, r3	@ int
 1614 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 1615              		.loc 1 1161 11 view .LVU463
 1616 0012 B2EE047A 		vmov.f32	s14, #1.0e+1
 1617              		.loc 1 1161 45 view .LVU464
 1618 0016 67EEA67A 		vmul.f32	s15, s15, s13
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 54


 1619              		.loc 1 1161 11 view .LVU465
 1620 001a 87EE870A 		vdiv.f32	s0, s15, s14
 1621              	.LVL126:
 1622              		.loc 1 1161 11 view .LVU466
 1623 001e 7047     		bx	lr
 1624              	.LVL127:
 1625              	.L108:
1153:Src/mc_interface.c **** 
 1626              		.loc 1 1153 11 view .LVU467
 1627 0020 9FED020A 		vldr.32	s0, .L109+4
1162:Src/mc_interface.c ****   }
1163:Src/mc_interface.c ****   return (reVal);
 1628              		.loc 1 1163 3 is_stmt 1 view .LVU468
1164:Src/mc_interface.c **** }
 1629              		.loc 1 1164 1 is_stmt 0 view .LVU469
 1630 0024 7047     		bx	lr
 1631              	.L110:
 1632 0026 00BF     		.align	2
 1633              	.L109:
 1634 0028 00007042 		.word	1114636288
 1635 002c 00000000 		.word	0
 1636              		.cfi_endproc
 1637              	.LFE1119:
 1639              		.section	.text.MCI_RampCompleted,"ax",%progbits
 1640              		.align	1
 1641              		.p2align 2,,3
 1642              		.weak	MCI_RampCompleted
 1643              		.syntax unified
 1644              		.thumb
 1645              		.thumb_func
 1647              	MCI_RampCompleted:
 1648              	.LVL128:
 1649              	.LFB1120:
1165:Src/mc_interface.c **** 
1166:Src/mc_interface.c **** /**
1167:Src/mc_interface.c ****   * @brief  Check if the settled speed or torque ramp has been completed.
1168:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1169:Src/mc_interface.c ****   * @retval bool It returns true if the ramp is completed, false otherwise.
1170:Src/mc_interface.c ****   */
1171:Src/mc_interface.c **** __weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
1172:Src/mc_interface.c **** {
 1650              		.loc 1 1172 1 is_stmt 1 view -0
 1651              		.cfi_startproc
 1652              		@ args = 0, pretend = 0, frame = 0
 1653              		@ frame_needed = 0, uses_anonymous_args = 0
1173:Src/mc_interface.c ****   bool retVal = false;
 1654              		.loc 1 1173 3 view .LVU471
1174:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1175:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1176:Src/mc_interface.c ****   {
1177:Src/mc_interface.c ****     /* Nothing to do */
1178:Src/mc_interface.c ****   }
1179:Src/mc_interface.c ****   else
1180:Src/mc_interface.c ****   {
1181:Src/mc_interface.c **** #endif
1182:Src/mc_interface.c ****     if (RUN == MCI_GetSTMState(pHandle))
 1655              		.loc 1 1182 5 view .LVU472
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 55


1172:Src/mc_interface.c ****   bool retVal = false;
 1656              		.loc 1 1172 1 is_stmt 0 view .LVU473
 1657 0000 10B5     		push	{r4, lr}
 1658              	.LCFI23:
 1659              		.cfi_def_cfa_offset 8
 1660              		.cfi_offset 4, -8
 1661              		.cfi_offset 14, -4
1172:Src/mc_interface.c ****   bool retVal = false;
 1662              		.loc 1 1172 1 view .LVU474
 1663 0002 0446     		mov	r4, r0
 1664              		.loc 1 1182 16 view .LVU475
 1665 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1666              	.LVL129:
 1667              		.loc 1 1182 8 view .LVU476
 1668 0008 0628     		cmp	r0, #6
 1669 000a 01D0     		beq	.L114
1183:Src/mc_interface.c ****     {
1184:Src/mc_interface.c ****       retVal = STC_RampCompleted(pHandle->pSTC);
1185:Src/mc_interface.c ****     }
1186:Src/mc_interface.c ****     else
1187:Src/mc_interface.c ****     {
1188:Src/mc_interface.c ****       /* Nothing to do */
1189:Src/mc_interface.c ****     }
 1670              		.loc 1 1189 5 is_stmt 1 view .LVU477
1190:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1191:Src/mc_interface.c ****   }
1192:Src/mc_interface.c **** #endif
1193:Src/mc_interface.c ****   return (retVal);
 1671              		.loc 1 1193 3 view .LVU478
1194:Src/mc_interface.c **** }
 1672              		.loc 1 1194 1 is_stmt 0 view .LVU479
 1673 000c 0020     		movs	r0, #0
 1674 000e 10BD     		pop	{r4, pc}
 1675              	.LVL130:
 1676              	.L114:
1184:Src/mc_interface.c ****     }
 1677              		.loc 1 1184 7 is_stmt 1 view .LVU480
1184:Src/mc_interface.c ****     }
 1678              		.loc 1 1184 16 is_stmt 0 view .LVU481
 1679 0010 2068     		ldr	r0, [r4]
 1680              		.loc 1 1194 1 view .LVU482
 1681 0012 BDE81040 		pop	{r4, lr}
 1682              	.LCFI24:
 1683              		.cfi_restore 14
 1684              		.cfi_restore 4
 1685              		.cfi_def_cfa_offset 0
 1686              	.LVL131:
1184:Src/mc_interface.c ****     }
 1687              		.loc 1 1184 16 view .LVU483
 1688 0016 FFF7FEBF 		b	STC_RampCompleted
 1689              	.LVL132:
 1690              		.cfi_endproc
 1691              	.LFE1120:
 1693 001a 00BF     		.section	.text.MCI_StopSpeedRamp,"ax",%progbits
 1694              		.align	1
 1695              		.p2align 2,,3
 1696              		.weak	MCI_StopSpeedRamp
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 56


 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1701              	MCI_StopSpeedRamp:
 1702              	.LVL133:
 1703              	.LFB1121:
1195:Src/mc_interface.c **** 
1196:Src/mc_interface.c **** /**
1197:Src/mc_interface.c ****   * @brief  Stop the execution of speed ramp.
1198:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1199:Src/mc_interface.c ****   * @retval bool It returns true if the command is executed, false otherwise.
1200:Src/mc_interface.c ****   *
1201:Src/mc_interface.c ****   * @deprecated This function is deprecated and should not be used anymore. It will be
1202:Src/mc_interface.c ****   *             removed in a future version of the MCSDK. Use MCI_StopRamp() instead.
1203:Src/mc_interface.c ****   */
1204:Src/mc_interface.c **** __weak bool MCI_StopSpeedRamp(MCI_Handle_t *pHandle)
1205:Src/mc_interface.c **** {
 1704              		.loc 1 1205 1 is_stmt 1 view -0
 1705              		.cfi_startproc
 1706              		@ args = 0, pretend = 0, frame = 0
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              		@ link register save eliminated.
1206:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1207:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? false : STC_StopSpeedRamp(pHandle->pSTC));
1208:Src/mc_interface.c **** #else
1209:Src/mc_interface.c ****   return (STC_StopSpeedRamp(pHandle->pSTC));
 1709              		.loc 1 1209 3 view .LVU485
 1710              		.loc 1 1209 11 is_stmt 0 view .LVU486
 1711 0000 0068     		ldr	r0, [r0]
 1712              	.LVL134:
 1713              		.loc 1 1209 11 view .LVU487
 1714 0002 FFF7FEBF 		b	STC_StopSpeedRamp
 1715              	.LVL135:
 1716              		.cfi_endproc
 1717              	.LFE1121:
 1719 0006 00BF     		.section	.text.MCI_StopRamp,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.weak	MCI_StopRamp
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1727              	MCI_StopRamp:
 1728              	.LVL136:
 1729              	.LFB1122:
1210:Src/mc_interface.c **** #endif
1211:Src/mc_interface.c **** }
1212:Src/mc_interface.c **** 
1213:Src/mc_interface.c **** /**
1214:Src/mc_interface.c ****   * @brief  Stop the execution of ongoing ramp.
1215:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1216:Src/mc_interface.c ****   */
1217:Src/mc_interface.c **** __weak void MCI_StopRamp(MCI_Handle_t *pHandle)
1218:Src/mc_interface.c **** {
 1730              		.loc 1 1218 1 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 57


 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
1219:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1220:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1221:Src/mc_interface.c ****   {
1222:Src/mc_interface.c ****     /* Nothing to do */
1223:Src/mc_interface.c ****   }
1224:Src/mc_interface.c ****   else
1225:Src/mc_interface.c ****   {
1226:Src/mc_interface.c **** #endif
1227:Src/mc_interface.c ****     STC_StopRamp(pHandle->pSTC);
 1735              		.loc 1 1227 5 view .LVU489
 1736 0000 0068     		ldr	r0, [r0]
 1737              	.LVL137:
 1738              		.loc 1 1227 5 is_stmt 0 view .LVU490
 1739 0002 FFF7FEBF 		b	STC_StopRamp
 1740              	.LVL138:
 1741              		.cfi_endproc
 1742              	.LFE1122:
 1744 0006 00BF     		.section	.text.MCI_GetSpdSensorReliability,"ax",%progbits
 1745              		.align	1
 1746              		.p2align 2,,3
 1747              		.weak	MCI_GetSpdSensorReliability
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1752              	MCI_GetSpdSensorReliability:
 1753              	.LVL139:
 1754              	.LFB1123:
1228:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1229:Src/mc_interface.c ****   }
1230:Src/mc_interface.c **** #endif
1231:Src/mc_interface.c **** }
1232:Src/mc_interface.c **** 
1233:Src/mc_interface.c **** /**
1234:Src/mc_interface.c ****   * @brief  It returns speed sensor reliability with reference to the sensor
1235:Src/mc_interface.c ****   *         actually used for reference frame transformation
1236:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1237:Src/mc_interface.c ****   * @retval bool It returns true if the speed sensor utilized for reference
1238:Src/mc_interface.c ****   *         frame transformation and (in speed control mode) for speed
1239:Src/mc_interface.c ****   *         regulation is reliable, false otherwise
1240:Src/mc_interface.c ****   */
1241:Src/mc_interface.c **** __weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
1242:Src/mc_interface.c **** {
 1755              		.loc 1 1242 1 is_stmt 1 view -0
 1756              		.cfi_startproc
 1757              		@ args = 0, pretend = 0, frame = 0
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
1243:Src/mc_interface.c ****   bool status;
 1759              		.loc 1 1243 3 view .LVU492
1244:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1245:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1246:Src/mc_interface.c ****   {
1247:Src/mc_interface.c ****     status = false;
1248:Src/mc_interface.c ****   }
1249:Src/mc_interface.c ****   else
1250:Src/mc_interface.c ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 58


1251:Src/mc_interface.c **** #endif
1252:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1760              		.loc 1 1252 5 view .LVU493
1242:Src/mc_interface.c ****   bool status;
 1761              		.loc 1 1242 1 is_stmt 0 view .LVU494
 1762 0000 08B5     		push	{r3, lr}
 1763              	.LCFI25:
 1764              		.cfi_def_cfa_offset 8
 1765              		.cfi_offset 3, -8
 1766              		.cfi_offset 14, -4
 1767              		.loc 1 1252 43 view .LVU495
 1768 0002 0068     		ldr	r0, [r0]
 1769              	.LVL140:
 1770              		.loc 1 1252 43 view .LVU496
 1771 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1772              	.LVL141:
1253:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1773              		.loc 1 1253 5 is_stmt 1 view .LVU497
1254:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1255:Src/mc_interface.c ****   }
1256:Src/mc_interface.c **** #endif
1257:Src/mc_interface.c **** 
1258:Src/mc_interface.c ****   return (status);
1259:Src/mc_interface.c **** }
 1774              		.loc 1 1259 1 is_stmt 0 view .LVU498
 1775 0008 BDE80840 		pop	{r3, lr}
 1776              	.LCFI26:
 1777              		.cfi_restore 14
 1778              		.cfi_restore 3
 1779              		.cfi_def_cfa_offset 0
1253:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1780              		.loc 1 1253 14 view .LVU499
 1781 000c FFF7FEBF 		b	SPD_Check
 1782              	.LVL142:
1253:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1783              		.loc 1 1253 14 view .LVU500
 1784              		.cfi_endproc
 1785              	.LFE1123:
 1787              		.section	.text.MCI_GetAvrgMecSpeedUnit,"ax",%progbits
 1788              		.align	1
 1789              		.p2align 2,,3
 1790              		.weak	MCI_GetAvrgMecSpeedUnit
 1791              		.syntax unified
 1792              		.thumb
 1793              		.thumb_func
 1795              	MCI_GetAvrgMecSpeedUnit:
 1796              	.LVL143:
 1797              	.LFB1124:
1260:Src/mc_interface.c **** 
1261:Src/mc_interface.c **** /**
1262:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in
1263:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT and related to the sensor actually
1264:Src/mc_interface.c ****   *         used by FOC algorithm
1265:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1266:Src/mc_interface.c ****   */
1267:Src/mc_interface.c **** __weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
1268:Src/mc_interface.c **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 59


 1798              		.loc 1 1268 1 is_stmt 1 view -0
 1799              		.cfi_startproc
 1800              		@ args = 0, pretend = 0, frame = 0
 1801              		@ frame_needed = 0, uses_anonymous_args = 0
1269:Src/mc_interface.c ****   int16_t temp_speed;
 1802              		.loc 1 1269 3 view .LVU502
1270:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1271:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1272:Src/mc_interface.c ****   {
1273:Src/mc_interface.c ****     temp_speed = 0;
1274:Src/mc_interface.c ****   }
1275:Src/mc_interface.c ****   else
1276:Src/mc_interface.c ****   {
1277:Src/mc_interface.c **** #endif
1278:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1803              		.loc 1 1278 5 view .LVU503
1268:Src/mc_interface.c ****   int16_t temp_speed;
 1804              		.loc 1 1268 1 is_stmt 0 view .LVU504
 1805 0000 08B5     		push	{r3, lr}
 1806              	.LCFI27:
 1807              		.cfi_def_cfa_offset 8
 1808              		.cfi_offset 3, -8
 1809              		.cfi_offset 14, -4
 1810              		.loc 1 1278 44 view .LVU505
 1811 0002 0068     		ldr	r0, [r0]
 1812              	.LVL144:
 1813              		.loc 1 1278 44 view .LVU506
 1814 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1815              	.LVL145:
1279:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1816              		.loc 1 1279 5 is_stmt 1 view .LVU507
1280:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1281:Src/mc_interface.c ****   }
1282:Src/mc_interface.c **** #endif
1283:Src/mc_interface.c ****   return (temp_speed);
1284:Src/mc_interface.c **** }
 1817              		.loc 1 1284 1 is_stmt 0 view .LVU508
 1818 0008 BDE80840 		pop	{r3, lr}
 1819              	.LCFI28:
 1820              		.cfi_restore 14
 1821              		.cfi_restore 3
 1822              		.cfi_def_cfa_offset 0
1279:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1823              		.loc 1 1279 18 view .LVU509
 1824 000c FFF7FEBF 		b	SPD_GetAvrgMecSpeedUnit
 1825              	.LVL146:
1279:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1826              		.loc 1 1279 18 view .LVU510
 1827              		.cfi_endproc
 1828              	.LFE1124:
 1830              		.section	.text.MCI_GetAvrgMecSpeed_F,"ax",%progbits
 1831              		.align	1
 1832              		.p2align 2,,3
 1833              		.weak	MCI_GetAvrgMecSpeed_F
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 60


 1838              	MCI_GetAvrgMecSpeed_F:
 1839              	.LVL147:
 1840              	.LFB1125:
1285:Src/mc_interface.c **** 
1286:Src/mc_interface.c **** /**
1287:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in rpm
1288:Src/mc_interface.c ****   *         and related to the sensor actually used by FOC algorithm.
1289:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1290:Src/mc_interface.c ****   */
1291:Src/mc_interface.c **** __weak float_t MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
1292:Src/mc_interface.c **** {
 1841              		.loc 1 1292 1 is_stmt 1 view -0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 0
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
1293:Src/mc_interface.c ****   float_t returnAvrgSpeed;
 1845              		.loc 1 1293 3 view .LVU512
1294:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1295:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1296:Src/mc_interface.c ****   {
1297:Src/mc_interface.c ****     returnAvrgSpeed = 0.0f;
1298:Src/mc_interface.c ****   }
1299:Src/mc_interface.c ****   else
1300:Src/mc_interface.c ****   {
1301:Src/mc_interface.c **** #endif
1302:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1846              		.loc 1 1302 5 view .LVU513
1292:Src/mc_interface.c ****   float_t returnAvrgSpeed;
 1847              		.loc 1 1292 1 is_stmt 0 view .LVU514
 1848 0000 08B5     		push	{r3, lr}
 1849              	.LCFI29:
 1850              		.cfi_def_cfa_offset 8
 1851              		.cfi_offset 3, -8
 1852              		.cfi_offset 14, -4
 1853              		.loc 1 1302 43 view .LVU515
 1854 0002 0068     		ldr	r0, [r0]
 1855              	.LVL148:
 1856              		.loc 1 1302 43 view .LVU516
 1857 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1858              	.LVL149:
1303:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1859              		.loc 1 1303 5 is_stmt 1 view .LVU517
 1860              		.loc 1 1303 34 is_stmt 0 view .LVU518
 1861 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1862              	.LVL150:
1304:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1305:Src/mc_interface.c ****   }
1306:Src/mc_interface.c **** #endif
1307:Src/mc_interface.c ****   return (returnAvrgSpeed);
 1863              		.loc 1 1307 3 is_stmt 1 view .LVU519
1303:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1864              		.loc 1 1303 25 is_stmt 0 view .LVU520
 1865 000c 07EE900A 		vmov	s15, r0	@ int
1303:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1866              		.loc 1 1303 71 view .LVU521
 1867 0010 9FED057A 		vldr.32	s14, .L123
1303:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 61


 1868              		.loc 1 1303 25 view .LVU522
 1869 0014 F8EEE77A 		vcvt.f32.s32	s15, s15
1303:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1870              		.loc 1 1303 21 view .LVU523
 1871 0018 B2EE040A 		vmov.f32	s0, #1.0e+1
1303:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1872              		.loc 1 1303 71 view .LVU524
 1873 001c 67EE877A 		vmul.f32	s15, s15, s14
1308:Src/mc_interface.c **** }
 1874              		.loc 1 1308 1 view .LVU525
 1875 0020 87EE800A 		vdiv.f32	s0, s15, s0
 1876 0024 08BD     		pop	{r3, pc}
 1877              	.L124:
 1878 0026 00BF     		.align	2
 1879              	.L123:
 1880 0028 00007042 		.word	1114636288
 1881              		.cfi_endproc
 1882              	.LFE1125:
 1884              		.section	.text.MCI_GetMecSpeedRefUnit,"ax",%progbits
 1885              		.align	1
 1886              		.p2align 2,,3
 1887              		.weak	MCI_GetMecSpeedRefUnit
 1888              		.syntax unified
 1889              		.thumb
 1890              		.thumb_func
 1892              	MCI_GetMecSpeedRefUnit:
 1893              	.LVL151:
 1894              	.LFB1126:
1309:Src/mc_interface.c **** 
1310:Src/mc_interface.c **** /**
1311:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in the unit defined by #
1312:Src/mc_interface.c ****   *
1313:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1314:Src/mc_interface.c ****   *
1315:Src/mc_interface.c ****   */
1316:Src/mc_interface.c **** __weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
1317:Src/mc_interface.c **** {
 1895              		.loc 1 1317 1 is_stmt 1 view -0
 1896              		.cfi_startproc
 1897              		@ args = 0, pretend = 0, frame = 0
 1898              		@ frame_needed = 0, uses_anonymous_args = 0
 1899              		@ link register save eliminated.
1318:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1319:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
1320:Src/mc_interface.c **** #else
1321:Src/mc_interface.c ****   return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 1900              		.loc 1 1321 3 view .LVU527
 1901              		.loc 1 1321 11 is_stmt 0 view .LVU528
 1902 0000 0068     		ldr	r0, [r0]
 1903              	.LVL152:
 1904              		.loc 1 1321 11 view .LVU529
 1905 0002 FFF7FEBF 		b	STC_GetMecSpeedRefUnit
 1906              	.LVL153:
 1907              		.cfi_endproc
 1908              	.LFE1126:
 1910 0006 00BF     		.section	.text.MCI_GetMecSpeedRef_F,"ax",%progbits
 1911              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 62


 1912              		.p2align 2,,3
 1913              		.weak	MCI_GetMecSpeedRef_F
 1914              		.syntax unified
 1915              		.thumb
 1916              		.thumb_func
 1918              	MCI_GetMecSpeedRef_F:
 1919              	.LVL154:
 1920              	.LFB1127:
1322:Src/mc_interface.c **** #endif
1323:Src/mc_interface.c **** }
1324:Src/mc_interface.c **** 
1325:Src/mc_interface.c **** /**
1326:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in rpm.
1327:Src/mc_interface.c ****   *
1328:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1329:Src/mc_interface.c ****   *
1330:Src/mc_interface.c ****   */
1331:Src/mc_interface.c **** __weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
1332:Src/mc_interface.c **** {
 1921              		.loc 1 1332 1 is_stmt 1 view -0
 1922              		.cfi_startproc
 1923              		@ args = 0, pretend = 0, frame = 0
 1924              		@ frame_needed = 0, uses_anonymous_args = 0
1333:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1334:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0.0f :
1335:Src/mc_interface.c ****           (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT)
1336:Src/mc_interface.c **** #else
1337:Src/mc_interface.c ****   return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT)
 1925              		.loc 1 1337 3 view .LVU531
1332:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1926              		.loc 1 1332 1 is_stmt 0 view .LVU532
 1927 0000 08B5     		push	{r3, lr}
 1928              	.LCFI30:
 1929              		.cfi_def_cfa_offset 8
 1930              		.cfi_offset 3, -8
 1931              		.cfi_offset 14, -4
 1932              		.loc 1 1337 22 view .LVU533
 1933 0002 0068     		ldr	r0, [r0]
 1934              	.LVL155:
 1935              		.loc 1 1337 22 view .LVU534
 1936 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1937              	.LVL156:
 1938              		.loc 1 1337 13 view .LVU535
 1939 0008 07EE900A 		vmov	s15, r0	@ int
 1940              		.loc 1 1337 60 view .LVU536
 1941 000c 9FED057A 		vldr.32	s14, .L128
 1942              		.loc 1 1337 13 view .LVU537
 1943 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 1944              		.loc 1 1337 78 view .LVU538
 1945 0014 B2EE040A 		vmov.f32	s0, #1.0e+1
 1946              		.loc 1 1337 60 view .LVU539
 1947 0018 67EE877A 		vmul.f32	s15, s15, s14
1338:Src/mc_interface.c **** #endif
1339:Src/mc_interface.c **** }
 1948              		.loc 1 1339 1 view .LVU540
 1949 001c 87EE800A 		vdiv.f32	s0, s15, s0
 1950 0020 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 63


 1951              	.L129:
 1952 0022 00BF     		.align	2
 1953              	.L128:
 1954 0024 00007042 		.word	1114636288
 1955              		.cfi_endproc
 1956              	.LFE1127:
 1958              		.section	.text.MCI_GetIab,"ax",%progbits
 1959              		.align	1
 1960              		.p2align 2,,3
 1961              		.weak	MCI_GetIab
 1962              		.syntax unified
 1963              		.thumb
 1964              		.thumb_func
 1966              	MCI_GetIab:
 1967              	.LVL157:
 1968              	.LFB1128:
1340:Src/mc_interface.c **** 
1341:Src/mc_interface.c **** /**
1342:Src/mc_interface.c ****   * @brief  It returns stator current Iab in ab_t format
1343:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1344:Src/mc_interface.c ****   * @retval ab_t Stator current Iab
1345:Src/mc_interface.c ****   */
1346:Src/mc_interface.c **** __weak ab_t MCI_GetIab(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1347:Src/mc_interface.c **** {
 1969              		.loc 1 1347 1 is_stmt 1 view -0
 1970              		.cfi_startproc
 1971              		@ args = 0, pretend = 0, frame = 8
 1972              		@ frame_needed = 0, uses_anonymous_args = 0
 1973              		@ link register save eliminated.
1348:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1349:Src/mc_interface.c ****   ab_t tempVal;
1350:Src/mc_interface.c **** 
1351:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1352:Src/mc_interface.c ****   {
1353:Src/mc_interface.c ****     tempVal.a = 0;
1354:Src/mc_interface.c ****     tempVal.b = 0;
1355:Src/mc_interface.c ****   }
1356:Src/mc_interface.c ****   else
1357:Src/mc_interface.c ****   {
1358:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iab;
1359:Src/mc_interface.c ****   }
1360:Src/mc_interface.c ****   return (tempVal);
1361:Src/mc_interface.c **** #else
1362:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iab);
 1974              		.loc 1 1362 3 view .LVU542
 1975              		.loc 1 1362 28 is_stmt 0 view .LVU543
 1976 0000 4268     		ldr	r2, [r0, #4]
 1977 0002 1068     		ldr	r0, [r2]	@ unaligned
 1978              	.LVL158:
 1979              		.loc 1 1362 28 view .LVU544
 1980 0004 0023     		movs	r3, #0
 1981 0006 82B2     		uxth	r2, r0
 1982 0008 62F30F03 		bfi	r3, r2, #0, #16
 1983 000c 000C     		lsrs	r0, r0, #16
 1984 000e 60F31F43 		bfi	r3, r0, #16, #16
1347:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1985              		.loc 1 1347 1 view .LVU545
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 64


 1986 0012 82B0     		sub	sp, sp, #8
 1987              	.LCFI31:
 1988              		.cfi_def_cfa_offset 8
1363:Src/mc_interface.c **** #endif
1364:Src/mc_interface.c **** }
 1989              		.loc 1 1364 1 view .LVU546
 1990 0014 1846     		mov	r0, r3
 1991 0016 02B0     		add	sp, sp, #8
 1992              	.LCFI32:
 1993              		.cfi_def_cfa_offset 0
 1994              		@ sp needed
 1995 0018 7047     		bx	lr
 1996              		.cfi_endproc
 1997              	.LFE1128:
 1999 001a 00BF     		.section	.text.MCI_GetIab_F,"ax",%progbits
 2000              		.align	1
 2001              		.p2align 2,,3
 2002              		.weak	MCI_GetIab_F
 2003              		.syntax unified
 2004              		.thumb
 2005              		.thumb_func
 2007              	MCI_GetIab_F:
 2008              	.LVL159:
 2009              	.LFB1129:
1365:Src/mc_interface.c **** 
1366:Src/mc_interface.c **** __weak ab_f_t MCI_GetIab_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1367:Src/mc_interface.c **** {
 2010              		.loc 1 1367 1 is_stmt 1 view -0
 2011              		.cfi_startproc
 2012              		@ args = 0, pretend = 0, frame = 16
 2013              		@ frame_needed = 0, uses_anonymous_args = 0
 2014              		@ link register save eliminated.
1368:Src/mc_interface.c **** 
1369:Src/mc_interface.c ****   ab_f_t iab;
 2015              		.loc 1 1369 3 view .LVU548
1370:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1371:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1372:Src/mc_interface.c ****   {
1373:Src/mc_interface.c ****     iab.a = 0.0f;
1374:Src/mc_interface.c ****     iab.b = 0.0f;
1375:Src/mc_interface.c ****   }
1376:Src/mc_interface.c ****   else
1377:Src/mc_interface.c ****   {
1378:Src/mc_interface.c **** #endif
1379:Src/mc_interface.c ****     iab.a = (float_t)((float_t)pHandle->pFOCVars->Iab.a * pHandle->pScale->current);
 2016              		.loc 1 1379 5 view .LVU549
 2017              		.loc 1 1379 39 is_stmt 0 view .LVU550
 2018 0000 4368     		ldr	r3, [r0, #4]
 2019              		.loc 1 1379 74 view .LVU551
 2020 0002 C269     		ldr	r2, [r0, #28]
1380:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2021              		.loc 1 1380 23 view .LVU552
 2022 0004 B3F90210 		ldrsh	r1, [r3, #2]
1379:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2023              		.loc 1 1379 23 view .LVU553
 2024 0008 B3F90030 		ldrsh	r3, [r3]
 2025              		.loc 1 1380 23 view .LVU554
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 65


 2026 000c 00EE901A 		vmov	s1, r1	@ int
1379:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2027              		.loc 1 1379 23 view .LVU555
 2028 0010 07EE903A 		vmov	s15, r3	@ int
1379:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2029              		.loc 1 1379 74 view .LVU556
 2030 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
1379:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2031              		.loc 1 1379 23 view .LVU557
 2032 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1379:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2033              		.loc 1 1379 74 view .LVU558
 2034 001a 00EE103A 		vmov	s0, r3	@ int
 2035              	.LVL160:
 2036              		.loc 1 1380 5 is_stmt 1 view .LVU559
 2037              		.loc 1 1380 23 is_stmt 0 view .LVU560
 2038 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2039              	.LVL161:
1381:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1382:Src/mc_interface.c ****   }
1383:Src/mc_interface.c **** #endif
1384:Src/mc_interface.c ****   return (iab);
 2040              		.loc 1 1384 3 is_stmt 1 view .LVU561
1367:Src/mc_interface.c **** 
 2041              		.loc 1 1367 1 is_stmt 0 view .LVU562
 2042 0022 84B0     		sub	sp, sp, #16
 2043              	.LCFI33:
 2044              		.cfi_def_cfa_offset 16
1385:Src/mc_interface.c **** 
1386:Src/mc_interface.c **** }
 2045              		.loc 1 1386 1 view .LVU563
 2046 0024 60EE800A 		vmul.f32	s1, s1, s0
 2047 0028 27EE800A 		vmul.f32	s0, s15, s0
 2048 002c 04B0     		add	sp, sp, #16
 2049              	.LCFI34:
 2050              		.cfi_def_cfa_offset 0
 2051              		@ sp needed
 2052 002e 7047     		bx	lr
 2053              		.cfi_endproc
 2054              	.LFE1129:
 2056              		.section	.text.MCI_GetIalphabeta,"ax",%progbits
 2057              		.align	1
 2058              		.p2align 2,,3
 2059              		.weak	MCI_GetIalphabeta
 2060              		.syntax unified
 2061              		.thumb
 2062              		.thumb_func
 2064              	MCI_GetIalphabeta:
 2065              	.LVL162:
 2066              	.LFB1130:
1387:Src/mc_interface.c **** 
1388:Src/mc_interface.c **** /**
1389:Src/mc_interface.c ****   * @brief  It returns stator current Ialphabeta in alphabeta_t format
1390:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1391:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Ialphabeta
1392:Src/mc_interface.c ****   */
1393:Src/mc_interface.c **** __weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 66


1394:Src/mc_interface.c **** {
 2067              		.loc 1 1394 1 is_stmt 1 view -0
 2068              		.cfi_startproc
 2069              		@ args = 0, pretend = 0, frame = 8
 2070              		@ frame_needed = 0, uses_anonymous_args = 0
 2071              		@ link register save eliminated.
1395:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1396:Src/mc_interface.c ****   alphabeta_t tempVal;
1397:Src/mc_interface.c **** 
1398:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1399:Src/mc_interface.c ****   {
1400:Src/mc_interface.c ****     tempVal.alpha = 0;
1401:Src/mc_interface.c ****     tempVal.beta = 0;
1402:Src/mc_interface.c ****   }
1403:Src/mc_interface.c ****   else
1404:Src/mc_interface.c ****   {
1405:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Ialphabeta;
1406:Src/mc_interface.c ****   }
1407:Src/mc_interface.c ****   return (tempVal);
1408:Src/mc_interface.c **** #else
1409:Src/mc_interface.c ****   return (pHandle->pFOCVars->Ialphabeta);
 2072              		.loc 1 1409 3 view .LVU565
 2073              		.loc 1 1409 28 is_stmt 0 view .LVU566
 2074 0000 4268     		ldr	r2, [r0, #4]
 2075 0002 5068     		ldr	r0, [r2, #4]	@ unaligned
 2076              	.LVL163:
 2077              		.loc 1 1409 28 view .LVU567
 2078 0004 0023     		movs	r3, #0
 2079 0006 82B2     		uxth	r2, r0
 2080 0008 62F30F03 		bfi	r3, r2, #0, #16
 2081 000c 000C     		lsrs	r0, r0, #16
 2082 000e 60F31F43 		bfi	r3, r0, #16, #16
1394:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2083              		.loc 1 1394 1 view .LVU568
 2084 0012 82B0     		sub	sp, sp, #8
 2085              	.LCFI35:
 2086              		.cfi_def_cfa_offset 8
1410:Src/mc_interface.c **** #endif
1411:Src/mc_interface.c **** }
 2087              		.loc 1 1411 1 view .LVU569
 2088 0014 1846     		mov	r0, r3
 2089 0016 02B0     		add	sp, sp, #8
 2090              	.LCFI36:
 2091              		.cfi_def_cfa_offset 0
 2092              		@ sp needed
 2093 0018 7047     		bx	lr
 2094              		.cfi_endproc
 2095              	.LFE1130:
 2097 001a 00BF     		.section	.text.MCI_GetIqd,"ax",%progbits
 2098              		.align	1
 2099              		.p2align 2,,3
 2100              		.weak	MCI_GetIqd
 2101              		.syntax unified
 2102              		.thumb
 2103              		.thumb_func
 2105              	MCI_GetIqd:
 2106              	.LVL164:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 67


 2107              	.LFB1131:
1412:Src/mc_interface.c **** 
1413:Src/mc_interface.c **** /**
1414:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in qd_t format
1415:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1416:Src/mc_interface.c ****   * @retval qd_t Stator current Iqd
1417:Src/mc_interface.c ****   */
1418:Src/mc_interface.c **** __weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1419:Src/mc_interface.c **** {
 2108              		.loc 1 1419 1 is_stmt 1 view -0
 2109              		.cfi_startproc
 2110              		@ args = 0, pretend = 0, frame = 8
 2111              		@ frame_needed = 0, uses_anonymous_args = 0
 2112              		@ link register save eliminated.
1420:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1421:Src/mc_interface.c ****   qd_t tempVal;
1422:Src/mc_interface.c **** 
1423:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1424:Src/mc_interface.c ****   {
1425:Src/mc_interface.c ****     tempVal.q = 0;
1426:Src/mc_interface.c ****     tempVal.d = 0;
1427:Src/mc_interface.c ****   }
1428:Src/mc_interface.c ****   else
1429:Src/mc_interface.c ****   {
1430:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqd;
1431:Src/mc_interface.c ****   }
1432:Src/mc_interface.c ****   return (tempVal);
1433:Src/mc_interface.c **** #else
1434:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqd);
 2113              		.loc 1 1434 3 view .LVU571
 2114              		.loc 1 1434 28 is_stmt 0 view .LVU572
 2115 0000 4268     		ldr	r2, [r0, #4]
 2116 0002 D068     		ldr	r0, [r2, #12]	@ unaligned
 2117              	.LVL165:
 2118              		.loc 1 1434 28 view .LVU573
 2119 0004 0023     		movs	r3, #0
 2120 0006 82B2     		uxth	r2, r0
 2121 0008 62F30F03 		bfi	r3, r2, #0, #16
 2122 000c 000C     		lsrs	r0, r0, #16
 2123 000e 60F31F43 		bfi	r3, r0, #16, #16
1419:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2124              		.loc 1 1419 1 view .LVU574
 2125 0012 82B0     		sub	sp, sp, #8
 2126              	.LCFI37:
 2127              		.cfi_def_cfa_offset 8
1435:Src/mc_interface.c **** #endif
1436:Src/mc_interface.c **** }
 2128              		.loc 1 1436 1 view .LVU575
 2129 0014 1846     		mov	r0, r3
 2130 0016 02B0     		add	sp, sp, #8
 2131              	.LCFI38:
 2132              		.cfi_def_cfa_offset 0
 2133              		@ sp needed
 2134 0018 7047     		bx	lr
 2135              		.cfi_endproc
 2136              	.LFE1131:
 2138 001a 00BF     		.section	.text.MCI_GetIqd_F,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 68


 2139              		.align	1
 2140              		.p2align 2,,3
 2141              		.weak	MCI_GetIqd_F
 2142              		.syntax unified
 2143              		.thumb
 2144              		.thumb_func
 2146              	MCI_GetIqd_F:
 2147              	.LVL166:
 2148              	.LFB1132:
1437:Src/mc_interface.c **** 
1438:Src/mc_interface.c **** /**
1439:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in float_t format
1440:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1441:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqd (in Ampere)
1442:Src/mc_interface.c ****   */
1443:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqd_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1444:Src/mc_interface.c **** {
 2149              		.loc 1 1444 1 is_stmt 1 view -0
 2150              		.cfi_startproc
 2151              		@ args = 0, pretend = 0, frame = 16
 2152              		@ frame_needed = 0, uses_anonymous_args = 0
 2153              		@ link register save eliminated.
1445:Src/mc_interface.c ****   qd_f_t iqd;
 2154              		.loc 1 1445 3 view .LVU577
1446:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1447:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1448:Src/mc_interface.c ****   {
1449:Src/mc_interface.c ****     iqd.d = 0.0f;
1450:Src/mc_interface.c ****     iqd.q = 0.0f;
1451:Src/mc_interface.c ****   }
1452:Src/mc_interface.c ****   else
1453:Src/mc_interface.c ****   {
1454:Src/mc_interface.c **** #endif
1455:Src/mc_interface.c ****   iqd.d = (float_t)((float_t)pHandle->pFOCVars->Iqd.d * pHandle->pScale->current);
 2155              		.loc 1 1455 3 view .LVU578
 2156              		.loc 1 1455 37 is_stmt 0 view .LVU579
 2157 0000 4368     		ldr	r3, [r0, #4]
 2158              		.loc 1 1455 72 view .LVU580
 2159 0002 C269     		ldr	r2, [r0, #28]
 2160              		.loc 1 1455 21 view .LVU581
 2161 0004 B3F90E10 		ldrsh	r1, [r3, #14]
1456:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2162              		.loc 1 1456 21 view .LVU582
 2163 0008 B3F90C30 		ldrsh	r3, [r3, #12]
1455:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2164              		.loc 1 1455 21 view .LVU583
 2165 000c 00EE901A 		vmov	s1, r1	@ int
 2166              		.loc 1 1456 21 view .LVU584
 2167 0010 07EE903A 		vmov	s15, r3	@ int
1455:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2168              		.loc 1 1455 72 view .LVU585
 2169 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
 2170              		.loc 1 1456 21 view .LVU586
 2171 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1455:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2172              		.loc 1 1455 72 view .LVU587
 2173 001a 00EE103A 		vmov	s0, r3	@ int
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 69


1455:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2174              		.loc 1 1455 21 view .LVU588
 2175 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2176              	.LVL167:
 2177              		.loc 1 1456 3 is_stmt 1 view .LVU589
1457:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1458:Src/mc_interface.c ****   }
1459:Src/mc_interface.c **** #endif
1460:Src/mc_interface.c ****   return (iqd);
 2178              		.loc 1 1460 3 view .LVU590
1444:Src/mc_interface.c ****   qd_f_t iqd;
 2179              		.loc 1 1444 1 is_stmt 0 view .LVU591
 2180 0022 84B0     		sub	sp, sp, #16
 2181              	.LCFI39:
 2182              		.cfi_def_cfa_offset 16
1461:Src/mc_interface.c **** }
 2183              		.loc 1 1461 1 view .LVU592
 2184 0024 60EE800A 		vmul.f32	s1, s1, s0
 2185 0028 27EE800A 		vmul.f32	s0, s15, s0
 2186 002c 04B0     		add	sp, sp, #16
 2187              	.LCFI40:
 2188              		.cfi_def_cfa_offset 0
 2189              		@ sp needed
 2190 002e 7047     		bx	lr
 2191              		.cfi_endproc
 2192              	.LFE1132:
 2194              		.section	.text.MCI_GetIqdHF,"ax",%progbits
 2195              		.align	1
 2196              		.p2align 2,,3
 2197              		.weak	MCI_GetIqdHF
 2198              		.syntax unified
 2199              		.thumb
 2200              		.thumb_func
 2202              	MCI_GetIqdHF:
 2203              	.LVL168:
 2204              	.LFB1133:
1462:Src/mc_interface.c **** 
1463:Src/mc_interface.c **** /**
1464:Src/mc_interface.c ****   * @brief  It returns stator current IqdHF in qd_t format
1465:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1466:Src/mc_interface.c ****   * @retval qd_t Stator current IqdHF if HFI is selected as main
1467:Src/mc_interface.c ****   *         sensor. Otherwise it returns { 0, 0}.
1468:Src/mc_interface.c ****   */
1469:Src/mc_interface.c **** __weak qd_t MCI_GetIqdHF(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1470:Src/mc_interface.c **** {
 2205              		.loc 1 1470 1 is_stmt 1 view -0
 2206              		.cfi_startproc
 2207              		@ args = 0, pretend = 0, frame = 8
 2208              		@ frame_needed = 0, uses_anonymous_args = 0
 2209              		@ link register save eliminated.
1471:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1472:Src/mc_interface.c ****   qd_t tempVal;
1473:Src/mc_interface.c **** 
1474:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1475:Src/mc_interface.c ****   {
1476:Src/mc_interface.c ****     tempVal.q = 0;
1477:Src/mc_interface.c ****     tempVal.d = 0;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 70


1478:Src/mc_interface.c ****   }
1479:Src/mc_interface.c ****   else
1480:Src/mc_interface.c ****   {
1481:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->IqdHF;
1482:Src/mc_interface.c ****   }
1483:Src/mc_interface.c ****   return (tempVal);
1484:Src/mc_interface.c **** #else
1485:Src/mc_interface.c ****   return (pHandle->pFOCVars->IqdHF);
 2210              		.loc 1 1485 3 view .LVU594
 2211              		.loc 1 1485 28 is_stmt 0 view .LVU595
 2212 0000 4268     		ldr	r2, [r0, #4]
 2213 0002 9068     		ldr	r0, [r2, #8]	@ unaligned
 2214              	.LVL169:
 2215              		.loc 1 1485 28 view .LVU596
 2216 0004 0023     		movs	r3, #0
 2217 0006 82B2     		uxth	r2, r0
 2218 0008 62F30F03 		bfi	r3, r2, #0, #16
 2219 000c 000C     		lsrs	r0, r0, #16
 2220 000e 60F31F43 		bfi	r3, r0, #16, #16
1470:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2221              		.loc 1 1470 1 view .LVU597
 2222 0012 82B0     		sub	sp, sp, #8
 2223              	.LCFI41:
 2224              		.cfi_def_cfa_offset 8
1486:Src/mc_interface.c **** #endif
1487:Src/mc_interface.c **** }
 2225              		.loc 1 1487 1 view .LVU598
 2226 0014 1846     		mov	r0, r3
 2227 0016 02B0     		add	sp, sp, #8
 2228              	.LCFI42:
 2229              		.cfi_def_cfa_offset 0
 2230              		@ sp needed
 2231 0018 7047     		bx	lr
 2232              		.cfi_endproc
 2233              	.LFE1133:
 2235 001a 00BF     		.section	.text.MCI_GetIqdref,"ax",%progbits
 2236              		.align	1
 2237              		.p2align 2,,3
 2238              		.weak	MCI_GetIqdref
 2239              		.syntax unified
 2240              		.thumb
 2241              		.thumb_func
 2243              	MCI_GetIqdref:
 2244              	.LVL170:
 2245              	.LFB1134:
1488:Src/mc_interface.c **** 
1489:Src/mc_interface.c **** /**
1490:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in qd_t format
1491:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1492:Src/mc_interface.c ****   * @retval qd_t Stator current Iqdref
1493:Src/mc_interface.c ****   */
1494:Src/mc_interface.c **** __weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1495:Src/mc_interface.c **** {
 2246              		.loc 1 1495 1 is_stmt 1 view -0
 2247              		.cfi_startproc
 2248              		@ args = 0, pretend = 0, frame = 8
 2249              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 71


 2250              		@ link register save eliminated.
1496:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1497:Src/mc_interface.c ****   qd_t tempVal;
1498:Src/mc_interface.c **** 
1499:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1500:Src/mc_interface.c ****   {
1501:Src/mc_interface.c ****     tempVal.q = 0;
1502:Src/mc_interface.c ****     tempVal.d = 0;
1503:Src/mc_interface.c ****   }
1504:Src/mc_interface.c ****   else
1505:Src/mc_interface.c ****   {
1506:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqdref;
1507:Src/mc_interface.c ****   }
1508:Src/mc_interface.c ****   return (tempVal);
1509:Src/mc_interface.c **** #else
1510:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqdref);
 2251              		.loc 1 1510 3 view .LVU600
 2252              		.loc 1 1510 28 is_stmt 0 view .LVU601
 2253 0000 4268     		ldr	r2, [r0, #4]
 2254 0002 1069     		ldr	r0, [r2, #16]	@ unaligned
 2255              	.LVL171:
 2256              		.loc 1 1510 28 view .LVU602
 2257 0004 0023     		movs	r3, #0
 2258 0006 82B2     		uxth	r2, r0
 2259 0008 62F30F03 		bfi	r3, r2, #0, #16
 2260 000c 000C     		lsrs	r0, r0, #16
 2261 000e 60F31F43 		bfi	r3, r0, #16, #16
1495:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2262              		.loc 1 1495 1 view .LVU603
 2263 0012 82B0     		sub	sp, sp, #8
 2264              	.LCFI43:
 2265              		.cfi_def_cfa_offset 8
1511:Src/mc_interface.c **** #endif
1512:Src/mc_interface.c **** }
 2266              		.loc 1 1512 1 view .LVU604
 2267 0014 1846     		mov	r0, r3
 2268 0016 02B0     		add	sp, sp, #8
 2269              	.LCFI44:
 2270              		.cfi_def_cfa_offset 0
 2271              		@ sp needed
 2272 0018 7047     		bx	lr
 2273              		.cfi_endproc
 2274              	.LFE1134:
 2276 001a 00BF     		.section	.text.MCI_GetIqdref_F,"ax",%progbits
 2277              		.align	1
 2278              		.p2align 2,,3
 2279              		.weak	MCI_GetIqdref_F
 2280              		.syntax unified
 2281              		.thumb
 2282              		.thumb_func
 2284              	MCI_GetIqdref_F:
 2285              	.LVL172:
 2286              	.LFB1135:
1513:Src/mc_interface.c **** 
1514:Src/mc_interface.c **** /**
1515:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in float_t format
1516:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 72


1517:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqdref (in Ampere)
1518:Src/mc_interface.c ****   */
1519:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqdref_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1520:Src/mc_interface.c **** {
 2287              		.loc 1 1520 1 is_stmt 1 view -0
 2288              		.cfi_startproc
 2289              		@ args = 0, pretend = 0, frame = 16
 2290              		@ frame_needed = 0, uses_anonymous_args = 0
 2291              		@ link register save eliminated.
1521:Src/mc_interface.c ****   qd_f_t iqdref;
 2292              		.loc 1 1521 3 view .LVU606
1522:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1523:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1524:Src/mc_interface.c ****   {
1525:Src/mc_interface.c ****     iqdref.d = 0.0f;
1526:Src/mc_interface.c ****     iqdref.q = 0.0f;
1527:Src/mc_interface.c ****   }
1528:Src/mc_interface.c ****   else
1529:Src/mc_interface.c ****   {
1530:Src/mc_interface.c **** #endif
1531:Src/mc_interface.c ****     iqdref.d = (float_t)((float_t)pHandle->pFOCVars->Iqdref.d * pHandle->pScale->current);
 2293              		.loc 1 1531 5 view .LVU607
 2294              		.loc 1 1531 42 is_stmt 0 view .LVU608
 2295 0000 4368     		ldr	r3, [r0, #4]
 2296              		.loc 1 1531 80 view .LVU609
 2297 0002 C269     		ldr	r2, [r0, #28]
 2298              		.loc 1 1531 26 view .LVU610
 2299 0004 B3F91210 		ldrsh	r1, [r3, #18]
1532:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2300              		.loc 1 1532 26 view .LVU611
 2301 0008 B3F91030 		ldrsh	r3, [r3, #16]
1531:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2302              		.loc 1 1531 26 view .LVU612
 2303 000c 00EE901A 		vmov	s1, r1	@ int
 2304              		.loc 1 1532 26 view .LVU613
 2305 0010 07EE903A 		vmov	s15, r3	@ int
1531:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2306              		.loc 1 1531 80 view .LVU614
 2307 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
 2308              		.loc 1 1532 26 view .LVU615
 2309 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1531:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2310              		.loc 1 1531 80 view .LVU616
 2311 001a 00EE103A 		vmov	s0, r3	@ int
1531:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2312              		.loc 1 1531 26 view .LVU617
 2313 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2314              	.LVL173:
 2315              		.loc 1 1532 5 is_stmt 1 view .LVU618
1533:Src/mc_interface.c ****  #ifdef NULL_PTR_CHECK_MC_INT
1534:Src/mc_interface.c ****   }
1535:Src/mc_interface.c **** #endif
1536:Src/mc_interface.c ****   return (iqdref);
 2316              		.loc 1 1536 3 view .LVU619
1520:Src/mc_interface.c ****   qd_f_t iqdref;
 2317              		.loc 1 1520 1 is_stmt 0 view .LVU620
 2318 0022 84B0     		sub	sp, sp, #16
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 73


 2319              	.LCFI45:
 2320              		.cfi_def_cfa_offset 16
1537:Src/mc_interface.c **** }
 2321              		.loc 1 1537 1 view .LVU621
 2322 0024 60EE800A 		vmul.f32	s1, s1, s0
 2323 0028 27EE800A 		vmul.f32	s0, s15, s0
 2324 002c 04B0     		add	sp, sp, #16
 2325              	.LCFI46:
 2326              		.cfi_def_cfa_offset 0
 2327              		@ sp needed
 2328 002e 7047     		bx	lr
 2329              		.cfi_endproc
 2330              	.LFE1135:
 2332              		.section	.text.MCI_GetVqd,"ax",%progbits
 2333              		.align	1
 2334              		.p2align 2,,3
 2335              		.weak	MCI_GetVqd
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2340              	MCI_GetVqd:
 2341              	.LVL174:
 2342              	.LFB1136:
1538:Src/mc_interface.c **** 
1539:Src/mc_interface.c **** /**
1540:Src/mc_interface.c ****   * @brief  It returns stator current Vqd in qd_t format
1541:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1542:Src/mc_interface.c ****   * @retval qd_t Stator current Vqd
1543:Src/mc_interface.c ****   */
1544:Src/mc_interface.c **** __weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1545:Src/mc_interface.c **** {
 2343              		.loc 1 1545 1 is_stmt 1 view -0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 8
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              		@ link register save eliminated.
1546:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1547:Src/mc_interface.c ****   qd_t tempVal;
1548:Src/mc_interface.c **** 
1549:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1550:Src/mc_interface.c ****   {
1551:Src/mc_interface.c ****     tempVal.q = 0;
1552:Src/mc_interface.c ****     tempVal.d = 0;
1553:Src/mc_interface.c ****   }
1554:Src/mc_interface.c ****   else
1555:Src/mc_interface.c ****   {
1556:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Vqd;
1557:Src/mc_interface.c ****   }
1558:Src/mc_interface.c ****   return (tempVal);
1559:Src/mc_interface.c **** #else
1560:Src/mc_interface.c ****   return (pHandle->pFOCVars->Vqd);
 2348              		.loc 1 1560 3 view .LVU623
 2349              		.loc 1 1560 28 is_stmt 0 view .LVU624
 2350 0000 4268     		ldr	r2, [r0, #4]
 2351 0002 D2F81600 		ldr	r0, [r2, #22]	@ unaligned
 2352              	.LVL175:
 2353              		.loc 1 1560 28 view .LVU625
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 74


 2354 0006 0023     		movs	r3, #0
 2355 0008 82B2     		uxth	r2, r0
 2356 000a 62F30F03 		bfi	r3, r2, #0, #16
 2357 000e 000C     		lsrs	r0, r0, #16
 2358 0010 60F31F43 		bfi	r3, r0, #16, #16
1545:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2359              		.loc 1 1545 1 view .LVU626
 2360 0014 82B0     		sub	sp, sp, #8
 2361              	.LCFI47:
 2362              		.cfi_def_cfa_offset 8
1561:Src/mc_interface.c **** #endif
1562:Src/mc_interface.c **** }
 2363              		.loc 1 1562 1 view .LVU627
 2364 0016 1846     		mov	r0, r3
 2365 0018 02B0     		add	sp, sp, #8
 2366              	.LCFI48:
 2367              		.cfi_def_cfa_offset 0
 2368              		@ sp needed
 2369 001a 7047     		bx	lr
 2370              		.cfi_endproc
 2371              	.LFE1136:
 2373              		.section	.text.MCI_GetValphabeta,"ax",%progbits
 2374              		.align	1
 2375              		.p2align 2,,3
 2376              		.weak	MCI_GetValphabeta
 2377              		.syntax unified
 2378              		.thumb
 2379              		.thumb_func
 2381              	MCI_GetValphabeta:
 2382              	.LVL176:
 2383              	.LFB1137:
1563:Src/mc_interface.c **** 
1564:Src/mc_interface.c **** /**
1565:Src/mc_interface.c ****   * @brief  It returns stator current Valphabeta in alphabeta_t format
1566:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1567:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Valphabeta
1568:Src/mc_interface.c ****   */
1569:Src/mc_interface.c **** __weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1570:Src/mc_interface.c **** {
 2384              		.loc 1 1570 1 is_stmt 1 view -0
 2385              		.cfi_startproc
 2386              		@ args = 0, pretend = 0, frame = 8
 2387              		@ frame_needed = 0, uses_anonymous_args = 0
 2388              		@ link register save eliminated.
1571:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1572:Src/mc_interface.c ****   alphabeta_t tempVal;
1573:Src/mc_interface.c **** 
1574:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1575:Src/mc_interface.c ****   {
1576:Src/mc_interface.c ****     tempVal.alpha = 0;
1577:Src/mc_interface.c ****     tempVal.beta = 0;
1578:Src/mc_interface.c ****   }
1579:Src/mc_interface.c ****   else
1580:Src/mc_interface.c ****   {
1581:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Valphabeta;
1582:Src/mc_interface.c ****   }
1583:Src/mc_interface.c ****   return (tempVal);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 75


1584:Src/mc_interface.c **** #else
1585:Src/mc_interface.c ****   return (pHandle->pFOCVars->Valphabeta);
 2389              		.loc 1 1585 3 view .LVU629
 2390              		.loc 1 1585 28 is_stmt 0 view .LVU630
 2391 0000 4268     		ldr	r2, [r0, #4]
 2392 0002 D2F81A00 		ldr	r0, [r2, #26]	@ unaligned
 2393              	.LVL177:
 2394              		.loc 1 1585 28 view .LVU631
 2395 0006 0023     		movs	r3, #0
 2396 0008 82B2     		uxth	r2, r0
 2397 000a 62F30F03 		bfi	r3, r2, #0, #16
 2398 000e 000C     		lsrs	r0, r0, #16
 2399 0010 60F31F43 		bfi	r3, r0, #16, #16
1570:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2400              		.loc 1 1570 1 view .LVU632
 2401 0014 82B0     		sub	sp, sp, #8
 2402              	.LCFI49:
 2403              		.cfi_def_cfa_offset 8
1586:Src/mc_interface.c **** #endif
1587:Src/mc_interface.c **** }
 2404              		.loc 1 1587 1 view .LVU633
 2405 0016 1846     		mov	r0, r3
 2406 0018 02B0     		add	sp, sp, #8
 2407              	.LCFI50:
 2408              		.cfi_def_cfa_offset 0
 2409              		@ sp needed
 2410 001a 7047     		bx	lr
 2411              		.cfi_endproc
 2412              	.LFE1137:
 2414              		.section	.text.MCI_GetElAngledpp,"ax",%progbits
 2415              		.align	1
 2416              		.p2align 2,,3
 2417              		.weak	MCI_GetElAngledpp
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2422              	MCI_GetElAngledpp:
 2423              	.LVL178:
 2424              	.LFB1138:
1588:Src/mc_interface.c **** 
1589:Src/mc_interface.c **** /**
1590:Src/mc_interface.c ****   * @brief  It returns the rotor electrical angle actually used for reference
1591:Src/mc_interface.c ****   *         frame transformation
1592:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1593:Src/mc_interface.c ****   * @retval int16_t Rotor electrical angle in dpp format
1594:Src/mc_interface.c ****   */
1595:Src/mc_interface.c **** __weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1596:Src/mc_interface.c **** {
 2425              		.loc 1 1596 1 is_stmt 1 view -0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 0
 2428              		@ frame_needed = 0, uses_anonymous_args = 0
 2429              		@ link register save eliminated.
1597:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1598:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
1599:Src/mc_interface.c **** #else
1600:Src/mc_interface.c ****   return (pHandle->pFOCVars->hElAngle);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 76


 2430              		.loc 1 1600 3 view .LVU635
 2431              		.loc 1 1600 28 is_stmt 0 view .LVU636
 2432 0000 4368     		ldr	r3, [r0, #4]
1601:Src/mc_interface.c **** #endif
1602:Src/mc_interface.c **** }
 2433              		.loc 1 1602 1 view .LVU637
 2434 0002 B3F92000 		ldrsh	r0, [r3, #32]
 2435              	.LVL179:
 2436              		.loc 1 1602 1 view .LVU638
 2437 0006 7047     		bx	lr
 2438              		.cfi_endproc
 2439              	.LFE1138:
 2441              		.section	.text.MCI_GetTeref,"ax",%progbits
 2442              		.align	1
 2443              		.p2align 2,,3
 2444              		.weak	MCI_GetTeref
 2445              		.syntax unified
 2446              		.thumb
 2447              		.thumb_func
 2449              	MCI_GetTeref:
 2450              	.LVL180:
 2451              	.LFB1139:
1603:Src/mc_interface.c **** 
1604:Src/mc_interface.c **** /**
1605:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque, fed to derived class for
1606:Src/mc_interface.c ****   *         Iqref and Idref computation
1607:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1608:Src/mc_interface.c ****   * @retval int16_t Teref
1609:Src/mc_interface.c ****   */
1610:Src/mc_interface.c **** __weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1611:Src/mc_interface.c **** {
 2452              		.loc 1 1611 1 is_stmt 1 view -0
 2453              		.cfi_startproc
 2454              		@ args = 0, pretend = 0, frame = 0
 2455              		@ frame_needed = 0, uses_anonymous_args = 0
 2456              		@ link register save eliminated.
1612:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1613:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
1614:Src/mc_interface.c **** #else
1615:Src/mc_interface.c ****   return (pHandle->pFOCVars->hTeref);
 2457              		.loc 1 1615 3 view .LVU640
 2458              		.loc 1 1615 28 is_stmt 0 view .LVU641
 2459 0000 4368     		ldr	r3, [r0, #4]
1616:Src/mc_interface.c **** #endif
1617:Src/mc_interface.c **** }
 2460              		.loc 1 1617 1 view .LVU642
 2461 0002 B3F91E00 		ldrsh	r0, [r3, #30]
 2462              	.LVL181:
 2463              		.loc 1 1617 1 view .LVU643
 2464 0006 7047     		bx	lr
 2465              		.cfi_endproc
 2466              	.LFE1139:
 2468              		.section	.text.MCI_GetTeref_F,"ax",%progbits
 2469              		.align	1
 2470              		.p2align 2,,3
 2471              		.weak	MCI_GetTeref_F
 2472              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 77


 2473              		.thumb
 2474              		.thumb_func
 2476              	MCI_GetTeref_F:
 2477              	.LVL182:
 2478              	.LFB1140:
1618:Src/mc_interface.c **** 
1619:Src/mc_interface.c **** /**
1620:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque.
1621:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1622:Src/mc_interface.c ****   * @retval float_t Teref
1623:Src/mc_interface.c ****   */
1624:Src/mc_interface.c **** __weak float_t MCI_GetTeref_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1625:Src/mc_interface.c **** {
 2479              		.loc 1 1625 1 is_stmt 1 view -0
 2480              		.cfi_startproc
 2481              		@ args = 0, pretend = 0, frame = 0
 2482              		@ frame_needed = 0, uses_anonymous_args = 0
 2483              		@ link register save eliminated.
1626:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1627:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0.0f : ((float_t)pHandle->pFOCVars->hTeref * (float_t)pHandle->pSc
1628:Src/mc_interface.c **** #else
1629:Src/mc_interface.c ****   return ((float_t)(pHandle->pFOCVars->hTeref * pHandle->pScale->current));
 2484              		.loc 1 1629 3 view .LVU645
 2485              		.loc 1 1629 38 is_stmt 0 view .LVU646
 2486 0000 4268     		ldr	r2, [r0, #4]
 2487              		.loc 1 1629 64 view .LVU647
 2488 0002 C369     		ldr	r3, [r0, #28]
 2489              		.loc 1 1629 11 view .LVU648
 2490 0004 B2F91E20 		ldrsh	r2, [r2, #30]
 2491              		.loc 1 1629 64 view .LVU649
 2492 0008 5B68     		ldr	r3, [r3, #4]	@ unaligned
 2493              		.loc 1 1629 11 view .LVU650
 2494 000a 07EE902A 		vmov	s15, r2	@ int
 2495              		.loc 1 1629 64 view .LVU651
 2496 000e 00EE103A 		vmov	s0, r3	@ int
 2497              		.loc 1 1629 11 view .LVU652
 2498 0012 F8EEE77A 		vcvt.f32.s32	s15, s15
1630:Src/mc_interface.c **** #endif
1631:Src/mc_interface.c **** }
 2499              		.loc 1 1631 1 view .LVU653
 2500 0016 27EE800A 		vmul.f32	s0, s15, s0
 2501 001a 7047     		bx	lr
 2502              		.cfi_endproc
 2503              	.LFE1140:
 2505              		.section	.text.MCI_GetPhaseCurrentAmplitude,"ax",%progbits
 2506              		.align	1
 2507              		.p2align 2,,3
 2508              		.weak	MCI_GetPhaseCurrentAmplitude
 2509              		.syntax unified
 2510              		.thumb
 2511              		.thumb_func
 2513              	MCI_GetPhaseCurrentAmplitude:
 2514              	.LVL183:
 2515              	.LFB1141:
1632:Src/mc_interface.c **** 
1633:Src/mc_interface.c **** /**
1634:Src/mc_interface.c ****   * @brief  It returns the motor phase current amplitude (0-to-peak) in s16A
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 78


1635:Src/mc_interface.c ****   *         To convert s16A into Ampere following formula must be used:
1636:Src/mc_interface.c ****   *         Current(Amp) = [Current(s16A) * Vdd micro] / [65536 * Rshunt * Aop]
1637:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1638:Src/mc_interface.c ****   * @retval int16_t Motor phase current (0-to-peak) in s16A
1639:Src/mc_interface.c ****   */
1640:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseCurrentAmplitude(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1641:Src/mc_interface.c **** {
 2516              		.loc 1 1641 1 is_stmt 1 view -0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 0
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
1642:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2520              		.loc 1 1642 3 view .LVU655
1643:Src/mc_interface.c ****   int16_t wAux;
 2521              		.loc 1 1643 3 view .LVU656
1644:Src/mc_interface.c **** 
1645:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1646:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1647:Src/mc_interface.c ****   {
1648:Src/mc_interface.c ****     wAux = 0;
1649:Src/mc_interface.c ****   }
1650:Src/mc_interface.c ****   else
1651:Src/mc_interface.c ****   {
1652:Src/mc_interface.c **** #endif
1653:Src/mc_interface.c ****   Local_Curr = pHandle->pFOCVars->Ialphabeta;
 2522              		.loc 1 1653 3 view .LVU657
 2523              		.loc 1 1653 23 is_stmt 0 view .LVU658
 2524 0000 4268     		ldr	r2, [r0, #4]
1641:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2525              		.loc 1 1641 1 view .LVU659
 2526 0002 08B5     		push	{r3, lr}
 2527              	.LCFI51:
 2528              		.cfi_def_cfa_offset 8
 2529              		.cfi_offset 3, -8
 2530              		.cfi_offset 14, -4
 2531              		.loc 1 1653 14 view .LVU660
 2532 0004 B2F90630 		ldrsh	r3, [r2, #6]
 2533 0008 B2F90400 		ldrsh	r0, [r2, #4]
 2534              	.LVL184:
1654:Src/mc_interface.c ****   wAux = MCM_Modulus(Local_Curr.alpha, Local_Curr.beta);
 2535              		.loc 1 1654 3 is_stmt 1 view .LVU661
 2536              	.LBB7:
 2537              	.LBI7:
 2538              		.file 2 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 79


  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /**
  41:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  42:Inc/mc_math.h ****   */
  43:Inc/mc_math.h **** #define LOG2(x) \
  44:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  45:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  46:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
  47:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  48:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  49:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  50:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  51:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  52:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  53:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  54:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  55:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  56:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  57:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  58:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  59:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  60:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
  61:Inc/mc_math.h **** 
  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** typedef struct
  66:Inc/mc_math.h **** {
  67:Inc/mc_math.h ****   int16_t hCos;
  68:Inc/mc_math.h ****   int16_t hSin;
  69:Inc/mc_math.h **** } Trig_Components;
  70:Inc/mc_math.h **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 80


  71:Inc/mc_math.h **** /**
  72:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  73:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  74:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  75:Inc/mc_math.h ****   *                               Ialpha = Ia
  76:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  77:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format.
  78:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format.
  79:Inc/mc_math.h ****   */
  80:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
  81:Inc/mc_math.h **** 
  82:Inc/mc_math.h **** /**
  83:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
  84:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
  85:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
  86:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
  87:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
  88:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format.
  89:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
  90:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format.
  91:Inc/mc_math.h ****   */
  92:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
  93:Inc/mc_math.h **** 
  94:Inc/mc_math.h **** /**
  95:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
  96:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
  97:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
  98:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
  99:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 100:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format.
 101:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
 102:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format.
 103:Inc/mc_math.h ****   */
 104:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 105:Inc/mc_math.h **** 
 106:Inc/mc_math.h **** /**
 107:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in input.
 108:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format.
 109:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format.
 110:Inc/mc_math.h ****   */
 111:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 112:Inc/mc_math.h **** 
 113:Inc/mc_math.h **** /**
 114:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0 for negative s32.
 115:Inc/mc_math.h ****   * @param  Input int32_t number.
 116:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0).
 117:Inc/mc_math.h ****   */
 118:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 119:Inc/mc_math.h **** 
 120:Inc/mc_math.h **** /**
 121:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 122:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 123:Inc/mc_math.h ****   */
 124:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 125:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
 126:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 127:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 81


 128:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 129:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 130:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
 131:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 132:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 133:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 134:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 135:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 136:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 137:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 138:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 139:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 140:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 141:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 142:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 143:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 144:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
 145:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 146:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 147:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 148:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 149:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 150:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 151:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 152:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 153:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
 154:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 155:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 156:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 157:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 158:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 159:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 160:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
 161:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 162:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 163:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 164:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 165:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 166:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 167:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 168:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 169:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 170:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 171:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 172:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
 173:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20235 , 20231 , 20247,\
 174:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 175:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 176:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 177:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 178:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 179:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 180:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 181:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 182:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
 183:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 184:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 82


 185:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 186:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 187:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
 188:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 189:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 190:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 191:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 192:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 193:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 194:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 195:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 196:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 197:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 198:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 199:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 200:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 201:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
 202:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 203:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 204:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 205:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 206:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 207:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 208:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 209:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 210:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
 211:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 212:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 213:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 214:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 215:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 216:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 217:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
 218:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 219:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 220:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 221:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 222:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 223:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 224:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 225:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 226:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 227:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 228:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 229:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
 230:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 231:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 232:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 233:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 234:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 235:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 236:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 237:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 238:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 239:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
 240:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 241:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 83


 242:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 243:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 244:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
 245:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 246:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 247:Inc/mc_math.h ****      31989 , 32006 , 32023 , 32038 , 32055 , 32071 , 32087 , 32104,\
 248:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 249:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 250:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 251:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 252:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 253:Inc/mc_math.h ****      32767 }
 254:Inc/mc_math.h **** 
 255:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 256:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 257:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 258:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
 259:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 260:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 261:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 262:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 263:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 264:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 265:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 266:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 267:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
 268:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 269:Inc/mc_math.h **** 
 270:Inc/mc_math.h **** /**
 271:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm.
 272:Inc/mc_math.h ****   * @param  alpha component,
 273:Inc/mc_math.h ****   *         beta component.
 274:Inc/mc_math.h ****   * @retval int16_t Modulus.
 275:Inc/mc_math.h ****   */
 276:Inc/mc_math.h **** static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
 2539              		.loc 2 276 23 view .LVU662
 2540              	.LBB8:
 277:Inc/mc_math.h **** {
 278:Inc/mc_math.h **** 
 279:Inc/mc_math.h ****   int32_t wAux1;
 2541              		.loc 2 279 3 view .LVU663
 280:Inc/mc_math.h ****   int32_t wAux2;
 2542              		.loc 2 280 3 view .LVU664
 281:Inc/mc_math.h **** 
 282:Inc/mc_math.h ****   wAux1 = (int32_t)(alpha  * alpha);
 2543              		.loc 2 282 3 view .LVU665
 283:Inc/mc_math.h ****   wAux2 = (int32_t)(beta * beta);
 2544              		.loc 2 283 3 view .LVU666
 284:Inc/mc_math.h **** 
 285:Inc/mc_math.h ****   wAux1 += wAux2;
 2545              		.loc 2 285 3 view .LVU667
 283:Inc/mc_math.h ****   wAux2 = (int32_t)(beta * beta);
 2546              		.loc 2 283 9 is_stmt 0 view .LVU668
 2547 000c 03FB03F3 		mul	r3, r3, r3
 2548              	.LVL185:
 286:Inc/mc_math.h ****   wAux1 = MCM_Sqrt(wAux1);
 2549              		.loc 2 286 3 is_stmt 1 view .LVU669
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 84


 2550              		.loc 2 286 11 is_stmt 0 view .LVU670
 2551 0010 00FB0030 		mla	r0, r0, r0, r3
 2552              	.LVL186:
 2553              		.loc 2 286 11 view .LVU671
 2554 0014 FFF7FEFF 		bl	MCM_Sqrt
 2555              	.LVL187:
 287:Inc/mc_math.h **** 
 288:Inc/mc_math.h ****   if (wAux1 > INT16_MAX)
 2556              		.loc 2 288 3 is_stmt 1 view .LVU672
 289:Inc/mc_math.h ****   {
 290:Inc/mc_math.h ****     wAux1 = (int32_t)INT16_MAX;
 291:Inc/mc_math.h ****   }
 292:Inc/mc_math.h ****   else
 293:Inc/mc_math.h ****   {
 294:Inc/mc_math.h ****     /* Nothing to do */
 295:Inc/mc_math.h ****   }
 2557              		.loc 2 295 3 view .LVU673
 296:Inc/mc_math.h **** 
 297:Inc/mc_math.h ****   return ((int16_t)wAux1);
 2558              		.loc 2 297 3 view .LVU674
 2559              		.loc 2 297 3 is_stmt 0 view .LVU675
 2560              	.LBE8:
 2561              	.LBE7:
1655:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1656:Src/mc_interface.c ****   }
1657:Src/mc_interface.c **** #endif
1658:Src/mc_interface.c **** 
1659:Src/mc_interface.c ****   return (wAux);
 2562              		.loc 1 1659 3 is_stmt 1 view .LVU676
 2563              	.LBB10:
 2564              	.LBB9:
 2565              		.loc 2 297 11 is_stmt 0 view .LVU677
 2566 0018 47F6FF73 		movw	r3, #32767
 2567 001c 9842     		cmp	r0, r3
 2568 001e A8BF     		it	ge
 2569 0020 1846     		movge	r0, r3
 2570              	.LVL188:
 2571              		.loc 2 297 11 view .LVU678
 2572              	.LBE9:
 2573              	.LBE10:
1660:Src/mc_interface.c **** }
 2574              		.loc 1 1660 1 view .LVU679
 2575 0022 00B2     		sxth	r0, r0
 2576 0024 08BD     		pop	{r3, pc}
 2577              		.cfi_endproc
 2578              	.LFE1141:
 2580 0026 00BF     		.section	.text.MCI_GetPhaseVoltageAmplitude,"ax",%progbits
 2581              		.align	1
 2582              		.p2align 2,,3
 2583              		.weak	MCI_GetPhaseVoltageAmplitude
 2584              		.syntax unified
 2585              		.thumb
 2586              		.thumb_func
 2588              	MCI_GetPhaseVoltageAmplitude:
 2589              	.LVL189:
 2590              	.LFB1142:
1661:Src/mc_interface.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 85


1662:Src/mc_interface.c **** /**
1663:Src/mc_interface.c ****   * @brief  It returns the applied motor phase voltage amplitude (0-to-peak) in
1664:Src/mc_interface.c ****   *         s16V. To convert s16V into Volts following formula must be used:
1665:Src/mc_interface.c ****   *         PhaseVoltage(V) = [PhaseVoltage(s16A) * Vbus(V)] /[sqrt(3) *32767]
1666:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1667:Src/mc_interface.c ****   * @retval int16_t Motor phase voltage (0-to-peak) in s16V
1668:Src/mc_interface.c ****   */
1669:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseVoltageAmplitude(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1670:Src/mc_interface.c **** {
 2591              		.loc 1 1670 1 is_stmt 1 view -0
 2592              		.cfi_startproc
 2593              		@ args = 0, pretend = 0, frame = 0
 2594              		@ frame_needed = 0, uses_anonymous_args = 0
1671:Src/mc_interface.c ****   int16_t temp_wAux;
 2595              		.loc 1 1671 3 view .LVU681
1672:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1673:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1674:Src/mc_interface.c ****   {
1675:Src/mc_interface.c ****     temp_wAux = 0;
1676:Src/mc_interface.c ****   }
1677:Src/mc_interface.c ****   else
1678:Src/mc_interface.c ****   {
1679:Src/mc_interface.c **** #endif
1680:Src/mc_interface.c ****     alphabeta_t Local_Voltage;
 2596              		.loc 1 1680 5 view .LVU682
1681:Src/mc_interface.c ****     int32_t wAux1;
 2597              		.loc 1 1681 5 view .LVU683
1682:Src/mc_interface.c ****     int32_t wAux2;
 2598              		.loc 1 1682 5 view .LVU684
1683:Src/mc_interface.c **** 
1684:Src/mc_interface.c ****     Local_Voltage = pHandle->pFOCVars->Valphabeta;
 2599              		.loc 1 1684 5 view .LVU685
 2600              		.loc 1 1684 28 is_stmt 0 view .LVU686
 2601 0000 4268     		ldr	r2, [r0, #4]
1670:Src/mc_interface.c ****   int16_t temp_wAux;
 2602              		.loc 1 1670 1 view .LVU687
 2603 0002 08B5     		push	{r3, lr}
 2604              	.LCFI52:
 2605              		.cfi_def_cfa_offset 8
 2606              		.cfi_offset 3, -8
 2607              		.cfi_offset 14, -4
 2608              		.loc 1 1684 19 view .LVU688
 2609 0004 B2F91C30 		ldrsh	r3, [r2, #28]
 2610 0008 B2F91A00 		ldrsh	r0, [r2, #26]
 2611              	.LVL190:
1685:Src/mc_interface.c ****     wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
 2612              		.loc 1 1685 5 is_stmt 1 view .LVU689
1686:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2613              		.loc 1 1686 5 view .LVU690
1687:Src/mc_interface.c **** 
1688:Src/mc_interface.c ****     wAux1 += wAux2;
 2614              		.loc 1 1688 5 view .LVU691
1686:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2615              		.loc 1 1686 11 is_stmt 0 view .LVU692
 2616 000c 03FB03F3 		mul	r3, r3, r3
 2617              	.LVL191:
1689:Src/mc_interface.c ****     wAux1 = MCM_Sqrt(wAux1);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 86


 2618              		.loc 1 1689 5 is_stmt 1 view .LVU693
 2619              		.loc 1 1689 13 is_stmt 0 view .LVU694
 2620 0010 00FB0030 		mla	r0, r0, r0, r3
 2621              	.LVL192:
 2622              		.loc 1 1689 13 view .LVU695
 2623 0014 FFF7FEFF 		bl	MCM_Sqrt
 2624              	.LVL193:
1690:Src/mc_interface.c **** 
1691:Src/mc_interface.c ****     if (wAux1 > INT16_MAX)
 2625              		.loc 1 1691 5 is_stmt 1 view .LVU696
1692:Src/mc_interface.c ****     {
1693:Src/mc_interface.c ****       wAux1 = (int32_t)INT16_MAX;
1694:Src/mc_interface.c ****     }
1695:Src/mc_interface.c ****     temp_wAux = (int16_t)wAux1;
 2626              		.loc 1 1695 5 view .LVU697
1696:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1697:Src/mc_interface.c ****   }
1698:Src/mc_interface.c **** #endif
1699:Src/mc_interface.c ****   return (temp_wAux);
 2627              		.loc 1 1699 3 view .LVU698
1695:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2628              		.loc 1 1695 15 is_stmt 0 view .LVU699
 2629 0018 47F6FF73 		movw	r3, #32767
 2630 001c 9842     		cmp	r0, r3
 2631 001e A8BF     		it	ge
 2632 0020 1846     		movge	r0, r3
 2633              	.LVL194:
1700:Src/mc_interface.c **** }
 2634              		.loc 1 1700 1 view .LVU700
 2635 0022 00B2     		sxth	r0, r0
 2636 0024 08BD     		pop	{r3, pc}
 2637              		.cfi_endproc
 2638              	.LFE1142:
 2640 0026 00BF     		.section	.text.MCI_Clear_Iqdref,"ax",%progbits
 2641              		.align	1
 2642              		.p2align 2,,3
 2643              		.weak	MCI_Clear_Iqdref
 2644              		.syntax unified
 2645              		.thumb
 2646              		.thumb_func
 2648              	MCI_Clear_Iqdref:
 2649              	.LVL195:
 2650              	.LFB1143:
1701:Src/mc_interface.c **** 
1702:Src/mc_interface.c **** /**
1703:Src/mc_interface.c ****   * @brief  It re-initializes Iqdref variables with their default values.
1704:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1705:Src/mc_interface.c ****   */
1706:Src/mc_interface.c **** __weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
1707:Src/mc_interface.c **** {
 2651              		.loc 1 1707 1 is_stmt 1 view -0
 2652              		.cfi_startproc
 2653              		@ args = 0, pretend = 0, frame = 0
 2654              		@ frame_needed = 0, uses_anonymous_args = 0
1708:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1709:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1710:Src/mc_interface.c ****   {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 87


1711:Src/mc_interface.c ****     /* Nothing to do */
1712:Src/mc_interface.c ****   }
1713:Src/mc_interface.c ****   else
1714:Src/mc_interface.c ****   {
1715:Src/mc_interface.c **** #endif
1716:Src/mc_interface.c ****     pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 2655              		.loc 1 1716 5 view .LVU702
1707:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2656              		.loc 1 1707 1 is_stmt 0 view .LVU703
 2657 0000 10B5     		push	{r4, lr}
 2658              	.LCFI53:
 2659              		.cfi_def_cfa_offset 8
 2660              		.cfi_offset 4, -8
 2661              		.cfi_offset 14, -4
 2662              		.loc 1 1716 12 view .LVU704
 2663 0002 D0E90004 		ldrd	r0, r4, [r0]
 2664              	.LVL196:
 2665              		.loc 1 1716 33 view .LVU705
 2666 0006 FFF7FEFF 		bl	STC_GetDefaultIqdref
 2667              	.LVL197:
 2668 000a C0F30F43 		ubfx	r3, r0, #16, #16
 2669 000e 2082     		strh	r0, [r4, #16]	@ movhi
 2670 0010 6382     		strh	r3, [r4, #18]	@ movhi
1717:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1718:Src/mc_interface.c ****   }
1719:Src/mc_interface.c **** #endif
1720:Src/mc_interface.c **** }
 2671              		.loc 1 1720 1 view .LVU706
 2672 0012 10BD     		pop	{r4, pc}
 2673              		.cfi_endproc
 2674              	.LFE1143:
 2676              		.text
 2677              	.Letext0:
 2678              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2679              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2680              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 2681              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 2682              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 2683              		.file 8 "Inc/mc_type.h"
 2684              		.file 9 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2685              		.file 10 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2686              		.file 11 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2687              		.file 12 "Inc/pwm_curr_fdbk.h"
 2688              		.file 13 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 2689              		.file 14 "Inc/mc_interface.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 88


DEFINED SYMBOLS
                            *ABS*:00000000 mc_interface.c
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:20     .text.MCI_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:27     .text.MCI_Init:00000000 MCI_Init
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:77     .text.MCI_ExecSpeedRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:84     .text.MCI_ExecSpeedRamp:00000000 MCI_ExecSpeedRamp
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:111    .text.MCI_ExecSpeedRamp_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:118    .text.MCI_ExecSpeedRamp_F:00000000 MCI_ExecSpeedRamp_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:156    .text.MCI_ExecSpeedRamp_F:00000020 $d
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:161    .text.MCI_ExecTorqueRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:168    .text.MCI_ExecTorqueRamp:00000000 MCI_ExecTorqueRamp
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:199    .text.MCI_ExecTorqueRamp_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:206    .text.MCI_ExecTorqueRamp_F:00000000 MCI_ExecTorqueRamp_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:245    .text.MCI_SetSpeedMode:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:252    .text.MCI_SetSpeedMode:00000000 MCI_SetSpeedMode
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:292    .text.MCI_SetOpenLoopCurrent:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:299    .text.MCI_SetOpenLoopCurrent:00000000 MCI_SetOpenLoopCurrent
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:339    .text.MCI_SetOpenLoopVoltage:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:346    .text.MCI_SetOpenLoopVoltage:00000000 MCI_SetOpenLoopVoltage
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:386    .text.MCI_GetCalibratedOffsetsMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:393    .text.MCI_GetCalibratedOffsetsMotor:00000000 MCI_GetCalibratedOffsetsMotor
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:437    .text.MCI_FaultProcessing:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:444    .text.MCI_FaultProcessing:00000000 MCI_FaultProcessing
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:474    .text.MCI_ExecBufferedCommands:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:481    .text.MCI_ExecBufferedCommands:00000000 MCI_ExecBufferedCommands
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:513    .text.MCI_ExecBufferedCommands:0000001a $d
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:633    .text.MCI_IsCommandAcknowledged:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:640    .text.MCI_IsCommandAcknowledged:00000000 MCI_IsCommandAcknowledged
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:673    .text.MCI_GetSTMState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:680    .text.MCI_GetSTMState:00000000 MCI_GetSTMState
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:698    .text.MCI_GetOccurredFaults:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:705    .text.MCI_GetOccurredFaults:00000000 MCI_GetOccurredFaults
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:723    .text.MCI_GetCurrentFaults:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:730    .text.MCI_GetCurrentFaults:00000000 MCI_GetCurrentFaults
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:748    .text.MCI_StartMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:755    .text.MCI_StartMotor:00000000 MCI_StartMotor
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:819    .text.MCI_StartWithPolarizationMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:826    .text.MCI_StartWithPolarizationMotor:00000000 MCI_StartWithPolarizationMotor
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:896    .text.MCI_StartOffsetMeasurments:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:903    .text.MCI_StartOffsetMeasurments:00000000 MCI_StartOffsetMeasurments
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:972    .text.MCI_SetCalibratedOffsetsMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:979    .text.MCI_SetCalibratedOffsetsMotor:00000000 MCI_SetCalibratedOffsetsMotor
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1049   .text.MCI_StopMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1056   .text.MCI_StopMotor:00000000 MCI_StopMotor
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1146   .text.MCI_FaultAcknowledged:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1153   .text.MCI_FaultAcknowledged:00000000 MCI_FaultAcknowledged
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1214   .text.MCI_GetFaultState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1221   .text.MCI_GetFaultState:00000000 MCI_GetFaultState
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1246   .text.MCI_GetControlMode:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1253   .text.MCI_GetControlMode:00000000 MCI_GetControlMode
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1271   .text.MCI_SetCurrentReferences:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1278   .text.MCI_SetCurrentReferences:00000000 MCI_SetCurrentReferences
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1369   .text.MCI_SetCurrentReferences_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1376   .text.MCI_SetCurrentReferences_F:00000000 MCI_SetCurrentReferences_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1439   .text.MCI_GetImposedMotorDirection:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1446   .text.MCI_GetImposedMotorDirection:00000000 MCI_GetImposedMotorDirection
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1513   .text.MCI_GetLastRampFinalSpeed:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 89


C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1520   .text.MCI_GetLastRampFinalSpeed:00000000 MCI_GetLastRampFinalSpeed
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1538   .text.MCI_GetLastRampFinalTorque:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1545   .text.MCI_GetLastRampFinalTorque:00000000 MCI_GetLastRampFinalTorque
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1563   .text.MCI_GetLastRampFinalDuration:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1570   .text.MCI_GetLastRampFinalDuration:00000000 MCI_GetLastRampFinalDuration
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1588   .text.MCI_GetLastRampFinalSpeed_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1595   .text.MCI_GetLastRampFinalSpeed_F:00000000 MCI_GetLastRampFinalSpeed_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1634   .text.MCI_GetLastRampFinalSpeed_F:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1640   .text.MCI_RampCompleted:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1647   .text.MCI_RampCompleted:00000000 MCI_RampCompleted
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1694   .text.MCI_StopSpeedRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1701   .text.MCI_StopSpeedRamp:00000000 MCI_StopSpeedRamp
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1720   .text.MCI_StopRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1727   .text.MCI_StopRamp:00000000 MCI_StopRamp
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1745   .text.MCI_GetSpdSensorReliability:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1752   .text.MCI_GetSpdSensorReliability:00000000 MCI_GetSpdSensorReliability
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1788   .text.MCI_GetAvrgMecSpeedUnit:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1795   .text.MCI_GetAvrgMecSpeedUnit:00000000 MCI_GetAvrgMecSpeedUnit
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1831   .text.MCI_GetAvrgMecSpeed_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1838   .text.MCI_GetAvrgMecSpeed_F:00000000 MCI_GetAvrgMecSpeed_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1880   .text.MCI_GetAvrgMecSpeed_F:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1885   .text.MCI_GetMecSpeedRefUnit:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1892   .text.MCI_GetMecSpeedRefUnit:00000000 MCI_GetMecSpeedRefUnit
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1911   .text.MCI_GetMecSpeedRef_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1918   .text.MCI_GetMecSpeedRef_F:00000000 MCI_GetMecSpeedRef_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1954   .text.MCI_GetMecSpeedRef_F:00000024 $d
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1959   .text.MCI_GetIab:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:1966   .text.MCI_GetIab:00000000 MCI_GetIab
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2000   .text.MCI_GetIab_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2007   .text.MCI_GetIab_F:00000000 MCI_GetIab_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2057   .text.MCI_GetIalphabeta:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2064   .text.MCI_GetIalphabeta:00000000 MCI_GetIalphabeta
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2098   .text.MCI_GetIqd:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2105   .text.MCI_GetIqd:00000000 MCI_GetIqd
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2139   .text.MCI_GetIqd_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2146   .text.MCI_GetIqd_F:00000000 MCI_GetIqd_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2195   .text.MCI_GetIqdHF:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2202   .text.MCI_GetIqdHF:00000000 MCI_GetIqdHF
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2236   .text.MCI_GetIqdref:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2243   .text.MCI_GetIqdref:00000000 MCI_GetIqdref
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2277   .text.MCI_GetIqdref_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2284   .text.MCI_GetIqdref_F:00000000 MCI_GetIqdref_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2333   .text.MCI_GetVqd:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2340   .text.MCI_GetVqd:00000000 MCI_GetVqd
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2374   .text.MCI_GetValphabeta:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2381   .text.MCI_GetValphabeta:00000000 MCI_GetValphabeta
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2415   .text.MCI_GetElAngledpp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2422   .text.MCI_GetElAngledpp:00000000 MCI_GetElAngledpp
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2442   .text.MCI_GetTeref:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2449   .text.MCI_GetTeref:00000000 MCI_GetTeref
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2469   .text.MCI_GetTeref_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2476   .text.MCI_GetTeref_F:00000000 MCI_GetTeref_F
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2506   .text.MCI_GetPhaseCurrentAmplitude:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2513   .text.MCI_GetPhaseCurrentAmplitude:00000000 MCI_GetPhaseCurrentAmplitude
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2581   .text.MCI_GetPhaseVoltageAmplitude:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2588   .text.MCI_GetPhaseVoltageAmplitude:00000000 MCI_GetPhaseVoltageAmplitude
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2641   .text.MCI_Clear_Iqdref:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s 			page 90


C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:2648   .text.MCI_Clear_Iqdref:00000000 MCI_Clear_Iqdref
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:518    .text.MCI_ExecBufferedCommands:0000001f $d
C:\Users\ep_ygh\AppData\Local\Temp\cc7JoU7O.s:518    .text.MCI_ExecBufferedCommands:00000020 $t

UNDEFINED SYMBOLS
STC_SetControlMode
PWMC_GetOffsetCalib
VSS_SetMecAcceleration
STC_ExecRamp
PWMC_SetOffsetCalib
STC_RampCompleted
STC_StopSpeedRamp
STC_StopRamp
STC_GetSpeedSensor
SPD_Check
SPD_GetAvrgMecSpeedUnit
STC_GetMecSpeedRefUnit
MCM_Sqrt
STC_GetDefaultIqdref
