ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mc_interface.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MCI_Init,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.weak	MCI_Init
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MCI_Init:
  28              	.LVL0:
  29              	.LFB1090:
  30              		.file 1 "Src/mc_interface.c"
   1:Src/mc_interface.c **** 
   2:Src/mc_interface.c **** /**
   3:Src/mc_interface.c ****   ******************************************************************************
   4:Src/mc_interface.c ****   * @file    mc_interface.c
   5:Src/mc_interface.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_interface.c ****   * @brief   This file provides firmware functions that implement the features
   7:Src/mc_interface.c ****   *          of the MC Interface component of the Motor Control SDK:
   8:Src/mc_interface.c ****   *
   9:Src/mc_interface.c ****   ******************************************************************************
  10:Src/mc_interface.c ****   * @attention
  11:Src/mc_interface.c ****   *
  12:Src/mc_interface.c ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  13:Src/mc_interface.c ****   * All rights reserved.</center></h2>
  14:Src/mc_interface.c ****   *
  15:Src/mc_interface.c ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mc_interface.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mc_interface.c ****   * the License. You may obtain a copy of the License at:
  18:Src/mc_interface.c ****   *                             www.st.com/SLA0044
  19:Src/mc_interface.c ****   *
  20:Src/mc_interface.c ****   ******************************************************************************
  21:Src/mc_interface.c ****   * @ingroup MCInterface
  22:Src/mc_interface.c ****   */
  23:Src/mc_interface.c **** 
  24:Src/mc_interface.c **** /* Includes ------------------------------------------------------------------*/
  25:Src/mc_interface.c **** #include "mc_math.h"
  26:Src/mc_interface.c **** #include "speed_torq_ctrl.h"
  27:Src/mc_interface.c **** #include "mc_interface.h"
  28:Src/mc_interface.c **** #include "motorcontrol.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 2


  29:Src/mc_interface.c **** 
  30:Src/mc_interface.c **** #define ROUNDING_OFF
  31:Src/mc_interface.c **** 
  32:Src/mc_interface.c **** /** @addtogroup MCSDK
  33:Src/mc_interface.c ****   * @{
  34:Src/mc_interface.c ****   */
  35:Src/mc_interface.c **** 
  36:Src/mc_interface.c **** /** @addtogroup CAI
  37:Src/mc_interface.c ****   * @{
  38:Src/mc_interface.c ****   */
  39:Src/mc_interface.c **** 
  40:Src/mc_interface.c **** /** @defgroup MCInterface Motor Control Interface
  41:Src/mc_interface.c ****   * @brief MC Interface component of the Motor Control SDK
  42:Src/mc_interface.c ****   *
  43:Src/mc_interface.c ****   *  This interface allows for performing basic operations on the motor driven by a
  44:Src/mc_interface.c ****   *  Motor Control SDK based application. With it, motors can be started and stopped, speed or
  45:Src/mc_interface.c ****   *  torque ramps can be programmed and executed and information on the state of the motor can
  46:Src/mc_interface.c ****   *  be retrieved, among others.
  47:Src/mc_interface.c ****   *
  48:Src/mc_interface.c ****   *  These functions aims at being the main interface used by an application to control the motor.
  49:Src/mc_interface.c ****   *
  50:Src/mc_interface.c ****   * @{
  51:Src/mc_interface.c ****   */
  52:Src/mc_interface.c **** /* Private macros ------------------------------------------------------------*/
  53:Src/mc_interface.c **** 
  54:Src/mc_interface.c **** #define round(x) ((x)>=0?(int32_t)((x)+0.5):(int32_t)((x)-0.5))
  55:Src/mc_interface.c **** 
  56:Src/mc_interface.c **** /* Functions -----------------------------------------------*/
  57:Src/mc_interface.c **** 
  58:Src/mc_interface.c **** /**
  59:Src/mc_interface.c ****   * @brief  Initializes all the object variables, usually it has to be called
  60:Src/mc_interface.c ****   *         once right after object creation. It is also used to assign the
  61:Src/mc_interface.c ****   *         state machine object, the speed and torque controller, and the FOC
  62:Src/mc_interface.c ****   *         drive object to be used by MC Interface.
  63:Src/mc_interface.c ****   * @param  pHandle pointer on the component instance to initialize.
  64:Src/mc_interface.c ****   * @param  pSTC the speed and torque controller used by the MCI.
  65:Src/mc_interface.c ****   * @param  pFOCVars pointer to FOC vars to be used by MCI.
  66:Src/mc_interface.c ****   * @param  pPosCtrl pointer to the position controller to be used by the MCI
  67:Src/mc_interface.c ****   *         (only present if position control is enabled)
  68:Src/mc_interface.c ****   * @param  pPWMHandle pointer to the PWM & current feedback component to be used by the MCI.
  69:Src/mc_interface.c ****   */
  70:Src/mc_interface.c **** __weak void MCI_Init(MCI_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC,
  71:Src/mc_interface.c ****                      pFOCVars_t pFOCVars, PosCtrl_Handle_t *pPosCtrl, PWMC_Handle_t *pPWMHandle)
  72:Src/mc_interface.c **** {
  31              		.loc 1 72 1 view -0
  32              		.cfi_startproc
  33              		@ args = 4, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
  73:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  74:Src/mc_interface.c ****   if (MC_NULL == pHandle)
  75:Src/mc_interface.c ****   {
  76:Src/mc_interface.c ****     /* Nothing to do */
  77:Src/mc_interface.c ****   }
  78:Src/mc_interface.c ****   else
  79:Src/mc_interface.c ****   {
  80:Src/mc_interface.c **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 3


  81:Src/mc_interface.c ****     pHandle->pSTC = pSTC;
  36              		.loc 1 81 5 view .LVU1
  37              		.loc 1 81 19 is_stmt 0 view .LVU2
  38 0000 0160     		str	r1, [r0]
  82:Src/mc_interface.c ****     pHandle->pFOCVars = pFOCVars;
  39              		.loc 1 82 5 is_stmt 1 view .LVU3
  83:Src/mc_interface.c ****     pHandle->pPosCtrl = pPosCtrl;
  40              		.loc 1 83 23 is_stmt 0 view .LVU4
  41 0002 0361     		str	r3, [r0, #16]
  84:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  85:Src/mc_interface.c **** 
  86:Src/mc_interface.c ****     /* Buffer related initialization */
  87:Src/mc_interface.c ****     pHandle->lastCommand = MCI_NOCOMMANDSYET;
  42              		.loc 1 87 26 view .LVU5
  43 0004 0021     		movs	r1, #0
  44              	.LVL1:
  84:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  45              		.loc 1 84 19 view .LVU6
  46 0006 009B     		ldr	r3, [sp]
  47              	.LVL2:
  82:Src/mc_interface.c ****     pHandle->pPosCtrl = pPosCtrl;
  48              		.loc 1 82 23 view .LVU7
  49 0008 4260     		str	r2, [r0, #4]
  83:Src/mc_interface.c ****     pHandle->pPosCtrl = pPosCtrl;
  50              		.loc 1 83 5 is_stmt 1 view .LVU8
  84:Src/mc_interface.c ****     pHandle->pPWM = pPWMHandle;
  51              		.loc 1 84 5 view .LVU9
  88:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  89:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  90:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  91:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  92:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  93:Src/mc_interface.c ****     pHandle->State = IDLE;
  94:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  52              		.loc 1 94 28 is_stmt 0 view .LVU10
  53 000a C0E90911 		strd	r1, r1, [r0, #36]
  84:Src/mc_interface.c **** 
  54              		.loc 1 84 19 view .LVU11
  55 000e 8360     		str	r3, [r0, #8]
  87:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  56              		.loc 1 87 5 is_stmt 1 view .LVU12
  87:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  57              		.loc 1 87 26 is_stmt 0 view .LVU13
  58 0010 0175     		strb	r1, [r0, #20]
  88:Src/mc_interface.c ****     pHandle->hFinalSpeed = 0;
  59              		.loc 1 88 5 is_stmt 1 view .LVU14
  89:Src/mc_interface.c ****     pHandle->hDurationms = 0;
  60              		.loc 1 89 5 view .LVU15
  88:Src/mc_interface.c ****     pHandle->hFinalTorque = 0;
  61              		.loc 1 88 26 is_stmt 0 view .LVU16
  62 0012 C0F81610 		str	r1, [r0, #22]	@ unaligned
  90:Src/mc_interface.c ****     pHandle->CommandState = MCI_BUFFER_EMPTY;
  63              		.loc 1 90 5 is_stmt 1 view .LVU17
  91:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  64              		.loc 1 91 5 view .LVU18
  92:Src/mc_interface.c ****     pHandle->State = IDLE;
  65              		.loc 1 92 5 view .LVU19
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 4


  93:Src/mc_interface.c ****     pHandle->CurrentFaults = MC_NO_FAULTS;
  66              		.loc 1 93 5 view .LVU20
  67              		.loc 1 94 5 view .LVU21
  95:Src/mc_interface.c ****     pHandle->PastFaults = MC_NO_FAULTS;
  68              		.loc 1 95 5 view .LVU22
  91:Src/mc_interface.c ****     pHandle->DirectCommand = MCI_NO_COMMAND;
  69              		.loc 1 91 27 is_stmt 0 view .LVU23
  70 0016 80F82C10 		strb	r1, [r0, #44]
  96:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
  97:Src/mc_interface.c ****   }
  98:Src/mc_interface.c **** #endif
  99:Src/mc_interface.c **** }
  71              		.loc 1 99 1 view .LVU24
  72 001a 7047     		bx	lr
  73              		.cfi_endproc
  74              	.LFE1090:
  76              		.section	.text.MCI_ExecSpeedRamp,"ax",%progbits
  77              		.align	1
  78              		.p2align 2,,3
  79              		.weak	MCI_ExecSpeedRamp
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	MCI_ExecSpeedRamp:
  85              	.LVL3:
  86              	.LFB1091:
 100:Src/mc_interface.c **** 
 101:Src/mc_interface.c **** /**
 102:Src/mc_interface.c ****   * @brief  Programs a motor speed ramp
 103:Src/mc_interface.c ****   *
 104:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 105:Src/mc_interface.c ****   * @param  hFinalSpeed The value of mechanical rotor speed reference at the
 106:Src/mc_interface.c ****   *         end of the ramp expressed in the unit defined by #SPEED_UNIT.
 107:Src/mc_interface.c ****   * @param  hDurationms The duration of the ramp expressed in milliseconds. It
 108:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 109:Src/mc_interface.c ****   *         value.
 110:Src/mc_interface.c ****   *
 111:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 112:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 113:Src/mc_interface.c ****   * state is reached.
 114:Src/mc_interface.c ****   *
 115:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 116:Src/mc_interface.c ****   * function.
 117:Src/mc_interface.c ****   *
 118:Src/mc_interface.c ****   * @sa MCI_ExecSpeedRamp_F
 119:Src/mc_interface.c ****   */
 120:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle, int16_t hFinalSpeed, uint16_t hDurationms)
 121:Src/mc_interface.c **** {
  87              		.loc 1 121 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 122:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 123:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 124:Src/mc_interface.c ****   {
 125:Src/mc_interface.c ****     /* Nothing to do */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 5


 126:Src/mc_interface.c ****   }
 127:Src/mc_interface.c ****   else
 128:Src/mc_interface.c ****   {
 129:Src/mc_interface.c **** #endif
 130:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
  92              		.loc 1 130 5 view .LVU26
  93              		.loc 1 130 26 is_stmt 0 view .LVU27
  94 0000 4FF0010C 		mov	ip, #1
 131:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
 132:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 133:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
  95              		.loc 1 133 27 view .LVU28
  96 0004 40F20133 		movw	r3, #769
 130:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  97              		.loc 1 130 26 view .LVU29
  98 0008 80F814C0 		strb	ip, [r0, #20]
 131:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
  99              		.loc 1 131 5 is_stmt 1 view .LVU30
 131:Src/mc_interface.c ****     pHandle->hFinalSpeed = hFinalSpeed;
 100              		.loc 1 131 26 is_stmt 0 view .LVU31
 101 000c C182     		strh	r1, [r0, #22]	@ movhi
 132:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 102              		.loc 1 132 5 is_stmt 1 view .LVU32
 132:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 103              		.loc 1 132 26 is_stmt 0 view .LVU33
 104 000e 8284     		strh	r2, [r0, #36]	@ movhi
 105              		.loc 1 133 5 is_stmt 1 view .LVU34
 134:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 106              		.loc 1 134 5 view .LVU35
 133:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 107              		.loc 1 133 27 is_stmt 0 view .LVU36
 108 0010 8385     		strh	r3, [r0, #44]	@ movhi
 135:Src/mc_interface.c **** 
 136:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 137:Src/mc_interface.c ****   }
 138:Src/mc_interface.c **** #endif
 139:Src/mc_interface.c **** }
 109              		.loc 1 139 1 view .LVU37
 110 0012 7047     		bx	lr
 111              		.cfi_endproc
 112              	.LFE1091:
 114              		.section	.text.MCI_ExecSpeedRamp_F,"ax",%progbits
 115              		.align	1
 116              		.p2align 2,,3
 117              		.weak	MCI_ExecSpeedRamp_F
 118              		.syntax unified
 119              		.thumb
 120              		.thumb_func
 122              	MCI_ExecSpeedRamp_F:
 123              	.LVL4:
 124              	.LFB1092:
 140:Src/mc_interface.c **** 
 141:Src/mc_interface.c **** /**
 142:Src/mc_interface.c ****   * @brief  Programs a motor speed ramp
 143:Src/mc_interface.c ****   *
 144:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to operate on.
 145:Src/mc_interface.c ****   * @param  FinalSpeed is the value of mechanical rotor speed reference at the
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 6


 146:Src/mc_interface.c ****   *         end of the ramp expressed in RPM.
 147:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 148:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 149:Src/mc_interface.c ****   *         value.
 150:Src/mc_interface.c ****   *
 151:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 152:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 153:Src/mc_interface.c ****   * state is reached.
 154:Src/mc_interface.c ****   *
 155:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 156:Src/mc_interface.c ****   * function.
 157:Src/mc_interface.c ****   *
 158:Src/mc_interface.c ****   * @sa MCI_ExecSpeedRamp
 159:Src/mc_interface.c ****   */
 160:Src/mc_interface.c **** __weak void MCI_ExecSpeedRamp_F(MCI_Handle_t *pHandle, const float_t FinalSpeed, uint16_t hDuration
 161:Src/mc_interface.c **** {
 125              		.loc 1 161 1 is_stmt 1 view -0
 126              		.cfi_startproc
 127              		@ args = 0, pretend = 0, frame = 0
 128              		@ frame_needed = 0, uses_anonymous_args = 0
 162:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 163:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 164:Src/mc_interface.c ****   {
 165:Src/mc_interface.c ****     /* Nothing to do */
 166:Src/mc_interface.c ****   }
 167:Src/mc_interface.c ****   else
 168:Src/mc_interface.c ****   {
 169:Src/mc_interface.c **** #endif
 170:Src/mc_interface.c ****     int16_t hFinalSpeed = (((int16_t)FinalSpeed * (int16_t)SPEED_UNIT) / (int16_t)U_RPM);
 129              		.loc 1 170 5 view .LVU39
 171:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 130              		.loc 1 171 5 view .LVU40
 170:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 131              		.loc 1 170 29 is_stmt 0 view .LVU41
 132 0000 BDEEC00A 		vcvt.s32.f32	s0, s0
 133              	.LVL5:
 161:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 134              		.loc 1 161 1 view .LVU42
 135 0004 10B5     		push	{r4, lr}
 136              	.LCFI0:
 137              		.cfi_def_cfa_offset 8
 138              		.cfi_offset 4, -8
 139              		.cfi_offset 14, -4
 170:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 140              		.loc 1 170 13 view .LVU43
 141 0006 10EE103A 		vmov	r3, s0	@ int
 142 000a 054C     		ldr	r4, .L6
 143 000c 1BB2     		sxth	r3, r3
 161:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 144              		.loc 1 161 1 view .LVU44
 145 000e 0A46     		mov	r2, r1
 170:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 146              		.loc 1 170 13 view .LVU45
 147 0010 84FB0314 		smull	r1, r4, r4, r3
 148              	.LVL6:
 170:Src/mc_interface.c ****     MCI_ExecSpeedRamp(pHandle, hFinalSpeed, hDurationms);
 149              		.loc 1 170 13 view .LVU46
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 7


 150 0014 A4EBE373 		sub	r3, r4, r3, asr #31
 151              		.loc 1 171 5 view .LVU47
 152 0018 19B2     		sxth	r1, r3
 153 001a FFF7FEFF 		bl	MCI_ExecSpeedRamp
 154              	.LVL7:
 172:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 173:Src/mc_interface.c ****   }
 174:Src/mc_interface.c **** #endif
 175:Src/mc_interface.c **** }
 155              		.loc 1 175 1 view .LVU48
 156 001e 10BD     		pop	{r4, pc}
 157              	.L7:
 158              		.align	2
 159              	.L6:
 160 0020 ABAAAA2A 		.word	715827883
 161              		.cfi_endproc
 162              	.LFE1092:
 164              		.section	.text.MCI_ExecTorqueRamp,"ax",%progbits
 165              		.align	1
 166              		.p2align 2,,3
 167              		.weak	MCI_ExecTorqueRamp
 168              		.syntax unified
 169              		.thumb
 170              		.thumb_func
 172              	MCI_ExecTorqueRamp:
 173              	.LVL8:
 174              	.LFB1093:
 176:Src/mc_interface.c **** 
 177:Src/mc_interface.c **** /**
 178:Src/mc_interface.c ****   * @brief  Programs a motor torque ramp
 179:Src/mc_interface.c ****   *
 180:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 181:Src/mc_interface.c ****   * @param  hFinalTorque is the value of motor torque reference at the end of
 182:Src/mc_interface.c ****   *         the ramp. This value represents actually the $I_q$ current expressed in
 183:Src/mc_interface.c ****   *         digit.
 184:Src/mc_interface.c ****   *         To convert current expressed in Amps to current expressed in digit
 185:Src/mc_interface.c ****   *         is possible to use the formula:
 186:Src/mc_interface.c ****   *         Current (digit) = [Current(Amp) * 65536 * Rshunt * Aop] / Vdd micro.
 187:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 188:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 189:Src/mc_interface.c ****   *         value.
 190:Src/mc_interface.c ****   *
 191:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 192:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 193:Src/mc_interface.c ****   * state is reached.
 194:Src/mc_interface.c ****   *
 195:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 196:Src/mc_interface.c ****   * function.
 197:Src/mc_interface.c ****   *
 198:Src/mc_interface.c ****   * @sa MCI_ExecTorqueRamp_F
 199:Src/mc_interface.c ****   */
 200:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp(MCI_Handle_t *pHandle, int16_t hFinalTorque, uint16_t hDurationms)
 201:Src/mc_interface.c **** {
 175              		.loc 1 201 1 is_stmt 1 view -0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 8


 179              		@ link register save eliminated.
 202:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 203:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 204:Src/mc_interface.c ****   {
 205:Src/mc_interface.c ****     /* Nothing to do */
 206:Src/mc_interface.c ****   }
 207:Src/mc_interface.c ****   else
 208:Src/mc_interface.c ****   {
 209:Src/mc_interface.c **** #endif
 210:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 180              		.loc 1 210 5 view .LVU50
 181              		.loc 1 210 26 is_stmt 0 view .LVU51
 182 0000 4FF0020C 		mov	ip, #2
 211:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 212:Src/mc_interface.c ****     pHandle->hDurationms = hDurationms;
 213:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 183              		.loc 1 213 27 view .LVU52
 184 0004 40F20143 		movw	r3, #1025
 210:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 185              		.loc 1 210 26 view .LVU53
 186 0008 80F814C0 		strb	ip, [r0, #20]
 211:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 187              		.loc 1 211 5 is_stmt 1 view .LVU54
 211:Src/mc_interface.c ****     pHandle->hFinalTorque = hFinalTorque;
 188              		.loc 1 211 27 is_stmt 0 view .LVU55
 189 000c 0183     		strh	r1, [r0, #24]	@ movhi
 212:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 190              		.loc 1 212 5 is_stmt 1 view .LVU56
 212:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 191              		.loc 1 212 26 is_stmt 0 view .LVU57
 192 000e 8284     		strh	r2, [r0, #36]	@ movhi
 193              		.loc 1 213 5 is_stmt 1 view .LVU58
 214:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 194              		.loc 1 214 5 view .LVU59
 213:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 195              		.loc 1 213 27 is_stmt 0 view .LVU60
 196 0010 8385     		strh	r3, [r0, #44]	@ movhi
 215:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 216:Src/mc_interface.c ****   }
 217:Src/mc_interface.c **** #endif
 218:Src/mc_interface.c **** }
 197              		.loc 1 218 1 view .LVU61
 198 0012 7047     		bx	lr
 199              		.cfi_endproc
 200              	.LFE1093:
 202              		.section	.text.MCI_ExecTorqueRamp_F,"ax",%progbits
 203              		.align	1
 204              		.p2align 2,,3
 205              		.weak	MCI_ExecTorqueRamp_F
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 210              	MCI_ExecTorqueRamp_F:
 211              	.LVL9:
 212              	.LFB1094:
 219:Src/mc_interface.c **** 
 220:Src/mc_interface.c **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 9


 221:Src/mc_interface.c ****   * @brief  Programs a motor torque ramp
 222:Src/mc_interface.c ****   *
 223:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 224:Src/mc_interface.c ****   * @param  FinalTorque is the value of motor torque reference at the end of
 225:Src/mc_interface.c ****   *         the ramp. This value represents actually the $I_q$ current expressed in
 226:Src/mc_interface.c ****   *         Ampere.
 227:Src/mc_interface.c ****   *         Here the formula for conversion from current in Ampere to digit:
 228:Src/mc_interface.c ****   *           I(s16) = [i(Amp) * 65536 * Rshunt * Aop] / Vdd_micro.
 229:Src/mc_interface.c ****   * @param  hDurationms the duration of the ramp expressed in milliseconds. It
 230:Src/mc_interface.c ****   *         is possible to set 0 to perform an instantaneous change in the
 231:Src/mc_interface.c ****   *         value.
 232:Src/mc_interface.c ****   *
 233:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 234:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 235:Src/mc_interface.c ****   * state is reached.
 236:Src/mc_interface.c ****   *
 237:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 238:Src/mc_interface.c ****   * function.
 239:Src/mc_interface.c ****   *
 240:Src/mc_interface.c ****   * @sa MCI_ExecTorqueRamp
 241:Src/mc_interface.c ****   */
 242:Src/mc_interface.c **** __weak void MCI_ExecTorqueRamp_F(MCI_Handle_t *pHandle, const float_t FinalTorque, uint16_t hDurati
 243:Src/mc_interface.c **** {
 213              		.loc 1 243 1 is_stmt 1 view -0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 244:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 245:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 246:Src/mc_interface.c ****   {
 247:Src/mc_interface.c ****     /* Nothing to do */
 248:Src/mc_interface.c ****   }
 249:Src/mc_interface.c ****   else
 250:Src/mc_interface.c ****   {
 251:Src/mc_interface.c **** #endif
 252:Src/mc_interface.c ****     int16_t hFinalTorque = ((int16_t)FinalTorque * (int16_t)CURRENT_CONV_FACTOR);
 217              		.loc 1 252 5 view .LVU63
 253:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 218              		.loc 1 253 5 view .LVU64
 252:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 219              		.loc 1 252 29 is_stmt 0 view .LVU65
 220 0000 FDEEC07A 		vcvt.s32.f32	s15, s0
 243:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 221              		.loc 1 243 1 view .LVU66
 222 0004 08B5     		push	{r3, lr}
 223              	.LCFI1:
 224              		.cfi_def_cfa_offset 8
 225              		.cfi_offset 3, -8
 226              		.cfi_offset 14, -4
 252:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 227              		.loc 1 252 29 view .LVU67
 228 0006 17EE903A 		vmov	r3, s15	@ int
 243:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 229              		.loc 1 243 1 view .LVU68
 230 000a 0A46     		mov	r2, r1
 252:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 231              		.loc 1 252 50 view .LVU69
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 10


 232 000c 03EBC301 		add	r1, r3, r3, lsl #3
 233              	.LVL10:
 252:Src/mc_interface.c ****     MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 234              		.loc 1 252 50 view .LVU70
 235 0010 C1EB4111 		rsb	r1, r1, r1, lsl #5
 236 0014 C3EB4101 		rsb	r1, r3, r1, lsl #1
 237 0018 01EBC101 		add	r1, r1, r1, lsl #3
 238 001c 03EB4101 		add	r1, r3, r1, lsl #1
 239              		.loc 1 253 5 view .LVU71
 240 0020 09B2     		sxth	r1, r1
 241 0022 FFF7FEFF 		bl	MCI_ExecTorqueRamp
 242              	.LVL11:
 254:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 255:Src/mc_interface.c ****   }
 256:Src/mc_interface.c **** #endif
 257:Src/mc_interface.c **** }
 243              		.loc 1 257 1 view .LVU72
 244 0026 08BD     		pop	{r3, pc}
 245              		.cfi_endproc
 246              	.LFE1094:
 248              		.section	.text.MCI_SetCurrentReferences,"ax",%progbits
 249              		.align	1
 250              		.p2align 2,,3
 251              		.weak	MCI_SetCurrentReferences
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 256              	MCI_SetCurrentReferences:
 257              	.LVL12:
 258              	.LFB1095:
 258:Src/mc_interface.c **** 
 259:Src/mc_interface.c **** /**
 260:Src/mc_interface.c ****   * @brief  Sets the motor current references $I_q$ and $I_d$ directly.
 261:Src/mc_interface.c ****   *
 262:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 263:Src/mc_interface.c ****   * @param  Iqdref current references on qd reference frame in qd_t format.
 264:Src/mc_interface.c ****   *
 265:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 266:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 267:Src/mc_interface.c ****   * state is reached.
 268:Src/mc_interface.c ****   *
 269:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 270:Src/mc_interface.c ****   * function.
 271:Src/mc_interface.c **** 
 272:Src/mc_interface.c ****   @sa MCI_SetCurrentReferences_F
 273:Src/mc_interface.c ****   */
 274:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
 275:Src/mc_interface.c **** {
 259              		.loc 1 275 1 is_stmt 1 view -0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 8
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              		@ link register save eliminated.
 276:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 277:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 278:Src/mc_interface.c ****   {
 279:Src/mc_interface.c ****     /* Nothing to do */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 11


 280:Src/mc_interface.c ****   }
 281:Src/mc_interface.c ****   else
 282:Src/mc_interface.c ****   {
 283:Src/mc_interface.c **** #endif
 284:Src/mc_interface.c **** 
 285:Src/mc_interface.c ****     pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 264              		.loc 1 285 5 view .LVU74
 275:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 265              		.loc 1 275 1 is_stmt 0 view .LVU75
 266 0000 82B0     		sub	sp, sp, #8
 267              	.LCFI2:
 268              		.cfi_def_cfa_offset 8
 269              		.loc 1 285 26 view .LVU76
 270 0002 0322     		movs	r2, #3
 286:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 287:Src/mc_interface.c ****     pHandle->Iqdref.d = Iqdref.d;
 288:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 271              		.loc 1 288 27 view .LVU77
 272 0004 40F20143 		movw	r3, #1025
 285:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 273              		.loc 1 285 26 view .LVU78
 274 0008 0275     		strb	r2, [r0, #20]
 286:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 275              		.loc 1 286 5 is_stmt 1 view .LVU79
 287:Src/mc_interface.c ****     pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 276              		.loc 1 287 5 view .LVU80
 286:Src/mc_interface.c ****     pHandle->Iqdref.q = Iqdref.q;
 277              		.loc 1 286 23 is_stmt 0 view .LVU81
 278 000a C0F81A10 		str	r1, [r0, #26]	@ unaligned
 279              		.loc 1 288 5 is_stmt 1 view .LVU82
 289:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 280              		.loc 1 289 5 view .LVU83
 288:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 281              		.loc 1 288 27 is_stmt 0 view .LVU84
 282 000e 8385     		strh	r3, [r0, #44]	@ movhi
 290:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 291:Src/mc_interface.c ****   }
 292:Src/mc_interface.c **** #endif
 293:Src/mc_interface.c **** }
 283              		.loc 1 293 1 view .LVU85
 284 0010 02B0     		add	sp, sp, #8
 285              	.LCFI3:
 286              		.cfi_def_cfa_offset 0
 287              		@ sp needed
 288 0012 7047     		bx	lr
 289              		.cfi_endproc
 290              	.LFE1095:
 292              		.section	.text.MCI_SetCurrentReferences_F,"ax",%progbits
 293              		.align	1
 294              		.p2align 2,,3
 295              		.weak	MCI_SetCurrentReferences_F
 296              		.syntax unified
 297              		.thumb
 298              		.thumb_func
 300              	MCI_SetCurrentReferences_F:
 301              	.LVL13:
 302              	.LFB1096:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 12


 294:Src/mc_interface.c **** 
 295:Src/mc_interface.c **** /**
 296:Src/mc_interface.c ****   * @brief  Sets the motor current references $I_q$ and $I_d$ directly.
 297:Src/mc_interface.c ****   *
 298:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 299:Src/mc_interface.c ****   * @param  IqdRef current (A) references on qd reference frame in qd_f_t format.
 300:Src/mc_interface.c ****   *
 301:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 302:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 303:Src/mc_interface.c ****   * state is reached.
 304:Src/mc_interface.c ****   *
 305:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 306:Src/mc_interface.c ****   * function.
 307:Src/mc_interface.c **** 
 308:Src/mc_interface.c ****   @sa MCI_SetCurrentReferences
 309:Src/mc_interface.c ****   */
 310:Src/mc_interface.c **** __weak void MCI_SetCurrentReferences_F(MCI_Handle_t *pHandle, qd_f_t IqdRef)
 311:Src/mc_interface.c **** {
 303              		.loc 1 311 1 is_stmt 1 view -0
 304              		.cfi_startproc
 305              		@ args = 0, pretend = 0, frame = 16
 306              		@ frame_needed = 0, uses_anonymous_args = 0
 312:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 313:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 314:Src/mc_interface.c ****   {
 315:Src/mc_interface.c ****     /* Nothing to do */
 316:Src/mc_interface.c ****   }
 317:Src/mc_interface.c ****   else
 318:Src/mc_interface.c ****   {
 319:Src/mc_interface.c **** #endif
 320:Src/mc_interface.c ****     qd_t iqDrefTemp;
 307              		.loc 1 320 5 view .LVU87
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 308              		.loc 1 321 5 view .LVU88
 322:Src/mc_interface.c ****     iqDrefTemp.q = (int16_t)((int16_t)IqdRef.q * (int16_t)CURRENT_CONV_FACTOR);
 309              		.loc 1 322 30 is_stmt 0 view .LVU89
 310 0000 FDEEC07A 		vcvt.s32.f32	s15, s0
 311:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 311              		.loc 1 311 1 view .LVU90
 312 0004 00B5     		push	{lr}
 313              	.LCFI4:
 314              		.cfi_def_cfa_offset 4
 315              		.cfi_offset 14, -4
 316              		.loc 1 322 30 view .LVU91
 317 0006 17EE901A 		vmov	r1, s15	@ int
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 318              		.loc 1 321 30 view .LVU92
 319 000a FDEEE07A 		vcvt.s32.f32	s15, s1
 320              		.loc 1 322 48 view .LVU93
 321 000e 01EBC103 		add	r3, r1, r1, lsl #3
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 322              		.loc 1 321 30 view .LVU94
 323 0012 17EE90CA 		vmov	ip, s15	@ int
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 324              		.loc 1 321 48 view .LVU95
 325 0016 0CEBCC02 		add	r2, ip, ip, lsl #3
 326 001a C2EB4212 		rsb	r2, r2, r2, lsl #5
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 13


 327              		.loc 1 322 48 view .LVU96
 328 001e C3EB4313 		rsb	r3, r3, r3, lsl #5
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 329              		.loc 1 321 48 view .LVU97
 330 0022 CCEB4202 		rsb	r2, ip, r2, lsl #1
 331              		.loc 1 322 48 view .LVU98
 332 0026 C1EB4303 		rsb	r3, r1, r3, lsl #1
 311:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 333              		.loc 1 311 1 view .LVU99
 334 002a 85B0     		sub	sp, sp, #20
 335              	.LCFI5:
 336              		.cfi_def_cfa_offset 24
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 337              		.loc 1 321 48 view .LVU100
 338 002c 02EBC202 		add	r2, r2, r2, lsl #3
 339              		.loc 1 322 48 view .LVU101
 340 0030 03EBC303 		add	r3, r3, r3, lsl #3
 341 0034 01EB4303 		add	r3, r1, r3, lsl #1
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 342              		.loc 1 321 48 view .LVU102
 343 0038 0CEB4202 		add	r2, ip, r2, lsl #1
 321:Src/mc_interface.c ****     iqDrefTemp.d = (int16_t)((int16_t)IqdRef.d * (int16_t)CURRENT_CONV_FACTOR);
 344              		.loc 1 321 18 view .LVU103
 345 003c ADF80E20 		strh	r2, [sp, #14]	@ movhi
 346              		.loc 1 322 5 is_stmt 1 view .LVU104
 347              		.loc 1 322 18 is_stmt 0 view .LVU105
 348 0040 ADF80C30 		strh	r3, [sp, #12]	@ movhi
 323:Src/mc_interface.c ****     MCI_SetCurrentReferences(pHandle, iqDrefTemp);
 349              		.loc 1 323 5 is_stmt 1 view .LVU106
 350 0044 0399     		ldr	r1, [sp, #12]
 351 0046 FFF7FEFF 		bl	MCI_SetCurrentReferences
 352              	.LVL14:
 324:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 325:Src/mc_interface.c ****   }
 326:Src/mc_interface.c **** #endif
 327:Src/mc_interface.c **** }
 353              		.loc 1 327 1 is_stmt 0 view .LVU107
 354 004a 05B0     		add	sp, sp, #20
 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 4
 357              		@ sp needed
 358 004c 5DF804FB 		ldr	pc, [sp], #4
 359              		.cfi_endproc
 360              	.LFE1096:
 362              		.section	.text.MCI_ExecPositionCommand,"ax",%progbits
 363              		.align	1
 364              		.p2align 2,,3
 365              		.weak	MCI_ExecPositionCommand
 366              		.syntax unified
 367              		.thumb
 368              		.thumb_func
 370              	MCI_ExecPositionCommand:
 371              	.LVL15:
 372              	.LFB1097:
 328:Src/mc_interface.c **** 
 329:Src/mc_interface.c **** /**
 330:Src/mc_interface.c ****   * @brief  Programs a motor position ramp
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 14


 331:Src/mc_interface.c ****   *
 332:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 333:Src/mc_interface.c ****   * @param  FinalPosition The desired rotor position in radians.
 334:Src/mc_interface.c ****   * @param  Duration The duration of the movement to reach the final position, in seconds.
 335:Src/mc_interface.c ****   *
 336:Src/mc_interface.c ****   *  This command is executed immediately if the target motor's state machine is in
 337:Src/mc_interface.c ****   * the #RUN state. Otherwise, it is buffered and its execution is delayed until This
 338:Src/mc_interface.c ****   * state is reached.
 339:Src/mc_interface.c ****   *
 340:Src/mc_interface.c ****   * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
 341:Src/mc_interface.c ****   * function.
 342:Src/mc_interface.c ****   */
 343:Src/mc_interface.c **** __weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float_t FinalPosition, float_t Duration)
 344:Src/mc_interface.c **** {
 373              		.loc 1 344 1 is_stmt 1 view -0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 8
 376              		@ frame_needed = 0, uses_anonymous_args = 0
 345:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 346:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 347:Src/mc_interface.c ****   {
 348:Src/mc_interface.c ****     /* Nothing to do */
 349:Src/mc_interface.c ****   }
 350:Src/mc_interface.c ****   else
 351:Src/mc_interface.c ****   {
 352:Src/mc_interface.c **** #endif
 353:Src/mc_interface.c ****     pHandle->pFOCVars->bDriveInput = INTERNAL;
 377              		.loc 1 353 5 view .LVU109
 344:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 378              		.loc 1 344 1 is_stmt 0 view .LVU110
 379 0000 10B5     		push	{r4, lr}
 380              	.LCFI7:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 4, -8
 383              		.cfi_offset 14, -4
 384              		.loc 1 353 36 view .LVU111
 385 0002 4368     		ldr	r3, [r0, #4]
 344:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 386              		.loc 1 344 1 view .LVU112
 387 0004 2DED028B 		vpush.64	{d8}
 388              	.LCFI8:
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 80, -16
 391              		.cfi_offset 81, -12
 392              		.loc 1 353 36 view .LVU113
 393 0008 0022     		movs	r2, #0
 394 000a 83F82420 		strb	r2, [r3, #36]
 354:Src/mc_interface.c ****     float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RA
 395              		.loc 1 354 5 is_stmt 1 view .LVU114
 344:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 396              		.loc 1 344 1 is_stmt 0 view .LVU115
 397 000e 82B0     		sub	sp, sp, #8
 398              	.LCFI9:
 399              		.cfi_def_cfa_offset 24
 344:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 400              		.loc 1 344 1 view .LVU116
 401 0010 0446     		mov	r4, r0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 15


 402              		.loc 1 354 60 view .LVU117
 403 0012 0068     		ldr	r0, [r0]
 404              	.LVL16:
 344:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 405              		.loc 1 344 1 view .LVU118
 406 0014 B0EE608A 		vmov.f32	s16, s1
 407 0018 F0EE408A 		vmov.f32	s17, s0
 408              		.loc 1 354 60 view .LVU119
 409 001c FFF7FEFF 		bl	STC_GetSpeedSensor
 410              	.LVL17:
 411              		.loc 1 354 44 view .LVU120
 412 0020 FFF7FEFF 		bl	SPD_GetMecAngle
 413              	.LVL18:
 355:Src/mc_interface.c ****     if (Duration > 0)
 414              		.loc 1 355 8 view .LVU121
 415 0024 B5EEC08A 		vcmpe.f32	s16, #0
 416 0028 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 354:Src/mc_interface.c ****     float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RA
 417              		.loc 1 354 44 view .LVU122
 418 002c 0190     		str	r0, [sp, #4]
 419              	.LVL19:
 420              		.loc 1 355 5 is_stmt 1 view .LVU123
 421              		.loc 1 355 8 is_stmt 0 view .LVU124
 422 002e 15DD     		ble	.L20
 354:Src/mc_interface.c ****     float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RA
 423              		.loc 1 354 34 view .LVU125
 424 0030 07EE900A 		vmov	s15, r0	@ int
 354:Src/mc_interface.c ****     float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RA
 425              		.loc 1 354 13 view .LVU126
 426 0034 9FED0C7A 		vldr.32	s14, .L22
 356:Src/mc_interface.c ****     {
 357:Src/mc_interface.c ****       TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Dur
 427              		.loc 1 357 7 view .LVU127
 428 0038 2069     		ldr	r0, [r4, #16]
 429              	.LVL20:
 354:Src/mc_interface.c ****     if (Duration > 0)
 430              		.loc 1 354 34 view .LVU128
 431 003a F8EEE77A 		vcvt.f32.s32	s15, s15
 432              	.LVL21:
 433              		.loc 1 357 7 view .LVU129
 434 003e B0EE481A 		vmov.f32	s2, s16
 354:Src/mc_interface.c ****     if (Duration > 0)
 435              		.loc 1 354 13 view .LVU130
 436 0042 87EE870A 		vdiv.f32	s0, s15, s14
 437              		.loc 1 357 7 is_stmt 1 view .LVU131
 438 0046 78EEC00A 		vsub.f32	s1, s17, s0
 439 004a FFF7FEFF 		bl	TC_MoveCommand
 440              	.LVL22:
 441              	.L18:
 358:Src/mc_interface.c ****     }
 359:Src/mc_interface.c ****     else
 360:Src/mc_interface.c ****     {
 361:Src/mc_interface.c ****       TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 362:Src/mc_interface.c ****     }
 363:Src/mc_interface.c **** 
 364:Src/mc_interface.c ****     pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 442              		.loc 1 364 5 view .LVU132
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 16


 443              		.loc 1 364 36 is_stmt 0 view .LVU133
 444 004e 0423     		movs	r3, #4
 445 0050 84F82D30 		strb	r3, [r4, #45]
 365:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 366:Src/mc_interface.c ****   }
 367:Src/mc_interface.c **** #endif
 368:Src/mc_interface.c **** }
 446              		.loc 1 368 1 view .LVU134
 447 0054 02B0     		add	sp, sp, #8
 448              	.LCFI10:
 449              		.cfi_remember_state
 450              		.cfi_def_cfa_offset 16
 451              		@ sp needed
 452 0056 BDEC028B 		vldm	sp!, {d8}
 453              	.LCFI11:
 454              		.cfi_restore 80
 455              		.cfi_restore 81
 456              		.cfi_def_cfa_offset 8
 457              	.LVL23:
 458              		.loc 1 368 1 view .LVU135
 459 005a 10BD     		pop	{r4, pc}
 460              	.LVL24:
 461              	.L20:
 462              	.LCFI12:
 463              		.cfi_restore_state
 361:Src/mc_interface.c ****     }
 464              		.loc 1 361 7 is_stmt 1 view .LVU136
 465 005c 2069     		ldr	r0, [r4, #16]
 466              	.LVL25:
 361:Src/mc_interface.c ****     }
 467              		.loc 1 361 7 is_stmt 0 view .LVU137
 468 005e B0EE680A 		vmov.f32	s0, s17
 469 0062 FFF7FEFF 		bl	TC_FollowCommand
 470              	.LVL26:
 471 0066 F2E7     		b	.L18
 472              	.L23:
 473              		.align	2
 474              	.L22:
 475 0068 83F92246 		.word	1176697219
 476              		.cfi_endproc
 477              	.LFE1097:
 479              		.section	.text.MCI_GetCalibratedOffsetsMotor,"ax",%progbits
 480              		.align	1
 481              		.p2align 2,,3
 482              		.weak	MCI_GetCalibratedOffsetsMotor
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
 487              	MCI_GetCalibratedOffsetsMotor:
 488              	.LVL27:
 489              	.LFB1101:
 369:Src/mc_interface.c **** 
 370:Src/mc_interface.c **** /**
 371:Src/mc_interface.c ****   * @brief  Initiates a motor startup procedure
 372:Src/mc_interface.c ****   *
 373:Src/mc_interface.c ****   * @param  pHandle Handle on the target motor interface structure
 374:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 17


 375:Src/mc_interface.c ****   *         returns false otherwise
 376:Src/mc_interface.c ****   *
 377:Src/mc_interface.c ****   *  If the state machine of target the motor is in #IDLE state the command is
 378:Src/mc_interface.c ****   * executed instantaneously otherwise it is discarded. Users can check
 379:Src/mc_interface.c ****   * the return value of the function to get its status. The state of the motor
 380:Src/mc_interface.c ****   * can be queried with the MCI_GetSTMState() function.
 381:Src/mc_interface.c ****   *
 382:Src/mc_interface.c ****   * Before calling MCI_StartMotor() it is mandatory to execute one of the
 383:Src/mc_interface.c ****   * following commands, in order to set a torque or a speed reference
 384:Src/mc_interface.c ****   * otherwise the behavior of the motor when it reaches the #RUN state will
 385:Src/mc_interface.c ****   * be unpredictable:
 386:Src/mc_interface.c ****   *  - MCI_ExecSpeedRamp
 387:Src/mc_interface.c ****   *  - MCI_ExecTorqueRamp
 388:Src/mc_interface.c ****   *  - MCI_SetCurrentReferences
 389:Src/mc_interface.c ****   *
 390:Src/mc_interface.c ****   * If the offsets of the current measurement circuitry offsets are not known yet,
 391:Src/mc_interface.c ****   * an offset calibration procedure is executed to measure them prior to acutally
 392:Src/mc_interface.c ****   * starting up the motor.
 393:Src/mc_interface.c ****   *
 394:Src/mc_interface.c ****   * @note The MCI_StartMotor command only triggers the execution of the start-up
 395:Src/mc_interface.c ****   * procedure (or eventually the offset calibration procedure) and returns
 396:Src/mc_interface.c ****   * immediately after. It is not blocking the execution of the application until
 397:Src/mc_interface.c ****   * the motor is indeed running in steady state. If the application needs to wait
 398:Src/mc_interface.c ****   * for the motor to be running in steady state, the application has to check the
 399:Src/mc_interface.c ****   * state machine of the motor and verify that the #RUN state has been reached.
 400:Src/mc_interface.c ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
 401:Src/mc_interface.c ****   */
 402:Src/mc_interface.c **** __weak bool MCI_StartMotor(MCI_Handle_t *pHandle)
 403:Src/mc_interface.c **** {
 404:Src/mc_interface.c ****   bool retVal = false;
 405:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 406:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 407:Src/mc_interface.c ****   {
 408:Src/mc_interface.c ****     /* Nothing to do */
 409:Src/mc_interface.c ****   }
 410:Src/mc_interface.c ****   else
 411:Src/mc_interface.c ****   {
 412:Src/mc_interface.c **** #endif
 413:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 414:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 415:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 416:Src/mc_interface.c ****     {
 417:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_START;
 418:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 419:Src/mc_interface.c ****       retVal = true;
 420:Src/mc_interface.c ****     }
 421:Src/mc_interface.c ****     else
 422:Src/mc_interface.c ****     {
 423:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 424:Src/mc_interface.c ****     }
 425:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 426:Src/mc_interface.c ****   }
 427:Src/mc_interface.c **** #endif
 428:Src/mc_interface.c ****   return (retVal);
 429:Src/mc_interface.c **** }
 430:Src/mc_interface.c **** 
 431:Src/mc_interface.c **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 18


 432:Src/mc_interface.c ****   * @brief  Initiates a motor startup procedure preceded by an offset
 433:Src/mc_interface.c ****   *         calibration procedure
 434:Src/mc_interface.c ****   *
 435:Src/mc_interface.c ****   * @param  pHandle Handle on the target motor interface structure
 436:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed;
 437:Src/mc_interface.c ****   *         returns false otherwise
 438:Src/mc_interface.c ****   *
 439:Src/mc_interface.c ****   *  If the state machine of target the motor is in #IDLE state the command is
 440:Src/mc_interface.c ****   * executed instantaneously otherwise it is discarded. Users can check
 441:Src/mc_interface.c ****   * the return value of the function to get its status. The state of the motor
 442:Src/mc_interface.c ****   * can be queried with the MCI_GetSTMState() function.
 443:Src/mc_interface.c ****   *
 444:Src/mc_interface.c ****   * Before calling MCI_StartMotor() it is mandatory to execute one of the
 445:Src/mc_interface.c ****   * following commands, in order to set a torque or a speed reference
 446:Src/mc_interface.c ****   * otherwise the behavior of the motor when it reaches the #RUN state will
 447:Src/mc_interface.c ****   * be unpredictable:
 448:Src/mc_interface.c ****   *  - MCI_ExecSpeedRamp
 449:Src/mc_interface.c ****   *  - MCI_ExecTorqueRamp
 450:Src/mc_interface.c ****   *  - MCI_SetCurrentReferences
 451:Src/mc_interface.c ****   *
 452:Src/mc_interface.c ****   * Whether the current measurement circuitry offsets are known or not, an
 453:Src/mc_interface.c ****   * offset calibration procedure is executed to (re)measure them. Once it has
 454:Src/mc_interface.c ****   * completed, the start up procedure of the motor is executed.
 455:Src/mc_interface.c ****   *
 456:Src/mc_interface.c ****   * @note The MCI_StartMotor command only triggers the execution of the start-up
 457:Src/mc_interface.c ****   * procedure (or eventually the offset calibration procedure) and returns
 458:Src/mc_interface.c ****   * immediately after. It is not blocking the execution of the application until
 459:Src/mc_interface.c ****   * the motor is indeed running in steady state. If the application needs to wait
 460:Src/mc_interface.c ****   * for the motor to be running in steady state, the application has to check the
 461:Src/mc_interface.c ****   * state machine of the motor and verify that the #RUN state has been reached.
 462:Src/mc_interface.c ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
 463:Src/mc_interface.c ****   */
 464:Src/mc_interface.c **** __weak bool MCI_StartWithPolarizationMotor(MCI_Handle_t* pHandle)
 465:Src/mc_interface.c **** {
 466:Src/mc_interface.c ****   bool retVal = true;
 467:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 468:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 469:Src/mc_interface.c ****   {
 470:Src/mc_interface.c ****     /* Nothing to do */
 471:Src/mc_interface.c ****   }
 472:Src/mc_interface.c ****   else
 473:Src/mc_interface.c ****   {
 474:Src/mc_interface.c **** #endif
 475:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 476:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 477:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 478:Src/mc_interface.c ****     {
 479:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_START;
 480:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 481:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 482:Src/mc_interface.c ****       retVal = false;
 483:Src/mc_interface.c ****   }
 484:Src/mc_interface.c ****   else
 485:Src/mc_interface.c ****   {
 486:Src/mc_interface.c ****     /* Reject the command as the condition are not met */
 487:Src/mc_interface.c ****   }
 488:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 19


 489:Src/mc_interface.c ****   }
 490:Src/mc_interface.c **** #endif
 491:Src/mc_interface.c ****   return (retVal);
 492:Src/mc_interface.c **** }
 493:Src/mc_interface.c **** 
 494:Src/mc_interface.c **** /**
 495:Src/mc_interface.c ****   * @brief  This is a user command used to begin the phase offset calibration
 496:Src/mc_interface.c ****   *         procedure. If the state machine is in IDLE state the command is executed
 497:Src/mc_interface.c ****   *         instantaneously otherwise the command is discarded. User must take
 498:Src/mc_interface.c ****   *         care of this possibility by checking the return value.\n
 499:Src/mc_interface.c ****   *         <B>Note:</B> The MCI_StartOffsetMeasurments command is used to begin phase
 500:Src/mc_interface.c ****   *         offset calibration procedure moving the state machine from IDLE state to
 501:Src/mc_interface.c ****   *         OFFSET_CALIB. The command MCI_StartOffsetMeasurments is not blocking
 502:Src/mc_interface.c ****   *         the execution of project until the measurments are done; to do this, the user
 503:Src/mc_interface.c ****   *         have to check the state machine and verify that the IDLE state (or
 504:Src/mc_interface.c ****   *         any other state) has been reached.
 505:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 506:Src/mc_interface.c ****   * @retval bool It returns true if the command is successfully executed
 507:Src/mc_interface.c ****   *         otherwise it return false.
 508:Src/mc_interface.c ****   */
 509:Src/mc_interface.c **** __weak bool MCI_StartOffsetMeasurments(MCI_Handle_t *pHandle)
 510:Src/mc_interface.c **** {
 511:Src/mc_interface.c ****   bool retVal = false;
 512:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 513:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 514:Src/mc_interface.c ****   {
 515:Src/mc_interface.c ****     /* Nothing to do */
 516:Src/mc_interface.c ****   }
 517:Src/mc_interface.c ****   else
 518:Src/mc_interface.c ****   {
 519:Src/mc_interface.c **** #endif
 520:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 521:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 522:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 523:Src/mc_interface.c ****     {
 524:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_MEASURE_OFFSETS;
 525:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 526:Src/mc_interface.c ****       retVal = true;
 527:Src/mc_interface.c ****     }
 528:Src/mc_interface.c ****     else
 529:Src/mc_interface.c ****     {
 530:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 531:Src/mc_interface.c ****     }
 532:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 533:Src/mc_interface.c ****   }
 534:Src/mc_interface.c **** #endif
 535:Src/mc_interface.c ****   return (retVal);
 536:Src/mc_interface.c **** }
 537:Src/mc_interface.c **** 
 538:Src/mc_interface.c **** /**
 539:Src/mc_interface.c ****   * @brief  Gets the phase current measurement offset values
 540:Src/mc_interface.c ****   *
 541:Src/mc_interface.c ****   * The offset values are written in the PolarizationOffsets structure provided that they
 542:Src/mc_interface.c ****   * have been previously provided for the Motor Control subsystem or measured by it.
 543:Src/mc_interface.c ****   *
 544:Src/mc_interface.c ****   * If the offset have not previously been provided to the Motor Control subsystem or
 545:Src/mc_interface.c ****   * if it has not measured them the function returns false and nothing is written in the
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 20


 546:Src/mc_interface.c ****   * PolarizationOffsets structure.
 547:Src/mc_interface.c ****   *
 548:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 549:Src/mc_interface.c ****   * @param  PolarizationOffsets Pointer on ploarization offset structure in which offsets will be w
 550:Src/mc_interface.c ****   * @retval returns true if the command is successfully executed; returns false otherwise.
 551:Src/mc_interface.c ****   */
 552:Src/mc_interface.c **** __weak bool MCI_GetCalibratedOffsetsMotor(MCI_Handle_t *pHandle, PolarizationOffsets_t *Polarizatio
 553:Src/mc_interface.c **** {
 490              		.loc 1 553 1 is_stmt 1 view -0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 554:Src/mc_interface.c ****   bool retVal = false;
 494              		.loc 1 554 3 view .LVU139
 555:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 556:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 557:Src/mc_interface.c ****   {
 558:Src/mc_interface.c ****     /* Nothing to do */
 559:Src/mc_interface.c ****   }
 560:Src/mc_interface.c ****   else
 561:Src/mc_interface.c ****   {
 562:Src/mc_interface.c **** #endif
 563:Src/mc_interface.c ****     if (pHandle->pPWM->offsetCalibStatus == true)
 495              		.loc 1 563 5 view .LVU140
 496              		.loc 1 563 16 is_stmt 0 view .LVU141
 497 0000 8068     		ldr	r0, [r0, #8]
 498              	.LVL28:
 553:Src/mc_interface.c ****   bool retVal = false;
 499              		.loc 1 553 1 view .LVU142
 500 0002 10B5     		push	{r4, lr}
 501              	.LCFI13:
 502              		.cfi_def_cfa_offset 8
 503              		.cfi_offset 4, -8
 504              		.cfi_offset 14, -4
 505              		.loc 1 563 22 view .LVU143
 506 0004 90F88140 		ldrb	r4, [r0, #129]	@ zero_extendqisi2
 507              		.loc 1 563 8 view .LVU144
 508 0008 0CB9     		cbnz	r4, .L30
 509              	.LVL29:
 564:Src/mc_interface.c ****     {
 565:Src/mc_interface.c ****       PWMC_GetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 566:Src/mc_interface.c ****       retVal = true;
 567:Src/mc_interface.c ****     }
 568:Src/mc_interface.c ****     else
 569:Src/mc_interface.c ****     {
 570:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 571:Src/mc_interface.c ****     }
 510              		.loc 1 571 5 is_stmt 1 view .LVU145
 572:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 573:Src/mc_interface.c ****   }
 574:Src/mc_interface.c **** #endif
 575:Src/mc_interface.c **** 
 576:Src/mc_interface.c ****   return(retVal);
 511              		.loc 1 576 3 view .LVU146
 577:Src/mc_interface.c **** }
 512              		.loc 1 577 1 is_stmt 0 view .LVU147
 513 000a 2046     		mov	r0, r4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 21


 514 000c 10BD     		pop	{r4, pc}
 515              	.LVL30:
 516              	.L30:
 565:Src/mc_interface.c ****       retVal = true;
 517              		.loc 1 565 7 is_stmt 1 view .LVU148
 518 000e FFF7FEFF 		bl	PWMC_GetOffsetCalib
 519              	.LVL31:
 566:Src/mc_interface.c ****     }
 520              		.loc 1 566 7 view .LVU149
 571:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 521              		.loc 1 571 5 view .LVU150
 576:Src/mc_interface.c **** }
 522              		.loc 1 576 3 view .LVU151
 523              		.loc 1 577 1 is_stmt 0 view .LVU152
 524 0012 2046     		mov	r0, r4
 525 0014 10BD     		pop	{r4, pc}
 526              		.loc 1 577 1 view .LVU153
 527              		.cfi_endproc
 528              	.LFE1101:
 530 0016 00BF     		.section	.text.MCI_FaultProcessing,"ax",%progbits
 531              		.align	1
 532              		.p2align 2,,3
 533              		.weak	MCI_FaultProcessing
 534              		.syntax unified
 535              		.thumb
 536              		.thumb_func
 538              	MCI_FaultProcessing:
 539              	.LVL32:
 540              	.LFB1105:
 578:Src/mc_interface.c **** 
 579:Src/mc_interface.c **** /**
 580:Src/mc_interface.c ****   * @brief  Sets the phase current measurement offset values
 581:Src/mc_interface.c ****   *
 582:Src/mc_interface.c ****   * If the state machine is in IDLE state the command is executed
 583:Src/mc_interface.c ****   * instantaneously otherwise the command is discarded. User must take
 584:Src/mc_interface.c ****   * care of this possibility by checking the return value.
 585:Src/mc_interface.c ****   *
 586:Src/mc_interface.c ****   * @note The MCI_SetCalibratedOffsetsMotor command is used to set the phase
 587:Src/mc_interface.c ****   *  offset values . The command MCI_SetCalibratedOffsetsMotor is not blocking
 588:Src/mc_interface.c ****   * the execution of project until the measurments are done; to do this, the user
 589:Src/mc_interface.c ****   * have to check the state machine and verify that the IDLE state (or
 590:Src/mc_interface.c ****   * any other state) has been reached.
 591:Src/mc_interface.c ****   *
 592:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 593:Src/mc_interface.c ****   * @param  PolarizationOffsets Pointer on ploarization offset structure that contains phase A,
 594:Src/mc_interface.c ****   *         and C values.
 595:Src/mc_interface.c ****   * @retval Returns true if the command is successfully executed
 596:Src/mc_interface.c ****   *         otherwise it return false.
 597:Src/mc_interface.c ****   */
 598:Src/mc_interface.c **** __weak bool MCI_SetCalibratedOffsetsMotor(MCI_Handle_t *pHandle, PolarizationOffsets_t *Polarizatio
 599:Src/mc_interface.c **** {
 600:Src/mc_interface.c ****   bool retVal = false;
 601:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 602:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 603:Src/mc_interface.c ****   {
 604:Src/mc_interface.c ****     /* Nothing to do */
 605:Src/mc_interface.c ****   }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 22


 606:Src/mc_interface.c ****   else
 607:Src/mc_interface.c ****   {
 608:Src/mc_interface.c **** #endif
 609:Src/mc_interface.c ****     if ((IDLE == MCI_GetSTMState(pHandle)) &&
 610:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 611:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 612:Src/mc_interface.c ****     {
 613:Src/mc_interface.c ****       PWMC_SetOffsetCalib(pHandle->pPWM, PolarizationOffsets);
 614:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 615:Src/mc_interface.c ****       retVal = true;
 616:Src/mc_interface.c ****     }
 617:Src/mc_interface.c ****     else
 618:Src/mc_interface.c ****     {
 619:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 620:Src/mc_interface.c ****     }
 621:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 622:Src/mc_interface.c ****   }
 623:Src/mc_interface.c **** #endif
 624:Src/mc_interface.c ****     return(retVal);
 625:Src/mc_interface.c **** }
 626:Src/mc_interface.c **** 
 627:Src/mc_interface.c **** /**
 628:Src/mc_interface.c ****   * @brief Initiates the stop procedure for a motor
 629:Src/mc_interface.c ****   *
 630:Src/mc_interface.c ****   *  If the state machine is in any state but the #ICLWAIT, #IDLE, #FAULT_NOW and
 631:Src/mc_interface.c ****   * #FAULT_OVER states, the command is immediately executed. Otherwise, it is
 632:Src/mc_interface.c ****   * discarded. The Application can check the return value to know whether the
 633:Src/mc_interface.c ****   * command was executed or discarded.
 634:Src/mc_interface.c ****   *
 635:Src/mc_interface.c ****   * @note The MCI_StopMotor() command only triggers the stop motor procedure
 636:Src/mc_interface.c ****   * and then returns. It is not blocking the application until the motor is indeed
 637:Src/mc_interface.c ****   * stopped. To know if it has stopped, the application can query the motor's state
 638:Src/mc_interface.c ****   * machine and check if the #IDLE state has been reached.
 639:Src/mc_interface.c ****   *
 640:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 641:Src/mc_interface.c ****   * @retval returns true if the command is successfully executed, false otherwise.
 642:Src/mc_interface.c ****   */
 643:Src/mc_interface.c **** __weak bool MCI_StopMotor(MCI_Handle_t *pHandle)
 644:Src/mc_interface.c **** {
 645:Src/mc_interface.c ****   bool retVal = false;
 646:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 647:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 648:Src/mc_interface.c ****   {
 649:Src/mc_interface.c ****     /* Nothing to do */
 650:Src/mc_interface.c ****   }
 651:Src/mc_interface.c ****   else
 652:Src/mc_interface.c ****   {
 653:Src/mc_interface.c **** #endif
 654:Src/mc_interface.c ****     bool status;
 655:Src/mc_interface.c ****     MCI_State_t State;
 656:Src/mc_interface.c **** 
 657:Src/mc_interface.c ****     State = MCI_GetSTMState(pHandle);
 658:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 659:Src/mc_interface.c ****     {
 660:Src/mc_interface.c ****       status = false;
 661:Src/mc_interface.c ****     }
 662:Src/mc_interface.c ****     else
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 23


 663:Src/mc_interface.c ****     {
 664:Src/mc_interface.c ****       status = true;
 665:Src/mc_interface.c ****     }
 666:Src/mc_interface.c **** 
 667:Src/mc_interface.c ****     if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 668:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 669:Src/mc_interface.c ****         (status == true))
 670:Src/mc_interface.c ****     {
 671:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_STOP;
 672:Src/mc_interface.c ****       retVal = true;
 673:Src/mc_interface.c ****     }
 674:Src/mc_interface.c ****     else
 675:Src/mc_interface.c ****     {
 676:Src/mc_interface.c ****       /* Reject the command as the condition are not met */
 677:Src/mc_interface.c ****     }
 678:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 679:Src/mc_interface.c ****   }
 680:Src/mc_interface.c **** #endif
 681:Src/mc_interface.c ****   return (retVal);
 682:Src/mc_interface.c **** }
 683:Src/mc_interface.c **** 
 684:Src/mc_interface.c **** /**
 685:Src/mc_interface.c ****  * @brief Acknowledges Motor Control faults that occurred on the target motor 1.
 686:Src/mc_interface.c ****  *
 687:Src/mc_interface.c ****  *  This function must be called before the motor can be started again when a fault
 688:Src/mc_interface.c ****  * condition has occured. It clears the faults status and resets the state machine
 689:Src/mc_interface.c ****  * of the target motor to the #IDLE state provided that there is no active fault
 690:Src/mc_interface.c ****  * condition anymore.
 691:Src/mc_interface.c ****  *
 692:Src/mc_interface.c ****  *  If the state machine of the target motor is in the #FAULT_OVER state, the function
 693:Src/mc_interface.c ****  * clears the list of past faults, transitions to the #IDLE state and returns true.
 694:Src/mc_interface.c ****  * Otherwise, it oes nothing and returns false.
 695:Src/mc_interface.c ****  *
 696:Src/mc_interface.c ****  * @param  pHandle Pointer on the target motor drive structure.
 697:Src/mc_interface.c ****  */
 698:Src/mc_interface.c **** __weak bool MCI_FaultAcknowledged(MCI_Handle_t *pHandle)
 699:Src/mc_interface.c **** {
 700:Src/mc_interface.c ****   bool reVal = false;
 701:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 702:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 703:Src/mc_interface.c ****   {
 704:Src/mc_interface.c ****     /* Nothing to do */
 705:Src/mc_interface.c ****   }
 706:Src/mc_interface.c ****   else
 707:Src/mc_interface.c ****   {
 708:Src/mc_interface.c **** #endif
 709:Src/mc_interface.c ****     if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle))
 710:Src/mc_interface.c ****     {
 711:Src/mc_interface.c ****       pHandle->PastFaults = MC_NO_FAULTS;
 712:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 713:Src/mc_interface.c ****       reVal = true;
 714:Src/mc_interface.c ****     }
 715:Src/mc_interface.c ****     else
 716:Src/mc_interface.c ****     {
 717:Src/mc_interface.c ****       /* Reject the command as the conditions are not met */
 718:Src/mc_interface.c ****     }
 719:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 24


 720:Src/mc_interface.c ****   }
 721:Src/mc_interface.c **** #endif
 722:Src/mc_interface.c ****   return (reVal);
 723:Src/mc_interface.c **** }
 724:Src/mc_interface.c **** 
 725:Src/mc_interface.c **** /**
 726:Src/mc_interface.c ****  * @brief It clocks both HW and SW faults processing and update the state
 727:Src/mc_interface.c ****  *        machine accordingly with hSetErrors, hResetErrors and present state.
 728:Src/mc_interface.c ****  *        Refer to State_t description for more information about fault states.
 729:Src/mc_interface.c ****  * @param pHandle pointer of type  STM_Handle_t
 730:Src/mc_interface.c ****  * @param hSetErrors Bit field reporting faults currently present
 731:Src/mc_interface.c ****  * @param hResetErrors Bit field reporting faults to be cleared
 732:Src/mc_interface.c ****  */
 733:Src/mc_interface.c **** __weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
 734:Src/mc_interface.c **** {
 541              		.loc 1 734 1 is_stmt 1 view -0
 542              		.cfi_startproc
 543              		@ args = 0, pretend = 0, frame = 0
 544              		@ frame_needed = 0, uses_anonymous_args = 0
 545              		@ link register save eliminated.
 735:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 736:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 737:Src/mc_interface.c ****   {
 738:Src/mc_interface.c ****     /* Nothing to do */
 739:Src/mc_interface.c ****   }
 740:Src/mc_interface.c ****   else
 741:Src/mc_interface.c ****   {
 742:Src/mc_interface.c **** #endif
 743:Src/mc_interface.c ****     /* Set current errors */
 744:Src/mc_interface.c ****     pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 546              		.loc 1 744 5 view .LVU155
 547              		.loc 1 744 69 is_stmt 0 view .LVU156
 548 0000 038D     		ldrh	r3, [r0, #40]
 745:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 549              		.loc 1 745 25 view .LVU157
 550 0002 B0F82AC0 		ldrh	ip, [r0, #42]
 744:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 551              		.loc 1 744 69 view .LVU158
 552 0006 0B43     		orrs	r3, r3, r1
 553 0008 23EA0203 		bic	r3, r3, r2
 554              		.loc 1 745 25 view .LVU159
 555 000c 41EA0C01 		orr	r1, r1, ip
 556              	.LVL33:
 744:Src/mc_interface.c ****     pHandle->PastFaults |= hSetErrors;
 557              		.loc 1 744 28 view .LVU160
 558 0010 0385     		strh	r3, [r0, #40]	@ movhi
 559              		.loc 1 745 5 is_stmt 1 view .LVU161
 560              		.loc 1 745 25 is_stmt 0 view .LVU162
 561 0012 4185     		strh	r1, [r0, #42]	@ movhi
 746:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 747:Src/mc_interface.c ****   }
 748:Src/mc_interface.c **** #endif
 749:Src/mc_interface.c **** }
 562              		.loc 1 749 1 view .LVU163
 563 0014 7047     		bx	lr
 564              		.cfi_endproc
 565              	.LFE1105:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 25


 567 0016 00BF     		.section	.text.MCI_ExecBufferedCommands,"ax",%progbits
 568              		.align	1
 569              		.p2align 2,,3
 570              		.weak	MCI_ExecBufferedCommands
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 575              	MCI_ExecBufferedCommands:
 576              	.LVL34:
 577              	.LFB1106:
 750:Src/mc_interface.c **** 
 751:Src/mc_interface.c **** /**
 752:Src/mc_interface.c ****   * @brief  This is usually a method managed by task. It must be called
 753:Src/mc_interface.c ****   *         periodically in order to check the status of the related pSTM object
 754:Src/mc_interface.c ****   *         and eventually to execute the buffered command if the condition
 755:Src/mc_interface.c ****   *         occurs.
 756:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 757:Src/mc_interface.c ****   */
 758:Src/mc_interface.c **** __weak void MCI_ExecBufferedCommands(MCI_Handle_t *pHandle)
 759:Src/mc_interface.c **** {
 578              		.loc 1 759 1 is_stmt 1 view -0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 760:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 761:Src/mc_interface.c ****   if (NULL == pHandle)
 762:Src/mc_interface.c ****   {
 763:Src/mc_interface.c ****     /* Nothing to do */
 764:Src/mc_interface.c ****   }
 765:Src/mc_interface.c ****   else
 766:Src/mc_interface.c ****   {
 767:Src/mc_interface.c **** #endif
 768:Src/mc_interface.c ****     if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 582              		.loc 1 768 5 view .LVU165
 583              		.loc 1 768 8 is_stmt 0 view .LVU166
 584 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 585 0004 012B     		cmp	r3, #1
 586 0006 00D0     		beq	.L46
 587 0008 7047     		bx	lr
 588              	.L46:
 759:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 589              		.loc 1 759 1 view .LVU167
 590 000a 10B5     		push	{r4, lr}
 591              	.LCFI14:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 4, -8
 594              		.cfi_offset 14, -4
 595              	.LBB4:
 769:Src/mc_interface.c ****     {
 770:Src/mc_interface.c ****       bool commandHasBeenExecuted = false;
 771:Src/mc_interface.c ****       switch (pHandle->lastCommand)
 596              		.loc 1 771 22 view .LVU168
 597 000c 027D     		ldrb	r2, [r0, #20]	@ zero_extendqisi2
 598              		.loc 1 771 7 view .LVU169
 599 000e 022A     		cmp	r2, #2
 600 0010 0446     		mov	r4, r0
 770:Src/mc_interface.c ****       switch (pHandle->lastCommand)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 26


 601              		.loc 1 770 7 is_stmt 1 view .LVU170
 602              	.LVL35:
 603              		.loc 1 771 7 view .LVU171
 604 0012 07D0     		beq	.L34
 605              		.loc 1 771 7 is_stmt 0 view .LVU172
 606 0014 032A     		cmp	r2, #3
 607 0016 28D0     		beq	.L35
 608 0018 012A     		cmp	r2, #1
 609 001a 17D0     		beq	.L47
 610              	.LVL36:
 611              	.L36:
 772:Src/mc_interface.c ****       {
 773:Src/mc_interface.c ****         case MCI_CMD_EXECSPEEDRAMP:
 774:Src/mc_interface.c ****         {
 775:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 776:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 777:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 778:Src/mc_interface.c ****           break;
 779:Src/mc_interface.c ****         }
 780:Src/mc_interface.c **** 
 781:Src/mc_interface.c ****         case MCI_CMD_EXECTORQUERAMP:
 782:Src/mc_interface.c ****         {
 783:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = INTERNAL;
 784:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 785:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 786:Src/mc_interface.c ****           break;
 787:Src/mc_interface.c ****         }
 788:Src/mc_interface.c **** 
 789:Src/mc_interface.c ****         case MCI_CMD_SETCURRENTREFERENCES:
 790:Src/mc_interface.c ****         {
 791:Src/mc_interface.c ****           pHandle->pFOCVars->bDriveInput = EXTERNAL;
 792:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 793:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 794:Src/mc_interface.c ****           break;
 795:Src/mc_interface.c ****         }
 796:Src/mc_interface.c **** 
 797:Src/mc_interface.c ****         default:
 798:Src/mc_interface.c ****           break;
 799:Src/mc_interface.c ****       }
 800:Src/mc_interface.c **** 
 801:Src/mc_interface.c ****       if (commandHasBeenExecuted)
 802:Src/mc_interface.c ****       {
 803:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 804:Src/mc_interface.c ****       }
 805:Src/mc_interface.c ****       else
 806:Src/mc_interface.c ****       {
 807:Src/mc_interface.c ****         pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 612              		.loc 1 807 9 is_stmt 1 view .LVU173
 613              		.loc 1 807 31 is_stmt 0 view .LVU174
 614 001c 0323     		movs	r3, #3
 615 001e 84F82C30 		strb	r3, [r4, #44]
 616              	.LBE4:
 808:Src/mc_interface.c ****       }
 809:Src/mc_interface.c ****     }
 810:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 811:Src/mc_interface.c ****   }
 812:Src/mc_interface.c **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 27


 813:Src/mc_interface.c **** }
 617              		.loc 1 813 1 view .LVU175
 618 0022 10BD     		pop	{r4, pc}
 619              	.LVL37:
 620              	.L34:
 621              	.LBB5:
 783:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 622              		.loc 1 783 11 is_stmt 1 view .LVU176
 783:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 623              		.loc 1 783 42 is_stmt 0 view .LVU177
 624 0024 4368     		ldr	r3, [r0, #4]
 625 0026 0022     		movs	r2, #0
 626 0028 83F82420 		strb	r2, [r3, #36]
 784:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 627              		.loc 1 784 11 is_stmt 1 view .LVU178
 628 002c 0068     		ldr	r0, [r0]
 629              	.LVL38:
 784:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDur
 630              		.loc 1 784 11 is_stmt 0 view .LVU179
 631 002e 0421     		movs	r1, #4
 632 0030 FFF7FEFF 		bl	STC_SetControlMode
 633              	.LVL39:
 785:Src/mc_interface.c ****           break;
 634              		.loc 1 785 11 is_stmt 1 view .LVU180
 785:Src/mc_interface.c ****           break;
 635              		.loc 1 785 36 is_stmt 0 view .LVU181
 636 0034 A28C     		ldrh	r2, [r4, #36]
 637 0036 B4F91810 		ldrsh	r1, [r4, #24]
 638 003a 2068     		ldr	r0, [r4]
 639 003c FFF7FEFF 		bl	STC_ExecRamp
 640              	.LVL40:
 786:Src/mc_interface.c ****         }
 641              		.loc 1 786 11 is_stmt 1 view .LVU182
 642              	.L37:
 801:Src/mc_interface.c ****       {
 643              		.loc 1 801 7 view .LVU183
 801:Src/mc_interface.c ****       {
 644              		.loc 1 801 10 is_stmt 0 view .LVU184
 645 0040 0028     		cmp	r0, #0
 646 0042 EBD0     		beq	.L36
 647              	.LVL41:
 648              	.L38:
 803:Src/mc_interface.c ****       }
 649              		.loc 1 803 9 is_stmt 1 view .LVU185
 803:Src/mc_interface.c ****       }
 650              		.loc 1 803 31 is_stmt 0 view .LVU186
 651 0044 0223     		movs	r3, #2
 652 0046 84F82C30 		strb	r3, [r4, #44]
 653              	.LBE5:
 654              		.loc 1 813 1 view .LVU187
 655 004a 10BD     		pop	{r4, pc}
 656              	.LVL42:
 657              	.L47:
 658              	.LBB6:
 775:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 659              		.loc 1 775 11 is_stmt 1 view .LVU188
 775:Src/mc_interface.c ****           STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 28


 660              		.loc 1 775 42 is_stmt 0 view .LVU189
 661 004c 4368     		ldr	r3, [r0, #4]
 662 004e 0022     		movs	r2, #0
 663 0050 83F82420 		strb	r2, [r3, #36]
 776:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 664              		.loc 1 776 11 is_stmt 1 view .LVU190
 665 0054 0068     		ldr	r0, [r0]
 666              	.LVL43:
 776:Src/mc_interface.c ****           commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDura
 667              		.loc 1 776 11 is_stmt 0 view .LVU191
 668 0056 0321     		movs	r1, #3
 669 0058 FFF7FEFF 		bl	STC_SetControlMode
 670              	.LVL44:
 777:Src/mc_interface.c ****           break;
 671              		.loc 1 777 11 is_stmt 1 view .LVU192
 777:Src/mc_interface.c ****           break;
 672              		.loc 1 777 36 is_stmt 0 view .LVU193
 673 005c A28C     		ldrh	r2, [r4, #36]
 674 005e B4F91610 		ldrsh	r1, [r4, #22]
 675 0062 2068     		ldr	r0, [r4]
 676 0064 FFF7FEFF 		bl	STC_ExecRamp
 677              	.LVL45:
 778:Src/mc_interface.c ****         }
 678              		.loc 1 778 11 is_stmt 1 view .LVU194
 679 0068 EAE7     		b	.L37
 680              	.LVL46:
 681              	.L35:
 791:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 682              		.loc 1 791 11 view .LVU195
 791:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 683              		.loc 1 791 18 is_stmt 0 view .LVU196
 684 006a 4268     		ldr	r2, [r0, #4]
 791:Src/mc_interface.c ****           pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 685              		.loc 1 791 42 view .LVU197
 686 006c 82F82430 		strb	r3, [r2, #36]
 792:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 687              		.loc 1 792 11 is_stmt 1 view .LVU198
 792:Src/mc_interface.c ****           commandHasBeenExecuted = true;
 688              		.loc 1 792 37 is_stmt 0 view .LVU199
 689 0070 D0F81A30 		ldr	r3, [r0, #26]	@ unaligned
 690 0074 1361     		str	r3, [r2, #16]	@ unaligned
 793:Src/mc_interface.c ****           break;
 691              		.loc 1 793 11 is_stmt 1 view .LVU200
 692              	.LVL47:
 794:Src/mc_interface.c ****         }
 693              		.loc 1 794 11 view .LVU201
 801:Src/mc_interface.c ****       {
 694              		.loc 1 801 7 view .LVU202
 695 0076 E5E7     		b	.L38
 696              	.LBE6:
 697              		.cfi_endproc
 698              	.LFE1106:
 700              		.section	.text.MCI_IsCommandAcknowledged,"ax",%progbits
 701              		.align	1
 702              		.p2align 2,,3
 703              		.weak	MCI_IsCommandAcknowledged
 704              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 29


 705              		.thumb
 706              		.thumb_func
 708              	MCI_IsCommandAcknowledged:
 709              	.LVL48:
 710              	.LFB1107:
 814:Src/mc_interface.c **** 
 815:Src/mc_interface.c **** /**
 816:Src/mc_interface.c ****   * @brief  Returns information about the state of the last buffered command.
 817:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 818:Src/mc_interface.c ****   * @retval The state of the last buffered command
 819:Src/mc_interface.c ****   *
 820:Src/mc_interface.c ****   * The state returned by this function can be one of the following codes:
 821:Src/mc_interface.c ****   * - #MCI_BUFFER_EMPTY if no buffered command has been called.
 822:Src/mc_interface.c ****   * - #MCI_COMMAND_NOT_ALREADY_EXECUTED if the buffered command
 823:Src/mc_interface.c ****   * condition has not already occurred.
 824:Src/mc_interface.c ****   * - #MCI_COMMAND_EXECUTED_SUCCESSFULLY if the buffered command has
 825:Src/mc_interface.c ****   * been executed successfully. In this case calling this function resets
 826:Src/mc_interface.c ****   * the command state to #MCI_BUFFER_EMPTY.
 827:Src/mc_interface.c ****   * - #MCI_COMMAND_EXECUTED_UNSUCCESSFULLY if the buffered command has
 828:Src/mc_interface.c ****   * been executed unsuccessfully. In this case calling this function
 829:Src/mc_interface.c ****   * resets the command state to #MCI_BUFFER_EMPTY.
 830:Src/mc_interface.c ****   */
 831:Src/mc_interface.c **** __weak MCI_CommandState_t MCI_IsCommandAcknowledged(MCI_Handle_t *pHandle)
 832:Src/mc_interface.c **** {
 711              		.loc 1 832 1 view -0
 712              		.cfi_startproc
 713              		@ args = 0, pretend = 0, frame = 0
 714              		@ frame_needed = 0, uses_anonymous_args = 0
 715              		@ link register save eliminated.
 833:Src/mc_interface.c ****   MCI_CommandState_t retVal;
 716              		.loc 1 833 3 view .LVU204
 834:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 835:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 836:Src/mc_interface.c ****   {
 837:Src/mc_interface.c ****     retVal = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 838:Src/mc_interface.c ****   }
 839:Src/mc_interface.c ****   else
 840:Src/mc_interface.c ****   {
 841:Src/mc_interface.c **** #endif
 842:Src/mc_interface.c ****     retVal = pHandle->CommandState;
 717              		.loc 1 842 5 view .LVU205
 718              		.loc 1 842 12 is_stmt 0 view .LVU206
 719 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 720              	.LVL49:
 843:Src/mc_interface.c **** 
 844:Src/mc_interface.c ****     if ((MCI_COMMAND_EXECUTED_SUCCESSFULLY == retVal) || (MCI_COMMAND_EXECUTED_UNSUCCESSFULLY == re
 721              		.loc 1 844 5 is_stmt 1 view .LVU207
 722              		.loc 1 844 8 is_stmt 0 view .LVU208
 723 0004 9A1E     		subs	r2, r3, #2
 724 0006 012A     		cmp	r2, #1
 845:Src/mc_interface.c ****     {
 846:Src/mc_interface.c ****       pHandle->CommandState = MCI_BUFFER_EMPTY;
 725              		.loc 1 846 7 is_stmt 1 view .LVU209
 726              		.loc 1 846 29 is_stmt 0 view .LVU210
 727 0008 9CBF     		itt	ls
 728 000a 0022     		movls	r2, #0
 729 000c 80F82C20 		strbls	r2, [r0, #44]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 30


 847:Src/mc_interface.c ****     }
 848:Src/mc_interface.c ****     else
 849:Src/mc_interface.c ****     {
 850:Src/mc_interface.c ****       /* Nothing to do */
 851:Src/mc_interface.c ****     }
 730              		.loc 1 851 5 is_stmt 1 view .LVU211
 852:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 853:Src/mc_interface.c ****   }
 854:Src/mc_interface.c **** #endif
 855:Src/mc_interface.c ****   return (retVal);
 731              		.loc 1 855 3 view .LVU212
 856:Src/mc_interface.c **** }
 732              		.loc 1 856 1 is_stmt 0 view .LVU213
 733 0010 1846     		mov	r0, r3
 734              	.LVL50:
 735              		.loc 1 856 1 view .LVU214
 736 0012 7047     		bx	lr
 737              		.cfi_endproc
 738              	.LFE1107:
 740              		.section	.text.MCI_GetSTMState,"ax",%progbits
 741              		.align	1
 742              		.p2align 2,,3
 743              		.weak	MCI_GetSTMState
 744              		.syntax unified
 745              		.thumb
 746              		.thumb_func
 748              	MCI_GetSTMState:
 749              	.LVL51:
 750              	.LFB1108:
 857:Src/mc_interface.c **** 
 858:Src/mc_interface.c **** /**
 859:Src/mc_interface.c ****   * @brief  It returns information about the state of the related pSTM object.
 860:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 861:Src/mc_interface.c ****   * @retval State_t It returns the current state of the related pSTM object.
 862:Src/mc_interface.c ****   */
 863:Src/mc_interface.c **** __weak MCI_State_t MCI_GetSTMState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 864:Src/mc_interface.c **** {
 751              		.loc 1 864 1 is_stmt 1 view -0
 752              		.cfi_startproc
 753              		@ args = 0, pretend = 0, frame = 0
 754              		@ frame_needed = 0, uses_anonymous_args = 0
 755              		@ link register save eliminated.
 865:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 866:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
 867:Src/mc_interface.c **** #else
 868:Src/mc_interface.c ****   return (pHandle->State);
 756              		.loc 1 868 3 view .LVU216
 869:Src/mc_interface.c **** #endif
 870:Src/mc_interface.c **** }
 757              		.loc 1 870 1 is_stmt 0 view .LVU217
 758 0000 90F82700 		ldrb	r0, [r0, #39]	@ zero_extendqisi2
 759              	.LVL52:
 760              		.loc 1 870 1 view .LVU218
 761 0004 7047     		bx	lr
 762              		.cfi_endproc
 763              	.LFE1108:
 765 0006 00BF     		.section	.text.MCI_GetCtrlPositionState,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 31


 766              		.align	1
 767              		.p2align 2,,3
 768              		.weak	MCI_GetCtrlPositionState
 769              		.syntax unified
 770              		.thumb
 771              		.thumb_func
 773              	MCI_GetCtrlPositionState:
 774              	.LVL53:
 775              	.LFB1109:
 871:Src/mc_interface.c **** 
 872:Src/mc_interface.c **** /**
 873:Src/mc_interface.c ****   * @brief  It returns information about the state of the position control.
 874:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 875:Src/mc_interface.c ****   * @retval State_t It returns the current state position control execution.
 876:Src/mc_interface.c ****   */
 877:Src/mc_interface.c **** __weak PosCtrlStatus_t MCI_GetCtrlPositionState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.1
 878:Src/mc_interface.c **** {
 776              		.loc 1 878 1 is_stmt 1 view -0
 777              		.cfi_startproc
 778              		@ args = 0, pretend = 0, frame = 0
 779              		@ frame_needed = 0, uses_anonymous_args = 0
 780              		@ link register save eliminated.
 879:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 880:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? TC_FOLLOWING_ON_GOING : TC_GetControlPositionStatus(pHandle->pPosC
 881:Src/mc_interface.c **** #else
 882:Src/mc_interface.c ****   return (TC_GetControlPositionStatus(pHandle->pPosCtrl));
 781              		.loc 1 882 3 view .LVU220
 782              		.loc 1 882 11 is_stmt 0 view .LVU221
 783 0000 0069     		ldr	r0, [r0, #16]
 784              	.LVL54:
 785              		.loc 1 882 11 view .LVU222
 786 0002 FFF7FEBF 		b	TC_GetControlPositionStatus
 787              	.LVL55:
 788              		.cfi_endproc
 789              	.LFE1109:
 791 0006 00BF     		.section	.text.MCI_GetAlignmentStatus,"ax",%progbits
 792              		.align	1
 793              		.p2align 2,,3
 794              		.weak	MCI_GetAlignmentStatus
 795              		.syntax unified
 796              		.thumb
 797              		.thumb_func
 799              	MCI_GetAlignmentStatus:
 800              	.LVL56:
 801              	.LFB1110:
 883:Src/mc_interface.c **** #endif
 884:Src/mc_interface.c **** }
 885:Src/mc_interface.c **** 
 886:Src/mc_interface.c **** /**
 887:Src/mc_interface.c ****   * @brief  It returns information about the rotor alignment procedure.
 888:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 889:Src/mc_interface.c ****   * @retval State_t It returns the current state of the alignment.
 890:Src/mc_interface.c ****   */
 891:Src/mc_interface.c **** __weak AlignStatus_t MCI_GetAlignmentStatus(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 892:Src/mc_interface.c **** {
 802              		.loc 1 892 1 is_stmt 1 view -0
 803              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 32


 804              		@ args = 0, pretend = 0, frame = 0
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              		@ link register save eliminated.
 893:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 894:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? TC_ALIGNMENT_ERROR : TC_GetAlignmentStatus(pHandle->pPosCtrl));
 895:Src/mc_interface.c **** #else
 896:Src/mc_interface.c ****   return ((TC_GetAlignmentStatus(pHandle->pPosCtrl)));
 807              		.loc 1 896 3 view .LVU224
 808              		.loc 1 896 12 is_stmt 0 view .LVU225
 809 0000 0069     		ldr	r0, [r0, #16]
 810              	.LVL57:
 811              		.loc 1 896 12 view .LVU226
 812 0002 FFF7FEBF 		b	TC_GetAlignmentStatus
 813              	.LVL58:
 814              		.cfi_endproc
 815              	.LFE1110:
 817 0006 00BF     		.section	.text.MCI_GetCurrentPosition,"ax",%progbits
 818              		.align	1
 819              		.p2align 2,,3
 820              		.weak	MCI_GetCurrentPosition
 821              		.syntax unified
 822              		.thumb
 823              		.thumb_func
 825              	MCI_GetCurrentPosition:
 826              	.LVL59:
 827              	.LFB1111:
 897:Src/mc_interface.c **** #endif
 898:Src/mc_interface.c **** }
 899:Src/mc_interface.c **** 
 900:Src/mc_interface.c **** /**
 901:Src/mc_interface.c ****   * @brief  It returns the current position of the rotor.
 902:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 903:Src/mc_interface.c ****   * @retval float_t It returns the current mechanical angular position of the rotor.
 904:Src/mc_interface.c ****   */
 905:Src/mc_interface.c **** __weak float_t MCI_GetCurrentPosition(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 906:Src/mc_interface.c **** {
 828              		.loc 1 906 1 is_stmt 1 view -0
 829              		.cfi_startproc
 830              		@ args = 0, pretend = 0, frame = 0
 831              		@ frame_needed = 0, uses_anonymous_args = 0
 832              		@ link register save eliminated.
 907:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 908:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : TC_GetCurrentPosition(pHandle->pPosCtrl));
 909:Src/mc_interface.c **** #else
 910:Src/mc_interface.c ****   return (TC_GetCurrentPosition(pHandle->pPosCtrl));
 833              		.loc 1 910 3 view .LVU228
 834              		.loc 1 910 11 is_stmt 0 view .LVU229
 835 0000 0069     		ldr	r0, [r0, #16]
 836              	.LVL60:
 837              		.loc 1 910 11 view .LVU230
 838 0002 FFF7FEBF 		b	TC_GetCurrentPosition
 839              	.LVL61:
 840              		.cfi_endproc
 841              	.LFE1111:
 843 0006 00BF     		.section	.text.MCI_GetTargetPosition,"ax",%progbits
 844              		.align	1
 845              		.p2align 2,,3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 33


 846              		.weak	MCI_GetTargetPosition
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 851              	MCI_GetTargetPosition:
 852              	.LVL62:
 853              	.LFB1112:
 911:Src/mc_interface.c **** #endif
 912:Src/mc_interface.c **** }
 913:Src/mc_interface.c **** 
 914:Src/mc_interface.c **** /**
 915:Src/mc_interface.c ****   * @brief  It returns the final position asked to the motor.
 916:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 917:Src/mc_interface.c ****   * @retval float_t It returns the target mechanical angular position of the rotor.
 918:Src/mc_interface.c ****   */
 919:Src/mc_interface.c **** __weak float_t MCI_GetTargetPosition(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 920:Src/mc_interface.c **** {
 854              		.loc 1 920 1 is_stmt 1 view -0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              		@ link register save eliminated.
 921:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 922:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : TC_GetTargetPosition(pHandle->pPosCtrl));
 923:Src/mc_interface.c **** #else
 924:Src/mc_interface.c ****   return (TC_GetTargetPosition(pHandle->pPosCtrl));
 859              		.loc 1 924 3 view .LVU232
 860              		.loc 1 924 11 is_stmt 0 view .LVU233
 861 0000 0069     		ldr	r0, [r0, #16]
 862              	.LVL63:
 863              		.loc 1 924 11 view .LVU234
 864 0002 FFF7FEBF 		b	TC_GetTargetPosition
 865              	.LVL64:
 866              		.cfi_endproc
 867              	.LFE1112:
 869 0006 00BF     		.section	.text.MCI_GetMoveDuration,"ax",%progbits
 870              		.align	1
 871              		.p2align 2,,3
 872              		.weak	MCI_GetMoveDuration
 873              		.syntax unified
 874              		.thumb
 875              		.thumb_func
 877              	MCI_GetMoveDuration:
 878              	.LVL65:
 879              	.LFB1113:
 925:Src/mc_interface.c **** #endif
 926:Src/mc_interface.c **** }
 927:Src/mc_interface.c **** 
 928:Src/mc_interface.c **** /**
 929:Src/mc_interface.c ****   * @brief  It returns the total movement duration to reach the final position.
 930:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
 931:Src/mc_interface.c ****   * @retval float_t It returns the movement duration allowed to reach the target position.
 932:Src/mc_interface.c ****   */
 933:Src/mc_interface.c **** __weak float_t MCI_GetMoveDuration(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 934:Src/mc_interface.c **** {
 880              		.loc 1 934 1 is_stmt 1 view -0
 881              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 34


 882              		@ args = 0, pretend = 0, frame = 0
 883              		@ frame_needed = 0, uses_anonymous_args = 0
 884              		@ link register save eliminated.
 935:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 936:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : TC_GetMoveDuration(pHandle->pPosCtrl));
 937:Src/mc_interface.c **** #else
 938:Src/mc_interface.c ****   return (TC_GetMoveDuration(pHandle->pPosCtrl));
 885              		.loc 1 938 3 view .LVU236
 886              		.loc 1 938 11 is_stmt 0 view .LVU237
 887 0000 0069     		ldr	r0, [r0, #16]
 888              	.LVL66:
 889              		.loc 1 938 11 view .LVU238
 890 0002 FFF7FEBF 		b	TC_GetMoveDuration
 891              	.LVL67:
 892              		.cfi_endproc
 893              	.LFE1113:
 895 0006 00BF     		.section	.text.MCI_GetOccurredFaults,"ax",%progbits
 896              		.align	1
 897              		.p2align 2,,3
 898              		.weak	MCI_GetOccurredFaults
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 903              	MCI_GetOccurredFaults:
 904              	.LVL68:
 905              	.LFB1114:
 939:Src/mc_interface.c **** #endif
 940:Src/mc_interface.c **** }
 941:Src/mc_interface.c **** 
 942:Src/mc_interface.c **** /**
 943:Src/mc_interface.c ****   * @brief Returns the list of non-acknowledged faults that occured on the target motor
 944:Src/mc_interface.c ****   *
 945:Src/mc_interface.c ****   * This function returns a bitfield indicating the faults that occured since the state machine
 946:Src/mc_interface.c ****   * of the target motor has been moved into the #FAULT_NOW state.
 947:Src/mc_interface.c ****   *
 948:Src/mc_interface.c ****   * Possible error codes are listed in the @ref fault_codes "Fault codes" section.
 949:Src/mc_interface.c ****   *
 950:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 951:Src/mc_interface.c ****   * @retval uint16_t  16 bit fields with information about the faults
 952:Src/mc_interface.c ****   *         historically occurred since the state machine has been moved into
 953:Src/mc_interface.c ****   */
 954:Src/mc_interface.c **** __weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 955:Src/mc_interface.c **** {
 906              		.loc 1 955 1 is_stmt 1 view -0
 907              		.cfi_startproc
 908              		@ args = 0, pretend = 0, frame = 0
 909              		@ frame_needed = 0, uses_anonymous_args = 0
 910              		@ link register save eliminated.
 956:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 957:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
 958:Src/mc_interface.c **** #else
 959:Src/mc_interface.c ****   return ((uint16_t)pHandle->PastFaults);
 911              		.loc 1 959 3 view .LVU240
 960:Src/mc_interface.c **** #endif
 961:Src/mc_interface.c **** }
 912              		.loc 1 961 1 is_stmt 0 view .LVU241
 913 0000 408D     		ldrh	r0, [r0, #42]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 35


 914              	.LVL69:
 915              		.loc 1 961 1 view .LVU242
 916 0002 7047     		bx	lr
 917              		.cfi_endproc
 918              	.LFE1114:
 920              		.section	.text.MCI_GetCurrentFaults,"ax",%progbits
 921              		.align	1
 922              		.p2align 2,,3
 923              		.weak	MCI_GetCurrentFaults
 924              		.syntax unified
 925              		.thumb
 926              		.thumb_func
 928              	MCI_GetCurrentFaults:
 929              	.LVL70:
 930              	.LFB1115:
 962:Src/mc_interface.c **** 
 963:Src/mc_interface.c **** /**
 964:Src/mc_interface.c ****   * @brief Returns the list of faults that are currently active on the target motor
 965:Src/mc_interface.c ****   *
 966:Src/mc_interface.c ****   * This function returns a bitfield that indicates faults that occured on the Motor
 967:Src/mc_interface.c ****   * Control subsystem for the target motor and that are still active (the conditions
 968:Src/mc_interface.c ****   * that triggered the faults returned are still true).
 969:Src/mc_interface.c ****   *
 970:Src/mc_interface.c ****   * Possible error codes are listed in the @ref fault_codes "Fault codes" section.
 971:Src/mc_interface.c ****   *
 972:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 973:Src/mc_interface.c ****   */
 974:Src/mc_interface.c **** __weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 975:Src/mc_interface.c **** {
 931              		.loc 1 975 1 is_stmt 1 view -0
 932              		.cfi_startproc
 933              		@ args = 0, pretend = 0, frame = 0
 934              		@ frame_needed = 0, uses_anonymous_args = 0
 935              		@ link register save eliminated.
 976:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 977:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
 978:Src/mc_interface.c **** #else
 979:Src/mc_interface.c ****   return ((uint16_t)pHandle->CurrentFaults);
 936              		.loc 1 979 3 view .LVU244
 980:Src/mc_interface.c **** #endif
 981:Src/mc_interface.c **** }
 937              		.loc 1 981 1 is_stmt 0 view .LVU245
 938 0000 008D     		ldrh	r0, [r0, #40]
 939              	.LVL71:
 940              		.loc 1 981 1 view .LVU246
 941 0002 7047     		bx	lr
 942              		.cfi_endproc
 943              	.LFE1115:
 945              		.section	.text.MCI_StartMotor,"ax",%progbits
 946              		.align	1
 947              		.p2align 2,,3
 948              		.weak	MCI_StartMotor
 949              		.syntax unified
 950              		.thumb
 951              		.thumb_func
 953              	MCI_StartMotor:
 954              	.LVL72:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 36


 955              	.LFB1098:
 403:Src/mc_interface.c ****   bool retVal = false;
 956              		.loc 1 403 1 is_stmt 1 view -0
 957              		.cfi_startproc
 958              		@ args = 0, pretend = 0, frame = 0
 959              		@ frame_needed = 0, uses_anonymous_args = 0
 404:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 960              		.loc 1 404 3 view .LVU248
 413:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 961              		.loc 1 413 5 view .LVU249
 403:Src/mc_interface.c ****   bool retVal = false;
 962              		.loc 1 403 1 is_stmt 0 view .LVU250
 963 0000 10B5     		push	{r4, lr}
 964              	.LCFI15:
 965              		.cfi_def_cfa_offset 8
 966              		.cfi_offset 4, -8
 967              		.cfi_offset 14, -4
 403:Src/mc_interface.c ****   bool retVal = false;
 968              		.loc 1 403 1 view .LVU251
 969 0002 0446     		mov	r4, r0
 413:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 970              		.loc 1 413 18 view .LVU252
 971 0004 FFF7FEFF 		bl	MCI_GetSTMState
 972              	.LVL73:
 413:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 973              		.loc 1 413 8 view .LVU253
 974 0008 08B1     		cbz	r0, .L59
 975              	.L61:
 404:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 976              		.loc 1 404 8 view .LVU254
 977 000a 0020     		movs	r0, #0
 978              	.LVL74:
 424:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 979              		.loc 1 424 5 is_stmt 1 view .LVU255
 428:Src/mc_interface.c **** }
 980              		.loc 1 428 3 view .LVU256
 429:Src/mc_interface.c **** 
 981              		.loc 1 429 1 is_stmt 0 view .LVU257
 982 000c 10BD     		pop	{r4, pc}
 983              	.LVL75:
 984              	.L59:
 414:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 985              		.loc 1 414 26 discriminator 1 view .LVU258
 986 000e 2046     		mov	r0, r4
 987 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 988              	.LVL76:
 413:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 989              		.loc 1 413 44 discriminator 1 view .LVU259
 990 0014 0028     		cmp	r0, #0
 991 0016 F8D1     		bne	.L61
 415:Src/mc_interface.c ****     {
 992              		.loc 1 415 26 view .LVU260
 993 0018 2046     		mov	r0, r4
 994 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 995              	.LVL77:
 414:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 996              		.loc 1 414 58 view .LVU261
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 37


 997 001e 0028     		cmp	r0, #0
 998 0020 F3D1     		bne	.L61
 417:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 999              		.loc 1 417 7 is_stmt 1 view .LVU262
 417:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1000              		.loc 1 417 30 is_stmt 0 view .LVU263
 1001 0022 0120     		movs	r0, #1
 1002 0024 84F82600 		strb	r0, [r4, #38]
 418:Src/mc_interface.c ****       retVal = true;
 1003              		.loc 1 418 7 is_stmt 1 view .LVU264
 418:Src/mc_interface.c ****       retVal = true;
 1004              		.loc 1 418 29 is_stmt 0 view .LVU265
 1005 0028 84F82C00 		strb	r0, [r4, #44]
 419:Src/mc_interface.c ****     }
 1006              		.loc 1 419 7 is_stmt 1 view .LVU266
 1007              	.LVL78:
 424:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1008              		.loc 1 424 5 view .LVU267
 428:Src/mc_interface.c **** }
 1009              		.loc 1 428 3 view .LVU268
 429:Src/mc_interface.c **** 
 1010              		.loc 1 429 1 is_stmt 0 view .LVU269
 1011 002c 10BD     		pop	{r4, pc}
 429:Src/mc_interface.c **** 
 1012              		.loc 1 429 1 view .LVU270
 1013              		.cfi_endproc
 1014              	.LFE1098:
 1016 002e 00BF     		.section	.text.MCI_StartWithPolarizationMotor,"ax",%progbits
 1017              		.align	1
 1018              		.p2align 2,,3
 1019              		.weak	MCI_StartWithPolarizationMotor
 1020              		.syntax unified
 1021              		.thumb
 1022              		.thumb_func
 1024              	MCI_StartWithPolarizationMotor:
 1025              	.LVL79:
 1026              	.LFB1099:
 465:Src/mc_interface.c ****   bool retVal = true;
 1027              		.loc 1 465 1 is_stmt 1 view -0
 1028              		.cfi_startproc
 1029              		@ args = 0, pretend = 0, frame = 0
 1030              		@ frame_needed = 0, uses_anonymous_args = 0
 466:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1031              		.loc 1 466 3 view .LVU272
 475:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1032              		.loc 1 475 5 view .LVU273
 465:Src/mc_interface.c ****   bool retVal = true;
 1033              		.loc 1 465 1 is_stmt 0 view .LVU274
 1034 0000 10B5     		push	{r4, lr}
 1035              	.LCFI16:
 1036              		.cfi_def_cfa_offset 8
 1037              		.cfi_offset 4, -8
 1038              		.cfi_offset 14, -4
 465:Src/mc_interface.c ****   bool retVal = true;
 1039              		.loc 1 465 1 view .LVU275
 1040 0002 0446     		mov	r4, r0
 475:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 38


 1041              		.loc 1 475 18 view .LVU276
 1042 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1043              	.LVL80:
 475:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1044              		.loc 1 475 8 view .LVU277
 1045 0008 08B1     		cbz	r0, .L64
 1046              	.L66:
 466:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1047              		.loc 1 466 8 view .LVU278
 1048 000a 0120     		movs	r0, #1
 1049              	.LVL81:
 487:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1050              		.loc 1 487 3 is_stmt 1 view .LVU279
 491:Src/mc_interface.c **** }
 1051              		.loc 1 491 3 view .LVU280
 492:Src/mc_interface.c **** 
 1052              		.loc 1 492 1 is_stmt 0 view .LVU281
 1053 000c 10BD     		pop	{r4, pc}
 1054              	.LVL82:
 1055              	.L64:
 476:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1056              		.loc 1 476 26 discriminator 1 view .LVU282
 1057 000e 2046     		mov	r0, r4
 1058 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1059              	.LVL83:
 475:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1060              		.loc 1 475 44 discriminator 1 view .LVU283
 1061 0014 0028     		cmp	r0, #0
 1062 0016 F8D1     		bne	.L66
 477:Src/mc_interface.c ****     {
 1063              		.loc 1 477 26 view .LVU284
 1064 0018 2046     		mov	r0, r4
 1065 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 1066              	.LVL84:
 476:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1067              		.loc 1 476 58 view .LVU285
 1068 001e 0028     		cmp	r0, #0
 1069 0020 F3D1     		bne	.L66
 479:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1070              		.loc 1 479 7 is_stmt 1 view .LVU286
 479:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1071              		.loc 1 479 30 is_stmt 0 view .LVU287
 1072 0022 0122     		movs	r2, #1
 481:Src/mc_interface.c ****       retVal = false;
 1073              		.loc 1 481 40 view .LVU288
 1074 0024 A168     		ldr	r1, [r4, #8]
 479:Src/mc_interface.c ****       pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 1075              		.loc 1 479 30 view .LVU289
 1076 0026 84F82620 		strb	r2, [r4, #38]
 480:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 1077              		.loc 1 480 7 is_stmt 1 view .LVU290
 480:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 1078              		.loc 1 480 29 is_stmt 0 view .LVU291
 1079 002a 84F82C20 		strb	r2, [r4, #44]
 481:Src/mc_interface.c ****       retVal = false;
 1080              		.loc 1 481 7 is_stmt 1 view .LVU292
 481:Src/mc_interface.c ****       retVal = false;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 39


 1081              		.loc 1 481 40 is_stmt 0 view .LVU293
 1082 002e 81F88100 		strb	r0, [r1, #129]
 482:Src/mc_interface.c ****   }
 1083              		.loc 1 482 7 is_stmt 1 view .LVU294
 1084              	.LVL85:
 487:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1085              		.loc 1 487 3 view .LVU295
 491:Src/mc_interface.c **** }
 1086              		.loc 1 491 3 view .LVU296
 492:Src/mc_interface.c **** 
 1087              		.loc 1 492 1 is_stmt 0 view .LVU297
 1088 0032 10BD     		pop	{r4, pc}
 492:Src/mc_interface.c **** 
 1089              		.loc 1 492 1 view .LVU298
 1090              		.cfi_endproc
 1091              	.LFE1099:
 1093              		.section	.text.MCI_StartOffsetMeasurments,"ax",%progbits
 1094              		.align	1
 1095              		.p2align 2,,3
 1096              		.weak	MCI_StartOffsetMeasurments
 1097              		.syntax unified
 1098              		.thumb
 1099              		.thumb_func
 1101              	MCI_StartOffsetMeasurments:
 1102              	.LVL86:
 1103              	.LFB1100:
 510:Src/mc_interface.c ****   bool retVal = false;
 1104              		.loc 1 510 1 is_stmt 1 view -0
 1105              		.cfi_startproc
 1106              		@ args = 0, pretend = 0, frame = 0
 1107              		@ frame_needed = 0, uses_anonymous_args = 0
 511:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1108              		.loc 1 511 3 view .LVU300
 520:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1109              		.loc 1 520 5 view .LVU301
 510:Src/mc_interface.c ****   bool retVal = false;
 1110              		.loc 1 510 1 is_stmt 0 view .LVU302
 1111 0000 10B5     		push	{r4, lr}
 1112              	.LCFI17:
 1113              		.cfi_def_cfa_offset 8
 1114              		.cfi_offset 4, -8
 1115              		.cfi_offset 14, -4
 510:Src/mc_interface.c ****   bool retVal = false;
 1116              		.loc 1 510 1 view .LVU303
 1117 0002 0446     		mov	r4, r0
 520:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1118              		.loc 1 520 18 view .LVU304
 1119 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1120              	.LVL87:
 520:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1121              		.loc 1 520 8 view .LVU305
 1122 0008 08B1     		cbz	r0, .L69
 1123              	.L71:
 511:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1124              		.loc 1 511 8 view .LVU306
 1125 000a 0020     		movs	r0, #0
 1126              	.LVL88:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 40


 531:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1127              		.loc 1 531 5 is_stmt 1 view .LVU307
 535:Src/mc_interface.c **** }
 1128              		.loc 1 535 3 view .LVU308
 536:Src/mc_interface.c **** 
 1129              		.loc 1 536 1 is_stmt 0 view .LVU309
 1130 000c 10BD     		pop	{r4, pc}
 1131              	.LVL89:
 1132              	.L69:
 521:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1133              		.loc 1 521 26 discriminator 1 view .LVU310
 1134 000e 2046     		mov	r0, r4
 1135 0010 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1136              	.LVL90:
 520:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1137              		.loc 1 520 44 discriminator 1 view .LVU311
 1138 0014 0028     		cmp	r0, #0
 1139 0016 F8D1     		bne	.L71
 522:Src/mc_interface.c ****     {
 1140              		.loc 1 522 26 view .LVU312
 1141 0018 2046     		mov	r0, r4
 1142 001a FFF7FEFF 		bl	MCI_GetCurrentFaults
 1143              	.LVL91:
 521:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1144              		.loc 1 521 58 view .LVU313
 1145 001e 0346     		mov	r3, r0
 1146 0020 0028     		cmp	r0, #0
 1147 0022 F2D1     		bne	.L71
 524:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 1148              		.loc 1 524 7 is_stmt 1 view .LVU314
 525:Src/mc_interface.c ****       retVal = true;
 1149              		.loc 1 525 40 is_stmt 0 view .LVU315
 1150 0024 A268     		ldr	r2, [r4, #8]
 524:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = false;
 1151              		.loc 1 524 30 view .LVU316
 1152 0026 0321     		movs	r1, #3
 1153 0028 84F82610 		strb	r1, [r4, #38]
 525:Src/mc_interface.c ****       retVal = true;
 1154              		.loc 1 525 7 is_stmt 1 view .LVU317
 526:Src/mc_interface.c ****     }
 1155              		.loc 1 526 14 is_stmt 0 view .LVU318
 1156 002c 0120     		movs	r0, #1
 525:Src/mc_interface.c ****       retVal = true;
 1157              		.loc 1 525 40 view .LVU319
 1158 002e 82F88130 		strb	r3, [r2, #129]
 526:Src/mc_interface.c ****     }
 1159              		.loc 1 526 7 is_stmt 1 view .LVU320
 1160              	.LVL92:
 531:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1161              		.loc 1 531 5 view .LVU321
 535:Src/mc_interface.c **** }
 1162              		.loc 1 535 3 view .LVU322
 536:Src/mc_interface.c **** 
 1163              		.loc 1 536 1 is_stmt 0 view .LVU323
 1164 0032 10BD     		pop	{r4, pc}
 536:Src/mc_interface.c **** 
 1165              		.loc 1 536 1 view .LVU324
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 41


 1166              		.cfi_endproc
 1167              	.LFE1100:
 1169              		.section	.text.MCI_SetCalibratedOffsetsMotor,"ax",%progbits
 1170              		.align	1
 1171              		.p2align 2,,3
 1172              		.weak	MCI_SetCalibratedOffsetsMotor
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1177              	MCI_SetCalibratedOffsetsMotor:
 1178              	.LVL93:
 1179              	.LFB1102:
 599:Src/mc_interface.c ****   bool retVal = false;
 1180              		.loc 1 599 1 is_stmt 1 view -0
 1181              		.cfi_startproc
 1182              		@ args = 0, pretend = 0, frame = 0
 1183              		@ frame_needed = 0, uses_anonymous_args = 0
 600:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1184              		.loc 1 600 3 view .LVU326
 609:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1185              		.loc 1 609 5 view .LVU327
 599:Src/mc_interface.c ****   bool retVal = false;
 1186              		.loc 1 599 1 is_stmt 0 view .LVU328
 1187 0000 38B5     		push	{r3, r4, r5, lr}
 1188              	.LCFI18:
 1189              		.cfi_def_cfa_offset 16
 1190              		.cfi_offset 3, -16
 1191              		.cfi_offset 4, -12
 1192              		.cfi_offset 5, -8
 1193              		.cfi_offset 14, -4
 599:Src/mc_interface.c ****   bool retVal = false;
 1194              		.loc 1 599 1 view .LVU329
 1195 0002 0446     		mov	r4, r0
 1196 0004 0D46     		mov	r5, r1
 609:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1197              		.loc 1 609 18 view .LVU330
 1198 0006 FFF7FEFF 		bl	MCI_GetSTMState
 1199              	.LVL94:
 609:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1200              		.loc 1 609 8 view .LVU331
 1201 000a 08B1     		cbz	r0, .L74
 1202              	.L76:
 600:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1203              		.loc 1 600 8 view .LVU332
 1204 000c 0020     		movs	r0, #0
 1205              	.LVL95:
 620:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1206              		.loc 1 620 5 is_stmt 1 view .LVU333
 624:Src/mc_interface.c **** }
 1207              		.loc 1 624 5 view .LVU334
 625:Src/mc_interface.c **** 
 1208              		.loc 1 625 1 is_stmt 0 view .LVU335
 1209 000e 38BD     		pop	{r3, r4, r5, pc}
 1210              	.LVL96:
 1211              	.L74:
 610:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1212              		.loc 1 610 26 discriminator 1 view .LVU336
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 42


 1213 0010 2046     		mov	r0, r4
 1214 0012 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1215              	.LVL97:
 609:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 1216              		.loc 1 609 44 discriminator 1 view .LVU337
 1217 0016 0028     		cmp	r0, #0
 1218 0018 F8D1     		bne	.L76
 611:Src/mc_interface.c ****     {
 1219              		.loc 1 611 26 view .LVU338
 1220 001a 2046     		mov	r0, r4
 1221 001c FFF7FEFF 		bl	MCI_GetCurrentFaults
 1222              	.LVL98:
 610:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 1223              		.loc 1 610 58 view .LVU339
 1224 0020 0028     		cmp	r0, #0
 1225 0022 F3D1     		bne	.L76
 613:Src/mc_interface.c ****       pHandle->pPWM->offsetCalibStatus = true;
 1226              		.loc 1 613 7 is_stmt 1 view .LVU340
 1227 0024 A068     		ldr	r0, [r4, #8]
 1228 0026 2946     		mov	r1, r5
 1229 0028 FFF7FEFF 		bl	PWMC_SetOffsetCalib
 1230              	.LVL99:
 614:Src/mc_interface.c ****       retVal = true;
 1231              		.loc 1 614 7 view .LVU341
 614:Src/mc_interface.c ****       retVal = true;
 1232              		.loc 1 614 40 is_stmt 0 view .LVU342
 1233 002c A368     		ldr	r3, [r4, #8]
 1234 002e 0120     		movs	r0, #1
 1235 0030 83F88100 		strb	r0, [r3, #129]
 615:Src/mc_interface.c ****     }
 1236              		.loc 1 615 7 is_stmt 1 view .LVU343
 1237              	.LVL100:
 620:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1238              		.loc 1 620 5 view .LVU344
 624:Src/mc_interface.c **** }
 1239              		.loc 1 624 5 view .LVU345
 625:Src/mc_interface.c **** 
 1240              		.loc 1 625 1 is_stmt 0 view .LVU346
 1241 0034 38BD     		pop	{r3, r4, r5, pc}
 625:Src/mc_interface.c **** 
 1242              		.loc 1 625 1 view .LVU347
 1243              		.cfi_endproc
 1244              	.LFE1102:
 1246 0036 00BF     		.section	.text.MCI_StopMotor,"ax",%progbits
 1247              		.align	1
 1248              		.p2align 2,,3
 1249              		.weak	MCI_StopMotor
 1250              		.syntax unified
 1251              		.thumb
 1252              		.thumb_func
 1254              	MCI_StopMotor:
 1255              	.LVL101:
 1256              	.LFB1103:
 644:Src/mc_interface.c ****   bool retVal = false;
 1257              		.loc 1 644 1 is_stmt 1 view -0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 43


 1260              		@ frame_needed = 0, uses_anonymous_args = 0
 645:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1261              		.loc 1 645 3 view .LVU349
 654:Src/mc_interface.c ****     MCI_State_t State;
 1262              		.loc 1 654 5 view .LVU350
 655:Src/mc_interface.c **** 
 1263              		.loc 1 655 5 view .LVU351
 657:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 1264              		.loc 1 657 5 view .LVU352
 644:Src/mc_interface.c ****   bool retVal = false;
 1265              		.loc 1 644 1 is_stmt 0 view .LVU353
 1266 0000 38B5     		push	{r3, r4, r5, lr}
 1267              	.LCFI19:
 1268              		.cfi_def_cfa_offset 16
 1269              		.cfi_offset 3, -16
 1270              		.cfi_offset 4, -12
 1271              		.cfi_offset 5, -8
 1272              		.cfi_offset 14, -4
 644:Src/mc_interface.c ****   bool retVal = false;
 1273              		.loc 1 644 1 view .LVU354
 1274 0002 0546     		mov	r5, r0
 657:Src/mc_interface.c ****     if ((IDLE == State) || (ICLWAIT == State))
 1275              		.loc 1 657 13 view .LVU355
 1276 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1277              	.LVL102:
 658:Src/mc_interface.c ****     {
 1278              		.loc 1 658 5 is_stmt 1 view .LVU356
 658:Src/mc_interface.c ****     {
 1279              		.loc 1 658 8 is_stmt 0 view .LVU357
 1280 0008 50B1     		cbz	r0, .L83
 658:Src/mc_interface.c ****     {
 1281              		.loc 1 658 25 discriminator 1 view .LVU358
 1282 000a B0F10C04 		subs	r4, r0, #12
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1283              		.loc 1 667 26 discriminator 1 view .LVU359
 1284 000e 2846     		mov	r0, r5
 1285              	.LVL103:
 658:Src/mc_interface.c ****     {
 1286              		.loc 1 658 25 discriminator 1 view .LVU360
 1287 0010 18BF     		it	ne
 1288 0012 0124     		movne	r4, #1
 1289              	.LVL104:
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1290              		.loc 1 667 5 is_stmt 1 discriminator 1 view .LVU361
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1291              		.loc 1 667 26 is_stmt 0 discriminator 1 view .LVU362
 1292 0014 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1293              	.LVL105:
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1294              		.loc 1 667 8 discriminator 1 view .LVU363
 1295 0018 40B1     		cbz	r0, .L80
 1296              	.L82:
 645:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1297              		.loc 1 645 8 view .LVU364
 1298 001a 0024     		movs	r4, #0
 1299              	.LVL106:
 1300              	.L81:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 44


 677:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1301              		.loc 1 677 5 is_stmt 1 view .LVU365
 681:Src/mc_interface.c **** }
 1302              		.loc 1 681 3 view .LVU366
 682:Src/mc_interface.c **** 
 1303              		.loc 1 682 1 is_stmt 0 view .LVU367
 1304 001c 2046     		mov	r0, r4
 1305 001e 38BD     		pop	{r3, r4, r5, pc}
 1306              	.LVL107:
 1307              	.L83:
 660:Src/mc_interface.c ****     }
 1308              		.loc 1 660 14 view .LVU368
 1309 0020 0446     		mov	r4, r0
 1310              	.LVL108:
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1311              		.loc 1 667 5 is_stmt 1 view .LVU369
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1312              		.loc 1 667 26 is_stmt 0 view .LVU370
 1313 0022 2846     		mov	r0, r5
 1314              	.LVL109:
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1315              		.loc 1 667 26 view .LVU371
 1316 0024 FFF7FEFF 		bl	MCI_GetOccurredFaults
 1317              	.LVL110:
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1318              		.loc 1 667 8 view .LVU372
 1319 0028 0028     		cmp	r0, #0
 1320 002a F6D1     		bne	.L82
 1321              	.L80:
 668:Src/mc_interface.c ****         (status == true))
 1322              		.loc 1 668 26 discriminator 1 view .LVU373
 1323 002c 2846     		mov	r0, r5
 1324 002e FFF7FEFF 		bl	MCI_GetCurrentFaults
 1325              	.LVL111:
 667:Src/mc_interface.c ****         (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 1326              		.loc 1 667 58 discriminator 1 view .LVU374
 1327 0032 0028     		cmp	r0, #0
 1328 0034 F1D1     		bne	.L82
 668:Src/mc_interface.c ****         (status == true))
 1329              		.loc 1 668 57 view .LVU375
 1330 0036 002C     		cmp	r4, #0
 1331 0038 EFD0     		beq	.L82
 671:Src/mc_interface.c ****       retVal = true;
 1332              		.loc 1 671 7 is_stmt 1 view .LVU376
 671:Src/mc_interface.c ****       retVal = true;
 1333              		.loc 1 671 30 is_stmt 0 view .LVU377
 1334 003a 0523     		movs	r3, #5
 1335 003c 85F82630 		strb	r3, [r5, #38]
 672:Src/mc_interface.c ****     }
 1336              		.loc 1 672 7 is_stmt 1 view .LVU378
 1337              	.LVL112:
 672:Src/mc_interface.c ****     }
 1338              		.loc 1 672 7 is_stmt 0 view .LVU379
 1339 0040 ECE7     		b	.L81
 1340              		.cfi_endproc
 1341              	.LFE1103:
 1343 0042 00BF     		.section	.text.MCI_FaultAcknowledged,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 45


 1344              		.align	1
 1345              		.p2align 2,,3
 1346              		.weak	MCI_FaultAcknowledged
 1347              		.syntax unified
 1348              		.thumb
 1349              		.thumb_func
 1351              	MCI_FaultAcknowledged:
 1352              	.LVL113:
 1353              	.LFB1104:
 699:Src/mc_interface.c ****   bool reVal = false;
 1354              		.loc 1 699 1 is_stmt 1 view -0
 1355              		.cfi_startproc
 1356              		@ args = 0, pretend = 0, frame = 0
 1357              		@ frame_needed = 0, uses_anonymous_args = 0
 700:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1358              		.loc 1 700 3 view .LVU381
 709:Src/mc_interface.c ****     {
 1359              		.loc 1 709 5 view .LVU382
 699:Src/mc_interface.c ****   bool reVal = false;
 1360              		.loc 1 699 1 is_stmt 0 view .LVU383
 1361 0000 10B5     		push	{r4, lr}
 1362              	.LCFI20:
 1363              		.cfi_def_cfa_offset 8
 1364              		.cfi_offset 4, -8
 1365              		.cfi_offset 14, -4
 699:Src/mc_interface.c ****   bool reVal = false;
 1366              		.loc 1 699 1 view .LVU384
 1367 0002 0446     		mov	r4, r0
 709:Src/mc_interface.c ****     {
 1368              		.loc 1 709 24 view .LVU385
 1369 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1370              	.LVL114:
 709:Src/mc_interface.c ****     {
 1371              		.loc 1 709 8 view .LVU386
 1372 0008 0B28     		cmp	r0, #11
 1373 000a 01D0     		beq	.L89
 1374              	.L91:
 700:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1375              		.loc 1 700 8 view .LVU387
 1376 000c 0020     		movs	r0, #0
 1377              	.LVL115:
 718:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1378              		.loc 1 718 5 is_stmt 1 view .LVU388
 722:Src/mc_interface.c **** }
 1379              		.loc 1 722 3 view .LVU389
 723:Src/mc_interface.c **** 
 1380              		.loc 1 723 1 is_stmt 0 view .LVU390
 1381 000e 10BD     		pop	{r4, pc}
 1382              	.LVL116:
 1383              	.L89:
 709:Src/mc_interface.c ****     {
 1384              		.loc 1 709 70 discriminator 1 view .LVU391
 1385 0010 2046     		mov	r0, r4
 1386 0012 FFF7FEFF 		bl	MCI_GetCurrentFaults
 1387              	.LVL117:
 709:Src/mc_interface.c ****     {
 1388              		.loc 1 709 50 discriminator 1 view .LVU392
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 46


 1389 0016 0028     		cmp	r0, #0
 1390 0018 F8D1     		bne	.L91
 711:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 1391              		.loc 1 711 7 is_stmt 1 view .LVU393
 712:Src/mc_interface.c ****       reVal = true;
 1392              		.loc 1 712 30 is_stmt 0 view .LVU394
 1393 001a 0223     		movs	r3, #2
 1394 001c 84F82630 		strb	r3, [r4, #38]
 711:Src/mc_interface.c ****       pHandle->DirectCommand = MCI_ACK_FAULTS;
 1395              		.loc 1 711 27 view .LVU395
 1396 0020 6085     		strh	r0, [r4, #42]	@ movhi
 712:Src/mc_interface.c ****       reVal = true;
 1397              		.loc 1 712 7 is_stmt 1 view .LVU396
 713:Src/mc_interface.c ****     }
 1398              		.loc 1 713 7 view .LVU397
 1399              	.LVL118:
 713:Src/mc_interface.c ****     }
 1400              		.loc 1 713 13 is_stmt 0 view .LVU398
 1401 0022 0120     		movs	r0, #1
 1402              	.LVL119:
 718:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1403              		.loc 1 718 5 is_stmt 1 view .LVU399
 722:Src/mc_interface.c **** }
 1404              		.loc 1 722 3 view .LVU400
 723:Src/mc_interface.c **** 
 1405              		.loc 1 723 1 is_stmt 0 view .LVU401
 1406 0024 10BD     		pop	{r4, pc}
 723:Src/mc_interface.c **** 
 1407              		.loc 1 723 1 view .LVU402
 1408              		.cfi_endproc
 1409              	.LFE1104:
 1411 0026 00BF     		.section	.text.MCI_GetFaultState,"ax",%progbits
 1412              		.align	1
 1413              		.p2align 2,,3
 1414              		.weak	MCI_GetFaultState
 1415              		.syntax unified
 1416              		.thumb
 1417              		.thumb_func
 1419              	MCI_GetFaultState:
 1420              	.LVL120:
 1421              	.LFB1116:
 982:Src/mc_interface.c **** 
 983:Src/mc_interface.c **** /**
 984:Src/mc_interface.c ****   * @brief Returns the lists of current and past faults that occurred on the target motor
 985:Src/mc_interface.c ****   *
 986:Src/mc_interface.c ****   *  This function returns two bitfields containing information about the faults currently
 987:Src/mc_interface.c ****   * present and the faults occurred since the state machine has been moved into the #FAULT_NOW
 988:Src/mc_interface.c ****   * state.
 989:Src/mc_interface.c ****   *
 990:Src/mc_interface.c ****   * These two bitfields are 16 bits wide each and are concatenated into the 32-bit data. The
 991:Src/mc_interface.c ****   * 16 most significant bits contains the status of the current faults while that of the
 992:Src/mc_interface.c ****   * past faults is in the 16 least significant bits.
 993:Src/mc_interface.c ****   *
 994:Src/mc_interface.c ****   * @sa MCI_GetOccurredFaults, MCI_GetCurrentFaults
 995:Src/mc_interface.c ****   *
 996:Src/mc_interface.c ****   * @param  pHandle Pointer on the target motor drive structure.
 997:Src/mc_interface.c ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 47


 998:Src/mc_interface.c **** __weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
 999:Src/mc_interface.c **** {
 1422              		.loc 1 999 1 is_stmt 1 view -0
 1423              		.cfi_startproc
 1424              		@ args = 0, pretend = 0, frame = 0
 1425              		@ frame_needed = 0, uses_anonymous_args = 0
 1426              		@ link register save eliminated.
1000:Src/mc_interface.c ****   uint32_t LocalFaultState;
 1427              		.loc 1 1000 3 view .LVU404
1001:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1002:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1003:Src/mc_interface.c ****   {
1004:Src/mc_interface.c ****     LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
1005:Src/mc_interface.c ****   }
1006:Src/mc_interface.c ****   else
1007:Src/mc_interface.c ****   {
1008:Src/mc_interface.c **** #endif
1009:Src/mc_interface.c ****     LocalFaultState = (uint32_t)(pHandle->PastFaults);
 1428              		.loc 1 1009 5 view .LVU405
 1429              		.loc 1 1009 21 is_stmt 0 view .LVU406
 1430 0000 438D     		ldrh	r3, [r0, #42]
 1431              	.LVL121:
1010:Src/mc_interface.c ****     LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1432              		.loc 1 1010 5 is_stmt 1 view .LVU407
1011:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1012:Src/mc_interface.c ****   }
1013:Src/mc_interface.c **** #endif
1014:Src/mc_interface.c ****   return (LocalFaultState);
 1433              		.loc 1 1014 3 view .LVU408
1010:Src/mc_interface.c ****     LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 1434              		.loc 1 1010 24 is_stmt 0 view .LVU409
 1435 0002 008D     		ldrh	r0, [r0, #40]
 1436              	.LVL122:
1015:Src/mc_interface.c **** }
 1437              		.loc 1 1015 1 view .LVU410
 1438 0004 43EA0040 		orr	r0, r3, r0, lsl #16
 1439 0008 7047     		bx	lr
 1440              		.cfi_endproc
 1441              	.LFE1116:
 1443 000a 00BF     		.section	.text.MCI_GetControlMode,"ax",%progbits
 1444              		.align	1
 1445              		.p2align 2,,3
 1446              		.weak	MCI_GetControlMode
 1447              		.syntax unified
 1448              		.thumb
 1449              		.thumb_func
 1451              	MCI_GetControlMode:
 1452              	.LVL123:
 1453              	.LFB1117:
1016:Src/mc_interface.c **** 
1017:Src/mc_interface.c **** /**
1018:Src/mc_interface.c ****   * @brief  It returns the modality of the speed and torque controller.
1019:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1020:Src/mc_interface.c ****   * @retval MC_ControlMode_t It returns the modality of STC. It can be one of
1021:Src/mc_interface.c ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
1022:Src/mc_interface.c ****   */
1023:Src/mc_interface.c **** __weak MC_ControlMode_t MCI_GetControlMode(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 48


1024:Src/mc_interface.c **** {
 1454              		.loc 1 1024 1 is_stmt 1 view -0
 1455              		.cfi_startproc
 1456              		@ args = 0, pretend = 0, frame = 0
 1457              		@ frame_needed = 0, uses_anonymous_args = 0
 1458              		@ link register save eliminated.
1025:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1026:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
1027:Src/mc_interface.c **** #else
1028:Src/mc_interface.c ****   return (pHandle->LastModalitySetByUser);
 1459              		.loc 1 1028 3 view .LVU412
1029:Src/mc_interface.c **** #endif
1030:Src/mc_interface.c **** }
 1460              		.loc 1 1030 1 is_stmt 0 view .LVU413
 1461 0000 90F82D00 		ldrb	r0, [r0, #45]	@ zero_extendqisi2
 1462              	.LVL124:
 1463              		.loc 1 1030 1 view .LVU414
 1464 0004 7047     		bx	lr
 1465              		.cfi_endproc
 1466              	.LFE1117:
 1468 0006 00BF     		.section	.text.MCI_GetImposedMotorDirection,"ax",%progbits
 1469              		.align	1
 1470              		.p2align 2,,3
 1471              		.weak	MCI_GetImposedMotorDirection
 1472              		.syntax unified
 1473              		.thumb
 1474              		.thumb_func
 1476              	MCI_GetImposedMotorDirection:
 1477              	.LVL125:
 1478              	.LFB1118:
1031:Src/mc_interface.c **** 
1032:Src/mc_interface.c **** /**
1033:Src/mc_interface.c ****   * @brief  It returns the motor direction imposed by the last command
1034:Src/mc_interface.c ****   *         (MCI_ExecSpeedRamp, MCI_ExecTorqueRamp or MCI_SetCurrentReferences).
1035:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1036:Src/mc_interface.c ****   * @retval int16_t It returns 1 or -1 according the sign of hFinalSpeed,
1037:Src/mc_interface.c ****   *         hFinalTorque or Iqdref.q of the last command.
1038:Src/mc_interface.c ****   */
1039:Src/mc_interface.c **** __weak int16_t MCI_GetImposedMotorDirection(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1040:Src/mc_interface.c **** {
 1479              		.loc 1 1040 1 is_stmt 1 view -0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 1483              		@ link register save eliminated.
1041:Src/mc_interface.c ****   int16_t retVal = 1;
 1484              		.loc 1 1041 3 view .LVU416
1042:Src/mc_interface.c **** 
1043:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1044:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1045:Src/mc_interface.c ****   {
1046:Src/mc_interface.c ****     /* Nothing to do */
1047:Src/mc_interface.c ****   }
1048:Src/mc_interface.c ****   else
1049:Src/mc_interface.c ****   {
1050:Src/mc_interface.c **** #endif
1051:Src/mc_interface.c ****     switch (pHandle->lastCommand)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 49


 1485              		.loc 1 1051 5 view .LVU417
 1486              		.loc 1 1051 20 is_stmt 0 view .LVU418
 1487 0000 037D     		ldrb	r3, [r0, #20]	@ zero_extendqisi2
 1488              		.loc 1 1051 5 view .LVU419
 1489 0002 022B     		cmp	r3, #2
 1490 0004 05D0     		beq	.L96
 1491 0006 032B     		cmp	r3, #3
 1492 0008 13D0     		beq	.L97
 1493 000a 012B     		cmp	r3, #1
 1494 000c 09D0     		beq	.L103
 1495 000e 0120     		movs	r0, #1
 1496              	.LVL126:
1052:Src/mc_interface.c ****     {
1053:Src/mc_interface.c ****       case MCI_CMD_EXECSPEEDRAMP:
1054:Src/mc_interface.c ****       {
1055:Src/mc_interface.c ****         if (pHandle->hFinalSpeed < 0)
1056:Src/mc_interface.c ****         {
1057:Src/mc_interface.c ****           retVal = -1;
1058:Src/mc_interface.c ****         }
1059:Src/mc_interface.c ****         else
1060:Src/mc_interface.c ****         {
1061:Src/mc_interface.c ****           /* Nothing to do */
1062:Src/mc_interface.c ****         }
1063:Src/mc_interface.c ****         break;
1064:Src/mc_interface.c ****       }
1065:Src/mc_interface.c **** 
1066:Src/mc_interface.c ****       case MCI_CMD_EXECTORQUERAMP:
1067:Src/mc_interface.c ****       {
1068:Src/mc_interface.c ****         if (pHandle->hFinalTorque < 0)
1069:Src/mc_interface.c ****         {
1070:Src/mc_interface.c ****           retVal = -1;
1071:Src/mc_interface.c ****         }
1072:Src/mc_interface.c ****         else
1073:Src/mc_interface.c ****         {
1074:Src/mc_interface.c ****           /* Nothing to do */
1075:Src/mc_interface.c ****         }
1076:Src/mc_interface.c ****         break;
1077:Src/mc_interface.c ****       }
1078:Src/mc_interface.c **** 
1079:Src/mc_interface.c ****       case MCI_CMD_SETCURRENTREFERENCES:
1080:Src/mc_interface.c ****       {
1081:Src/mc_interface.c ****         if (pHandle->Iqdref.q < 0)
1082:Src/mc_interface.c ****         {
1083:Src/mc_interface.c ****           retVal = -1;
1084:Src/mc_interface.c ****         }
1085:Src/mc_interface.c ****         else
1086:Src/mc_interface.c ****         {
1087:Src/mc_interface.c ****           /* Nothing to do */
1088:Src/mc_interface.c ****         }
1089:Src/mc_interface.c ****         break;
1090:Src/mc_interface.c ****        }
1091:Src/mc_interface.c ****       default:
1092:Src/mc_interface.c ****         break;
1093:Src/mc_interface.c ****     }
1094:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1095:Src/mc_interface.c ****   }
1096:Src/mc_interface.c **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 50


1097:Src/mc_interface.c ****   return (retVal);
 1497              		.loc 1 1097 3 is_stmt 1 view .LVU420
1098:Src/mc_interface.c **** }
 1498              		.loc 1 1098 1 is_stmt 0 view .LVU421
 1499 0010 7047     		bx	lr
 1500              	.LVL127:
 1501              	.L96:
1068:Src/mc_interface.c ****         {
 1502              		.loc 1 1068 9 is_stmt 1 view .LVU422
1068:Src/mc_interface.c ****         {
 1503              		.loc 1 1068 12 is_stmt 0 view .LVU423
 1504 0012 B0F91830 		ldrsh	r3, [r0, #24]
1057:Src/mc_interface.c ****         }
 1505              		.loc 1 1057 18 view .LVU424
 1506 0016 002B     		cmp	r3, #0
 1507 0018 ACBF     		ite	ge
 1508 001a 0120     		movge	r0, #1
 1509              	.LVL128:
1057:Src/mc_interface.c ****         }
 1510              		.loc 1 1057 18 view .LVU425
 1511 001c 4FF0FF30 		movlt	r0, #-1
 1512 0020 7047     		bx	lr
 1513              	.LVL129:
 1514              	.L103:
1055:Src/mc_interface.c ****         {
 1515              		.loc 1 1055 9 is_stmt 1 view .LVU426
1055:Src/mc_interface.c ****         {
 1516              		.loc 1 1055 12 is_stmt 0 view .LVU427
 1517 0022 B0F91630 		ldrsh	r3, [r0, #22]
1057:Src/mc_interface.c ****         }
 1518              		.loc 1 1057 18 view .LVU428
 1519 0026 002B     		cmp	r3, #0
 1520 0028 ACBF     		ite	ge
 1521 002a 0120     		movge	r0, #1
 1522              	.LVL130:
1057:Src/mc_interface.c ****         }
 1523              		.loc 1 1057 18 view .LVU429
 1524 002c 4FF0FF30 		movlt	r0, #-1
 1525 0030 7047     		bx	lr
 1526              	.LVL131:
 1527              	.L97:
1081:Src/mc_interface.c ****         {
 1528              		.loc 1 1081 9 is_stmt 1 view .LVU430
1081:Src/mc_interface.c ****         {
 1529              		.loc 1 1081 12 is_stmt 0 view .LVU431
 1530 0032 B0F91A30 		ldrsh	r3, [r0, #26]
1057:Src/mc_interface.c ****         }
 1531              		.loc 1 1057 18 view .LVU432
 1532 0036 002B     		cmp	r3, #0
 1533 0038 ACBF     		ite	ge
 1534 003a 0120     		movge	r0, #1
 1535              	.LVL132:
1057:Src/mc_interface.c ****         }
 1536              		.loc 1 1057 18 view .LVU433
 1537 003c 4FF0FF30 		movlt	r0, #-1
 1538 0040 7047     		bx	lr
 1539              		.cfi_endproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 51


 1540              	.LFE1118:
 1542 0042 00BF     		.section	.text.MCI_GetLastRampFinalSpeed,"ax",%progbits
 1543              		.align	1
 1544              		.p2align 2,,3
 1545              		.weak	MCI_GetLastRampFinalSpeed
 1546              		.syntax unified
 1547              		.thumb
 1548              		.thumb_func
 1550              	MCI_GetLastRampFinalSpeed:
 1551              	.LVL133:
 1552              	.LFB1119:
1099:Src/mc_interface.c **** 
1100:Src/mc_interface.c **** /**
1101:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final speed sent by the
1102:Src/mc_interface.c ****   *         user expressed in the unit defined by #SPEED_UNIT.
1103:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1104:Src/mc_interface.c ****   * @retval int16_t last ramp final speed sent by the user expressed in
1105:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT.
1106:Src/mc_interface.c ****   */
1107:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalSpeed(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1108:Src/mc_interface.c **** {
 1553              		.loc 1 1108 1 is_stmt 1 view -0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
 1557              		@ link register save eliminated.
1109:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1110:Src/mc_interface.c ****   int16_t retVal = 0;
1111:Src/mc_interface.c **** 
1112:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1113:Src/mc_interface.c ****   {
1114:Src/mc_interface.c ****     /* Nothing to do */
1115:Src/mc_interface.c ****   }
1116:Src/mc_interface.c ****   else
1117:Src/mc_interface.c ****   {
1118:Src/mc_interface.c ****     retVal = pHandle->hFinalSpeed;
1119:Src/mc_interface.c ****   }
1120:Src/mc_interface.c ****   return (retVal);
1121:Src/mc_interface.c **** #else
1122:Src/mc_interface.c ****   return (pHandle->hFinalSpeed);
 1558              		.loc 1 1122 3 view .LVU435
1123:Src/mc_interface.c **** #endif
1124:Src/mc_interface.c **** }
 1559              		.loc 1 1124 1 is_stmt 0 view .LVU436
 1560 0000 B0F91600 		ldrsh	r0, [r0, #22]
 1561              	.LVL134:
 1562              		.loc 1 1124 1 view .LVU437
 1563 0004 7047     		bx	lr
 1564              		.cfi_endproc
 1565              	.LFE1119:
 1567 0006 00BF     		.section	.text.MCI_GetLastRampFinalTorque,"ax",%progbits
 1568              		.align	1
 1569              		.p2align 2,,3
 1570              		.weak	MCI_GetLastRampFinalTorque
 1571              		.syntax unified
 1572              		.thumb
 1573              		.thumb_func
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 52


 1575              	MCI_GetLastRampFinalTorque:
 1576              	.LVL135:
 1577              	.LFB1120:
1125:Src/mc_interface.c **** 
1126:Src/mc_interface.c **** /**
1127:Src/mc_interface.c ****   * @brief  It returns information about the last ramp final torque sent by the
1128:Src/mc_interface.c ****   *         user .This value represents actually the Iq current expressed in
1129:Src/mc_interface.c ****   *         digit.
1130:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1131:Src/mc_interface.c ****   * @retval int16_t last ramp final torque sent by the user expressed in digit
1132:Src/mc_interface.c ****   */
1133:Src/mc_interface.c **** __weak int16_t MCI_GetLastRampFinalTorque(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1134:Src/mc_interface.c **** {
 1578              		.loc 1 1134 1 is_stmt 1 view -0
 1579              		.cfi_startproc
 1580              		@ args = 0, pretend = 0, frame = 0
 1581              		@ frame_needed = 0, uses_anonymous_args = 0
 1582              		@ link register save eliminated.
1135:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1136:Src/mc_interface.c ****   int16_t retVal = 0;
1137:Src/mc_interface.c **** 
1138:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1139:Src/mc_interface.c ****   {
1140:Src/mc_interface.c ****     /* Nothing to do */
1141:Src/mc_interface.c ****   }
1142:Src/mc_interface.c ****   else
1143:Src/mc_interface.c ****   {
1144:Src/mc_interface.c ****     retVal = pHandle->hFinalTorque;
1145:Src/mc_interface.c ****   }
1146:Src/mc_interface.c ****   return (retVal);
1147:Src/mc_interface.c **** #else
1148:Src/mc_interface.c ****   return (pHandle->hFinalTorque);
 1583              		.loc 1 1148 3 view .LVU439
1149:Src/mc_interface.c **** #endif
1150:Src/mc_interface.c **** }
 1584              		.loc 1 1150 1 is_stmt 0 view .LVU440
 1585 0000 B0F91800 		ldrsh	r0, [r0, #24]
 1586              	.LVL136:
 1587              		.loc 1 1150 1 view .LVU441
 1588 0004 7047     		bx	lr
 1589              		.cfi_endproc
 1590              	.LFE1120:
 1592 0006 00BF     		.section	.text.MCI_GetLastRampFinalDuration,"ax",%progbits
 1593              		.align	1
 1594              		.p2align 2,,3
 1595              		.weak	MCI_GetLastRampFinalDuration
 1596              		.syntax unified
 1597              		.thumb
 1598              		.thumb_func
 1600              	MCI_GetLastRampFinalDuration:
 1601              	.LVL137:
 1602              	.LFB1121:
1151:Src/mc_interface.c **** 
1152:Src/mc_interface.c **** /**
1153:Src/mc_interface.c ****   * @brief  It returns information about the last ramp Duration sent by the
1154:Src/mc_interface.c ****   *         user .
1155:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 53


1156:Src/mc_interface.c ****   * @retval uint16_t last ramp final torque sent by the user expressed in digit
1157:Src/mc_interface.c ****   */
1158:Src/mc_interface.c **** __weak uint16_t MCI_GetLastRampFinalDuration(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1159:Src/mc_interface.c **** {
 1603              		.loc 1 1159 1 is_stmt 1 view -0
 1604              		.cfi_startproc
 1605              		@ args = 0, pretend = 0, frame = 0
 1606              		@ frame_needed = 0, uses_anonymous_args = 0
 1607              		@ link register save eliminated.
1160:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1161:Src/mc_interface.c ****   uint16_t retVal = 0;
1162:Src/mc_interface.c **** 
1163:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1164:Src/mc_interface.c ****   {
1165:Src/mc_interface.c ****     /* Nothing to do */
1166:Src/mc_interface.c ****   }
1167:Src/mc_interface.c ****   else
1168:Src/mc_interface.c ****   {
1169:Src/mc_interface.c ****     retVal = pHandle->hDurationms;
1170:Src/mc_interface.c ****   }
1171:Src/mc_interface.c ****   return (retVal);
1172:Src/mc_interface.c **** #else
1173:Src/mc_interface.c ****   return (pHandle->hDurationms);
 1608              		.loc 1 1173 3 view .LVU443
1174:Src/mc_interface.c **** #endif
1175:Src/mc_interface.c **** }
 1609              		.loc 1 1175 1 is_stmt 0 view .LVU444
 1610 0000 808C     		ldrh	r0, [r0, #36]
 1611              	.LVL138:
 1612              		.loc 1 1175 1 view .LVU445
 1613 0002 7047     		bx	lr
 1614              		.cfi_endproc
 1615              	.LFE1121:
 1617              		.section	.text.MCI_GetLastRampFinalSpeed_F,"ax",%progbits
 1618              		.align	1
 1619              		.p2align 2,,3
 1620              		.weak	MCI_GetLastRampFinalSpeed_F
 1621              		.syntax unified
 1622              		.thumb
 1623              		.thumb_func
 1625              	MCI_GetLastRampFinalSpeed_F:
 1626              	.LVL139:
 1627              	.LFB1122:
1176:Src/mc_interface.c **** 
1177:Src/mc_interface.c **** /**
1178:Src/mc_interface.c ****   * @brief  It returns last ramp final speed expressed in rpm.
1179:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1180:Src/mc_interface.c ****   * @retval float_t last ramp final speed sent by the user expressed in rpm.
1181:Src/mc_interface.c ****   */
1182:Src/mc_interface.c **** __weak float_t MCI_GetLastRampFinalSpeed_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1183:Src/mc_interface.c **** {
 1628              		.loc 1 1183 1 is_stmt 1 view -0
 1629              		.cfi_startproc
 1630              		@ args = 0, pretend = 0, frame = 0
 1631              		@ frame_needed = 0, uses_anonymous_args = 0
 1632              		@ link register save eliminated.
1184:Src/mc_interface.c ****   float_t reVal = 0.0f;
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 54


 1633              		.loc 1 1184 3 view .LVU447
1185:Src/mc_interface.c **** 
1186:Src/mc_interface.c ****   if (MC_NULL == pHandle)
 1634              		.loc 1 1186 3 view .LVU448
 1635              		.loc 1 1186 6 is_stmt 0 view .LVU449
 1636 0000 70B1     		cbz	r0, .L109
1187:Src/mc_interface.c ****   {
1188:Src/mc_interface.c ****     /* Nothing to do */
1189:Src/mc_interface.c ****   }
1190:Src/mc_interface.c ****   else
1191:Src/mc_interface.c ****   {
1192:Src/mc_interface.c ****     reVal = (((float_t)pHandle->hFinalSpeed * (float_t)U_RPM) / (float_t)SPEED_UNIT);
 1637              		.loc 1 1192 5 is_stmt 1 view .LVU450
 1638              		.loc 1 1192 15 is_stmt 0 view .LVU451
 1639 0002 B0F91630 		ldrsh	r3, [r0, #22]
 1640              		.loc 1 1192 45 view .LVU452
 1641 0006 DFED086A 		vldr.32	s13, .L110
 1642              		.loc 1 1192 15 view .LVU453
 1643 000a 07EE903A 		vmov	s15, r3	@ int
 1644 000e F8EEE77A 		vcvt.f32.s32	s15, s15
 1645              		.loc 1 1192 11 view .LVU454
 1646 0012 B2EE047A 		vmov.f32	s14, #1.0e+1
 1647              		.loc 1 1192 45 view .LVU455
 1648 0016 67EEA67A 		vmul.f32	s15, s15, s13
 1649              		.loc 1 1192 11 view .LVU456
 1650 001a 87EE870A 		vdiv.f32	s0, s15, s14
 1651              	.LVL140:
 1652              		.loc 1 1192 11 view .LVU457
 1653 001e 7047     		bx	lr
 1654              	.LVL141:
 1655              	.L109:
1184:Src/mc_interface.c **** 
 1656              		.loc 1 1184 11 view .LVU458
 1657 0020 9FED020A 		vldr.32	s0, .L110+4
1193:Src/mc_interface.c ****   }
1194:Src/mc_interface.c ****   return (reVal);
 1658              		.loc 1 1194 3 is_stmt 1 view .LVU459
1195:Src/mc_interface.c **** }
 1659              		.loc 1 1195 1 is_stmt 0 view .LVU460
 1660 0024 7047     		bx	lr
 1661              	.L111:
 1662 0026 00BF     		.align	2
 1663              	.L110:
 1664 0028 00007042 		.word	1114636288
 1665 002c 00000000 		.word	0
 1666              		.cfi_endproc
 1667              	.LFE1122:
 1669              		.section	.text.MCI_RampCompleted,"ax",%progbits
 1670              		.align	1
 1671              		.p2align 2,,3
 1672              		.weak	MCI_RampCompleted
 1673              		.syntax unified
 1674              		.thumb
 1675              		.thumb_func
 1677              	MCI_RampCompleted:
 1678              	.LVL142:
 1679              	.LFB1123:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 55


1196:Src/mc_interface.c **** 
1197:Src/mc_interface.c **** /**
1198:Src/mc_interface.c ****   * @brief  Check if the settled speed or torque ramp has been completed.
1199:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1200:Src/mc_interface.c ****   * @retval bool It returns true if the ramp is completed, false otherwise.
1201:Src/mc_interface.c ****   */
1202:Src/mc_interface.c **** __weak bool MCI_RampCompleted(MCI_Handle_t *pHandle)
1203:Src/mc_interface.c **** {
 1680              		.loc 1 1203 1 is_stmt 1 view -0
 1681              		.cfi_startproc
 1682              		@ args = 0, pretend = 0, frame = 0
 1683              		@ frame_needed = 0, uses_anonymous_args = 0
1204:Src/mc_interface.c ****   bool retVal = false;
 1684              		.loc 1 1204 3 view .LVU462
1205:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1206:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1207:Src/mc_interface.c ****   {
1208:Src/mc_interface.c ****     /* Nothing to do */
1209:Src/mc_interface.c ****   }
1210:Src/mc_interface.c ****   else
1211:Src/mc_interface.c ****   {
1212:Src/mc_interface.c **** #endif
1213:Src/mc_interface.c ****     if (RUN == MCI_GetSTMState(pHandle))
 1685              		.loc 1 1213 5 view .LVU463
1203:Src/mc_interface.c ****   bool retVal = false;
 1686              		.loc 1 1203 1 is_stmt 0 view .LVU464
 1687 0000 10B5     		push	{r4, lr}
 1688              	.LCFI21:
 1689              		.cfi_def_cfa_offset 8
 1690              		.cfi_offset 4, -8
 1691              		.cfi_offset 14, -4
1203:Src/mc_interface.c ****   bool retVal = false;
 1692              		.loc 1 1203 1 view .LVU465
 1693 0002 0446     		mov	r4, r0
 1694              		.loc 1 1213 16 view .LVU466
 1695 0004 FFF7FEFF 		bl	MCI_GetSTMState
 1696              	.LVL143:
 1697              		.loc 1 1213 8 view .LVU467
 1698 0008 0628     		cmp	r0, #6
 1699 000a 01D0     		beq	.L115
1214:Src/mc_interface.c ****     {
1215:Src/mc_interface.c ****       retVal = STC_RampCompleted(pHandle->pSTC);
1216:Src/mc_interface.c ****     }
1217:Src/mc_interface.c ****     else
1218:Src/mc_interface.c ****     {
1219:Src/mc_interface.c ****       /* Nothing to do */
1220:Src/mc_interface.c ****     }
 1700              		.loc 1 1220 5 is_stmt 1 view .LVU468
1221:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1222:Src/mc_interface.c ****   }
1223:Src/mc_interface.c **** #endif
1224:Src/mc_interface.c ****   return (retVal);
 1701              		.loc 1 1224 3 view .LVU469
1225:Src/mc_interface.c **** }
 1702              		.loc 1 1225 1 is_stmt 0 view .LVU470
 1703 000c 0020     		movs	r0, #0
 1704 000e 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 56


 1705              	.LVL144:
 1706              	.L115:
1215:Src/mc_interface.c ****     }
 1707              		.loc 1 1215 7 is_stmt 1 view .LVU471
1215:Src/mc_interface.c ****     }
 1708              		.loc 1 1215 16 is_stmt 0 view .LVU472
 1709 0010 2068     		ldr	r0, [r4]
 1710              		.loc 1 1225 1 view .LVU473
 1711 0012 BDE81040 		pop	{r4, lr}
 1712              	.LCFI22:
 1713              		.cfi_restore 14
 1714              		.cfi_restore 4
 1715              		.cfi_def_cfa_offset 0
 1716              	.LVL145:
1215:Src/mc_interface.c ****     }
 1717              		.loc 1 1215 16 view .LVU474
 1718 0016 FFF7FEBF 		b	STC_RampCompleted
 1719              	.LVL146:
 1720              		.cfi_endproc
 1721              	.LFE1123:
 1723 001a 00BF     		.section	.text.MCI_StopSpeedRamp,"ax",%progbits
 1724              		.align	1
 1725              		.p2align 2,,3
 1726              		.weak	MCI_StopSpeedRamp
 1727              		.syntax unified
 1728              		.thumb
 1729              		.thumb_func
 1731              	MCI_StopSpeedRamp:
 1732              	.LVL147:
 1733              	.LFB1124:
1226:Src/mc_interface.c **** 
1227:Src/mc_interface.c **** /**
1228:Src/mc_interface.c ****   * @brief  Stop the execution of speed ramp.
1229:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1230:Src/mc_interface.c ****   * @retval bool It returns true if the command is executed, false otherwise.
1231:Src/mc_interface.c ****   *
1232:Src/mc_interface.c ****   * @deprecated This function is deprecated and should not be used anymore. It will be
1233:Src/mc_interface.c ****   *             removed in a future version of the MCSDK. Use MCI_StopRamp() instead.
1234:Src/mc_interface.c ****   */
1235:Src/mc_interface.c **** __weak bool MCI_StopSpeedRamp(MCI_Handle_t *pHandle)
1236:Src/mc_interface.c **** {
 1734              		.loc 1 1236 1 is_stmt 1 view -0
 1735              		.cfi_startproc
 1736              		@ args = 0, pretend = 0, frame = 0
 1737              		@ frame_needed = 0, uses_anonymous_args = 0
 1738              		@ link register save eliminated.
1237:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1238:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? false : STC_StopSpeedRamp(pHandle->pSTC));
1239:Src/mc_interface.c **** #else
1240:Src/mc_interface.c ****   return (STC_StopSpeedRamp(pHandle->pSTC));
 1739              		.loc 1 1240 3 view .LVU476
 1740              		.loc 1 1240 11 is_stmt 0 view .LVU477
 1741 0000 0068     		ldr	r0, [r0]
 1742              	.LVL148:
 1743              		.loc 1 1240 11 view .LVU478
 1744 0002 FFF7FEBF 		b	STC_StopSpeedRamp
 1745              	.LVL149:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 57


 1746              		.cfi_endproc
 1747              	.LFE1124:
 1749 0006 00BF     		.section	.text.MCI_StopRamp,"ax",%progbits
 1750              		.align	1
 1751              		.p2align 2,,3
 1752              		.weak	MCI_StopRamp
 1753              		.syntax unified
 1754              		.thumb
 1755              		.thumb_func
 1757              	MCI_StopRamp:
 1758              	.LVL150:
 1759              	.LFB1125:
1241:Src/mc_interface.c **** #endif
1242:Src/mc_interface.c **** }
1243:Src/mc_interface.c **** 
1244:Src/mc_interface.c **** /**
1245:Src/mc_interface.c ****   * @brief  Stop the execution of ongoing ramp.
1246:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1247:Src/mc_interface.c ****   */
1248:Src/mc_interface.c **** __weak void MCI_StopRamp(MCI_Handle_t *pHandle)
1249:Src/mc_interface.c **** {
 1760              		.loc 1 1249 1 is_stmt 1 view -0
 1761              		.cfi_startproc
 1762              		@ args = 0, pretend = 0, frame = 0
 1763              		@ frame_needed = 0, uses_anonymous_args = 0
 1764              		@ link register save eliminated.
1250:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1251:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1252:Src/mc_interface.c ****   {
1253:Src/mc_interface.c ****     /* Nothing to do */
1254:Src/mc_interface.c ****   }
1255:Src/mc_interface.c ****   else
1256:Src/mc_interface.c ****   {
1257:Src/mc_interface.c **** #endif
1258:Src/mc_interface.c ****     STC_StopRamp(pHandle->pSTC);
 1765              		.loc 1 1258 5 view .LVU480
 1766 0000 0068     		ldr	r0, [r0]
 1767              	.LVL151:
 1768              		.loc 1 1258 5 is_stmt 0 view .LVU481
 1769 0002 FFF7FEBF 		b	STC_StopRamp
 1770              	.LVL152:
 1771              		.cfi_endproc
 1772              	.LFE1125:
 1774 0006 00BF     		.section	.text.MCI_GetSpdSensorReliability,"ax",%progbits
 1775              		.align	1
 1776              		.p2align 2,,3
 1777              		.weak	MCI_GetSpdSensorReliability
 1778              		.syntax unified
 1779              		.thumb
 1780              		.thumb_func
 1782              	MCI_GetSpdSensorReliability:
 1783              	.LVL153:
 1784              	.LFB1126:
1259:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1260:Src/mc_interface.c ****   }
1261:Src/mc_interface.c **** #endif
1262:Src/mc_interface.c **** }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 58


1263:Src/mc_interface.c **** 
1264:Src/mc_interface.c **** /**
1265:Src/mc_interface.c ****   * @brief  It returns speed sensor reliability with reference to the sensor
1266:Src/mc_interface.c ****   *         actually used for reference frame transformation
1267:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1268:Src/mc_interface.c ****   * @retval bool It returns true if the speed sensor utilized for reference
1269:Src/mc_interface.c ****   *         frame transformation and (in speed control mode) for speed
1270:Src/mc_interface.c ****   *         regulation is reliable, false otherwise
1271:Src/mc_interface.c ****   */
1272:Src/mc_interface.c **** __weak bool MCI_GetSpdSensorReliability(MCI_Handle_t *pHandle)
1273:Src/mc_interface.c **** {
 1785              		.loc 1 1273 1 is_stmt 1 view -0
 1786              		.cfi_startproc
 1787              		@ args = 0, pretend = 0, frame = 0
 1788              		@ frame_needed = 0, uses_anonymous_args = 0
1274:Src/mc_interface.c ****   bool status;
 1789              		.loc 1 1274 3 view .LVU483
1275:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1276:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1277:Src/mc_interface.c ****   {
1278:Src/mc_interface.c ****     status = false;
1279:Src/mc_interface.c ****   }
1280:Src/mc_interface.c ****   else
1281:Src/mc_interface.c ****   {
1282:Src/mc_interface.c **** #endif
1283:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1790              		.loc 1 1283 5 view .LVU484
1273:Src/mc_interface.c ****   bool status;
 1791              		.loc 1 1273 1 is_stmt 0 view .LVU485
 1792 0000 08B5     		push	{r3, lr}
 1793              	.LCFI23:
 1794              		.cfi_def_cfa_offset 8
 1795              		.cfi_offset 3, -8
 1796              		.cfi_offset 14, -4
 1797              		.loc 1 1283 43 view .LVU486
 1798 0002 0068     		ldr	r0, [r0]
 1799              	.LVL154:
 1800              		.loc 1 1283 43 view .LVU487
 1801 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1802              	.LVL155:
1284:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1803              		.loc 1 1284 5 is_stmt 1 view .LVU488
1285:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1286:Src/mc_interface.c ****   }
1287:Src/mc_interface.c **** #endif
1288:Src/mc_interface.c **** 
1289:Src/mc_interface.c ****   return (status);
1290:Src/mc_interface.c **** }
 1804              		.loc 1 1290 1 is_stmt 0 view .LVU489
 1805 0008 BDE80840 		pop	{r3, lr}
 1806              	.LCFI24:
 1807              		.cfi_restore 14
 1808              		.cfi_restore 3
 1809              		.cfi_def_cfa_offset 0
1284:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1810              		.loc 1 1284 14 view .LVU490
 1811 000c FFF7FEBF 		b	SPD_Check
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 59


 1812              	.LVL156:
1284:Src/mc_interface.c ****     status = SPD_Check(SpeedSensor);
 1813              		.loc 1 1284 14 view .LVU491
 1814              		.cfi_endproc
 1815              	.LFE1126:
 1817              		.section	.text.MCI_GetAvrgMecSpeedUnit,"ax",%progbits
 1818              		.align	1
 1819              		.p2align 2,,3
 1820              		.weak	MCI_GetAvrgMecSpeedUnit
 1821              		.syntax unified
 1822              		.thumb
 1823              		.thumb_func
 1825              	MCI_GetAvrgMecSpeedUnit:
 1826              	.LVL157:
 1827              	.LFB1127:
1291:Src/mc_interface.c **** 
1292:Src/mc_interface.c **** /**
1293:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in
1294:Src/mc_interface.c ****   *         the unit defined by #SPEED_UNIT and related to the sensor actually
1295:Src/mc_interface.c ****   *         used by FOC algorithm
1296:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1297:Src/mc_interface.c ****   */
1298:Src/mc_interface.c **** __weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
1299:Src/mc_interface.c **** {
 1828              		.loc 1 1299 1 is_stmt 1 view -0
 1829              		.cfi_startproc
 1830              		@ args = 0, pretend = 0, frame = 0
 1831              		@ frame_needed = 0, uses_anonymous_args = 0
1300:Src/mc_interface.c ****   int16_t temp_speed;
 1832              		.loc 1 1300 3 view .LVU493
1301:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1302:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1303:Src/mc_interface.c ****   {
1304:Src/mc_interface.c ****     temp_speed = 0;
1305:Src/mc_interface.c ****   }
1306:Src/mc_interface.c ****   else
1307:Src/mc_interface.c ****   {
1308:Src/mc_interface.c **** #endif
1309:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1833              		.loc 1 1309 5 view .LVU494
1299:Src/mc_interface.c ****   int16_t temp_speed;
 1834              		.loc 1 1299 1 is_stmt 0 view .LVU495
 1835 0000 08B5     		push	{r3, lr}
 1836              	.LCFI25:
 1837              		.cfi_def_cfa_offset 8
 1838              		.cfi_offset 3, -8
 1839              		.cfi_offset 14, -4
 1840              		.loc 1 1309 44 view .LVU496
 1841 0002 0068     		ldr	r0, [r0]
 1842              	.LVL158:
 1843              		.loc 1 1309 44 view .LVU497
 1844 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1845              	.LVL159:
1310:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1846              		.loc 1 1310 5 is_stmt 1 view .LVU498
1311:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1312:Src/mc_interface.c ****   }
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 60


1313:Src/mc_interface.c **** #endif
1314:Src/mc_interface.c ****   return (temp_speed);
1315:Src/mc_interface.c **** }
 1847              		.loc 1 1315 1 is_stmt 0 view .LVU499
 1848 0008 BDE80840 		pop	{r3, lr}
 1849              	.LCFI26:
 1850              		.cfi_restore 14
 1851              		.cfi_restore 3
 1852              		.cfi_def_cfa_offset 0
1310:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1853              		.loc 1 1310 18 view .LVU500
 1854 000c FFF7FEBF 		b	SPD_GetAvrgMecSpeedUnit
 1855              	.LVL160:
1310:Src/mc_interface.c ****     temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 1856              		.loc 1 1310 18 view .LVU501
 1857              		.cfi_endproc
 1858              	.LFE1127:
 1860              		.section	.text.MCI_GetAvrgMecSpeed_F,"ax",%progbits
 1861              		.align	1
 1862              		.p2align 2,,3
 1863              		.weak	MCI_GetAvrgMecSpeed_F
 1864              		.syntax unified
 1865              		.thumb
 1866              		.thumb_func
 1868              	MCI_GetAvrgMecSpeed_F:
 1869              	.LVL161:
 1870              	.LFB1128:
1316:Src/mc_interface.c **** 
1317:Src/mc_interface.c **** /**
1318:Src/mc_interface.c ****   * @brief  Returns the last computed average mechanical speed, expressed in rpm
1319:Src/mc_interface.c ****   *         and related to the sensor actually used by FOC algorithm.
1320:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1321:Src/mc_interface.c ****   */
1322:Src/mc_interface.c **** __weak float_t MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
1323:Src/mc_interface.c **** {
 1871              		.loc 1 1323 1 is_stmt 1 view -0
 1872              		.cfi_startproc
 1873              		@ args = 0, pretend = 0, frame = 0
 1874              		@ frame_needed = 0, uses_anonymous_args = 0
1324:Src/mc_interface.c ****   float_t returnAvrgSpeed;
 1875              		.loc 1 1324 3 view .LVU503
1325:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1326:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1327:Src/mc_interface.c ****   {
1328:Src/mc_interface.c ****     returnAvrgSpeed = 0.0f;
1329:Src/mc_interface.c ****   }
1330:Src/mc_interface.c ****   else
1331:Src/mc_interface.c ****   {
1332:Src/mc_interface.c **** #endif
1333:Src/mc_interface.c ****     SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 1876              		.loc 1 1333 5 view .LVU504
1323:Src/mc_interface.c ****   float_t returnAvrgSpeed;
 1877              		.loc 1 1323 1 is_stmt 0 view .LVU505
 1878 0000 08B5     		push	{r3, lr}
 1879              	.LCFI27:
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 3, -8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 61


 1882              		.cfi_offset 14, -4
 1883              		.loc 1 1333 43 view .LVU506
 1884 0002 0068     		ldr	r0, [r0]
 1885              	.LVL162:
 1886              		.loc 1 1333 43 view .LVU507
 1887 0004 FFF7FEFF 		bl	STC_GetSpeedSensor
 1888              	.LVL163:
1334:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1889              		.loc 1 1334 5 is_stmt 1 view .LVU508
 1890              		.loc 1 1334 34 is_stmt 0 view .LVU509
 1891 0008 FFF7FEFF 		bl	SPD_GetAvrgMecSpeedUnit
 1892              	.LVL164:
1335:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1336:Src/mc_interface.c ****   }
1337:Src/mc_interface.c **** #endif
1338:Src/mc_interface.c ****   return (returnAvrgSpeed);
 1893              		.loc 1 1338 3 is_stmt 1 view .LVU510
1334:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1894              		.loc 1 1334 25 is_stmt 0 view .LVU511
 1895 000c 07EE900A 		vmov	s15, r0	@ int
1334:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1896              		.loc 1 1334 71 view .LVU512
 1897 0010 9FED057A 		vldr.32	s14, .L124
1334:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1898              		.loc 1 1334 25 view .LVU513
 1899 0014 F8EEE77A 		vcvt.f32.s32	s15, s15
1334:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1900              		.loc 1 1334 21 view .LVU514
 1901 0018 B2EE040A 		vmov.f32	s0, #1.0e+1
1334:Src/mc_interface.c ****     returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)
 1902              		.loc 1 1334 71 view .LVU515
 1903 001c 67EE877A 		vmul.f32	s15, s15, s14
1339:Src/mc_interface.c **** }
 1904              		.loc 1 1339 1 view .LVU516
 1905 0020 87EE800A 		vdiv.f32	s0, s15, s0
 1906 0024 08BD     		pop	{r3, pc}
 1907              	.L125:
 1908 0026 00BF     		.align	2
 1909              	.L124:
 1910 0028 00007042 		.word	1114636288
 1911              		.cfi_endproc
 1912              	.LFE1128:
 1914              		.section	.text.MCI_GetMecSpeedRefUnit,"ax",%progbits
 1915              		.align	1
 1916              		.p2align 2,,3
 1917              		.weak	MCI_GetMecSpeedRefUnit
 1918              		.syntax unified
 1919              		.thumb
 1920              		.thumb_func
 1922              	MCI_GetMecSpeedRefUnit:
 1923              	.LVL165:
 1924              	.LFB1129:
1340:Src/mc_interface.c **** 
1341:Src/mc_interface.c **** /**
1342:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in the unit defined by #
1343:Src/mc_interface.c ****   *
1344:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 62


1345:Src/mc_interface.c ****   *
1346:Src/mc_interface.c ****   */
1347:Src/mc_interface.c **** __weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
1348:Src/mc_interface.c **** {
 1925              		.loc 1 1348 1 is_stmt 1 view -0
 1926              		.cfi_startproc
 1927              		@ args = 0, pretend = 0, frame = 0
 1928              		@ frame_needed = 0, uses_anonymous_args = 0
 1929              		@ link register save eliminated.
1349:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1350:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
1351:Src/mc_interface.c **** #else
1352:Src/mc_interface.c ****   return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 1930              		.loc 1 1352 3 view .LVU518
 1931              		.loc 1 1352 11 is_stmt 0 view .LVU519
 1932 0000 0068     		ldr	r0, [r0]
 1933              	.LVL166:
 1934              		.loc 1 1352 11 view .LVU520
 1935 0002 FFF7FEBF 		b	STC_GetMecSpeedRefUnit
 1936              	.LVL167:
 1937              		.cfi_endproc
 1938              	.LFE1129:
 1940 0006 00BF     		.section	.text.MCI_GetMecSpeedRef_F,"ax",%progbits
 1941              		.align	1
 1942              		.p2align 2,,3
 1943              		.weak	MCI_GetMecSpeedRef_F
 1944              		.syntax unified
 1945              		.thumb
 1946              		.thumb_func
 1948              	MCI_GetMecSpeedRef_F:
 1949              	.LVL168:
 1950              	.LFB1130:
1353:Src/mc_interface.c **** #endif
1354:Src/mc_interface.c **** }
1355:Src/mc_interface.c **** 
1356:Src/mc_interface.c **** /**
1357:Src/mc_interface.c ****   * @brief  Returns the current mechanical rotor speed reference expressed in rpm.
1358:Src/mc_interface.c ****   *
1359:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1360:Src/mc_interface.c ****   *
1361:Src/mc_interface.c ****   */
1362:Src/mc_interface.c **** __weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
1363:Src/mc_interface.c **** {
 1951              		.loc 1 1363 1 is_stmt 1 view -0
 1952              		.cfi_startproc
 1953              		@ args = 0, pretend = 0, frame = 0
 1954              		@ frame_needed = 0, uses_anonymous_args = 0
1364:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1365:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0.0f :
1366:Src/mc_interface.c ****           (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT)
1367:Src/mc_interface.c **** #else
1368:Src/mc_interface.c ****   return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT)
 1955              		.loc 1 1368 3 view .LVU522
1363:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 1956              		.loc 1 1363 1 is_stmt 0 view .LVU523
 1957 0000 08B5     		push	{r3, lr}
 1958              	.LCFI28:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 63


 1959              		.cfi_def_cfa_offset 8
 1960              		.cfi_offset 3, -8
 1961              		.cfi_offset 14, -4
 1962              		.loc 1 1368 22 view .LVU524
 1963 0002 0068     		ldr	r0, [r0]
 1964              	.LVL169:
 1965              		.loc 1 1368 22 view .LVU525
 1966 0004 FFF7FEFF 		bl	STC_GetMecSpeedRefUnit
 1967              	.LVL170:
 1968              		.loc 1 1368 13 view .LVU526
 1969 0008 07EE900A 		vmov	s15, r0	@ int
 1970              		.loc 1 1368 60 view .LVU527
 1971 000c 9FED057A 		vldr.32	s14, .L129
 1972              		.loc 1 1368 13 view .LVU528
 1973 0010 F8EEE77A 		vcvt.f32.s32	s15, s15
 1974              		.loc 1 1368 78 view .LVU529
 1975 0014 B2EE040A 		vmov.f32	s0, #1.0e+1
 1976              		.loc 1 1368 60 view .LVU530
 1977 0018 67EE877A 		vmul.f32	s15, s15, s14
1369:Src/mc_interface.c **** #endif
1370:Src/mc_interface.c **** }
 1978              		.loc 1 1370 1 view .LVU531
 1979 001c 87EE800A 		vdiv.f32	s0, s15, s0
 1980 0020 08BD     		pop	{r3, pc}
 1981              	.L130:
 1982 0022 00BF     		.align	2
 1983              	.L129:
 1984 0024 00007042 		.word	1114636288
 1985              		.cfi_endproc
 1986              	.LFE1130:
 1988              		.section	.text.MCI_GetIab,"ax",%progbits
 1989              		.align	1
 1990              		.p2align 2,,3
 1991              		.weak	MCI_GetIab
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1996              	MCI_GetIab:
 1997              	.LVL171:
 1998              	.LFB1131:
1371:Src/mc_interface.c **** 
1372:Src/mc_interface.c **** /**
1373:Src/mc_interface.c ****   * @brief  It returns stator current Iab in ab_t format
1374:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1375:Src/mc_interface.c ****   * @retval ab_t Stator current Iab
1376:Src/mc_interface.c ****   */
1377:Src/mc_interface.c **** __weak ab_t MCI_GetIab(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1378:Src/mc_interface.c **** {
 1999              		.loc 1 1378 1 is_stmt 1 view -0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 8
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 2003              		@ link register save eliminated.
1379:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1380:Src/mc_interface.c ****   ab_t tempVal;
1381:Src/mc_interface.c **** 
1382:Src/mc_interface.c ****   if (MC_NULL == pHandle)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 64


1383:Src/mc_interface.c ****   {
1384:Src/mc_interface.c ****     tempVal.a = 0;
1385:Src/mc_interface.c ****     tempVal.b = 0;
1386:Src/mc_interface.c ****   }
1387:Src/mc_interface.c ****   else
1388:Src/mc_interface.c ****   {
1389:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iab;
1390:Src/mc_interface.c ****   }
1391:Src/mc_interface.c ****   return (tempVal);
1392:Src/mc_interface.c **** #else
1393:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iab);
 2004              		.loc 1 1393 3 view .LVU533
 2005              		.loc 1 1393 28 is_stmt 0 view .LVU534
 2006 0000 4268     		ldr	r2, [r0, #4]
 2007 0002 1068     		ldr	r0, [r2]	@ unaligned
 2008              	.LVL172:
 2009              		.loc 1 1393 28 view .LVU535
 2010 0004 0023     		movs	r3, #0
 2011 0006 82B2     		uxth	r2, r0
 2012 0008 62F30F03 		bfi	r3, r2, #0, #16
 2013 000c 000C     		lsrs	r0, r0, #16
 2014 000e 60F31F43 		bfi	r3, r0, #16, #16
1378:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2015              		.loc 1 1378 1 view .LVU536
 2016 0012 82B0     		sub	sp, sp, #8
 2017              	.LCFI29:
 2018              		.cfi_def_cfa_offset 8
1394:Src/mc_interface.c **** #endif
1395:Src/mc_interface.c **** }
 2019              		.loc 1 1395 1 view .LVU537
 2020 0014 1846     		mov	r0, r3
 2021 0016 02B0     		add	sp, sp, #8
 2022              	.LCFI30:
 2023              		.cfi_def_cfa_offset 0
 2024              		@ sp needed
 2025 0018 7047     		bx	lr
 2026              		.cfi_endproc
 2027              	.LFE1131:
 2029 001a 00BF     		.section	.text.MCI_GetIab_F,"ax",%progbits
 2030              		.align	1
 2031              		.p2align 2,,3
 2032              		.weak	MCI_GetIab_F
 2033              		.syntax unified
 2034              		.thumb
 2035              		.thumb_func
 2037              	MCI_GetIab_F:
 2038              	.LVL173:
 2039              	.LFB1132:
1396:Src/mc_interface.c **** 
1397:Src/mc_interface.c **** __weak ab_f_t MCI_GetIab_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1398:Src/mc_interface.c **** {
 2040              		.loc 1 1398 1 is_stmt 1 view -0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 16
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
 2044              		@ link register save eliminated.
1399:Src/mc_interface.c **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 65


1400:Src/mc_interface.c ****   ab_f_t iab;
 2045              		.loc 1 1400 3 view .LVU539
1401:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1402:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1403:Src/mc_interface.c ****   {
1404:Src/mc_interface.c ****     iab.a = 0.0f;
1405:Src/mc_interface.c ****     iab.b = 0.0f;
1406:Src/mc_interface.c ****   }
1407:Src/mc_interface.c ****   else
1408:Src/mc_interface.c ****   {
1409:Src/mc_interface.c **** #endif
1410:Src/mc_interface.c ****     iab.a = (float_t)((float_t)pHandle->pFOCVars->Iab.a * pHandle->pScale->current);
 2046              		.loc 1 1410 5 view .LVU540
 2047              		.loc 1 1410 39 is_stmt 0 view .LVU541
 2048 0000 4368     		ldr	r3, [r0, #4]
 2049              		.loc 1 1410 74 view .LVU542
 2050 0002 026A     		ldr	r2, [r0, #32]
1411:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2051              		.loc 1 1411 23 view .LVU543
 2052 0004 B3F90210 		ldrsh	r1, [r3, #2]
1410:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2053              		.loc 1 1410 23 view .LVU544
 2054 0008 B3F90030 		ldrsh	r3, [r3]
 2055              		.loc 1 1411 23 view .LVU545
 2056 000c 00EE901A 		vmov	s1, r1	@ int
1410:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2057              		.loc 1 1410 23 view .LVU546
 2058 0010 07EE903A 		vmov	s15, r3	@ int
1410:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2059              		.loc 1 1410 74 view .LVU547
 2060 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
1410:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2061              		.loc 1 1410 23 view .LVU548
 2062 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1410:Src/mc_interface.c ****     iab.b = (float_t)((float_t)pHandle->pFOCVars->Iab.b * pHandle->pScale->current);
 2063              		.loc 1 1410 74 view .LVU549
 2064 001a 00EE103A 		vmov	s0, r3	@ int
 2065              	.LVL174:
 2066              		.loc 1 1411 5 is_stmt 1 view .LVU550
 2067              		.loc 1 1411 23 is_stmt 0 view .LVU551
 2068 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2069              	.LVL175:
1412:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1413:Src/mc_interface.c ****   }
1414:Src/mc_interface.c **** #endif
1415:Src/mc_interface.c ****   return (iab);
 2070              		.loc 1 1415 3 is_stmt 1 view .LVU552
1398:Src/mc_interface.c **** 
 2071              		.loc 1 1398 1 is_stmt 0 view .LVU553
 2072 0022 84B0     		sub	sp, sp, #16
 2073              	.LCFI31:
 2074              		.cfi_def_cfa_offset 16
1416:Src/mc_interface.c **** 
1417:Src/mc_interface.c **** }
 2075              		.loc 1 1417 1 view .LVU554
 2076 0024 60EE800A 		vmul.f32	s1, s1, s0
 2077 0028 27EE800A 		vmul.f32	s0, s15, s0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 66


 2078 002c 04B0     		add	sp, sp, #16
 2079              	.LCFI32:
 2080              		.cfi_def_cfa_offset 0
 2081              		@ sp needed
 2082 002e 7047     		bx	lr
 2083              		.cfi_endproc
 2084              	.LFE1132:
 2086              		.section	.text.MCI_GetIalphabeta,"ax",%progbits
 2087              		.align	1
 2088              		.p2align 2,,3
 2089              		.weak	MCI_GetIalphabeta
 2090              		.syntax unified
 2091              		.thumb
 2092              		.thumb_func
 2094              	MCI_GetIalphabeta:
 2095              	.LVL176:
 2096              	.LFB1133:
1418:Src/mc_interface.c **** 
1419:Src/mc_interface.c **** /**
1420:Src/mc_interface.c ****   * @brief  It returns stator current Ialphabeta in alphabeta_t format
1421:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1422:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Ialphabeta
1423:Src/mc_interface.c ****   */
1424:Src/mc_interface.c **** __weak alphabeta_t MCI_GetIalphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1425:Src/mc_interface.c **** {
 2097              		.loc 1 1425 1 is_stmt 1 view -0
 2098              		.cfi_startproc
 2099              		@ args = 0, pretend = 0, frame = 8
 2100              		@ frame_needed = 0, uses_anonymous_args = 0
 2101              		@ link register save eliminated.
1426:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1427:Src/mc_interface.c ****   alphabeta_t tempVal;
1428:Src/mc_interface.c **** 
1429:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1430:Src/mc_interface.c ****   {
1431:Src/mc_interface.c ****     tempVal.alpha = 0;
1432:Src/mc_interface.c ****     tempVal.beta = 0;
1433:Src/mc_interface.c ****   }
1434:Src/mc_interface.c ****   else
1435:Src/mc_interface.c ****   {
1436:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Ialphabeta;
1437:Src/mc_interface.c ****   }
1438:Src/mc_interface.c ****   return (tempVal);
1439:Src/mc_interface.c **** #else
1440:Src/mc_interface.c ****   return (pHandle->pFOCVars->Ialphabeta);
 2102              		.loc 1 1440 3 view .LVU556
 2103              		.loc 1 1440 28 is_stmt 0 view .LVU557
 2104 0000 4268     		ldr	r2, [r0, #4]
 2105 0002 5068     		ldr	r0, [r2, #4]	@ unaligned
 2106              	.LVL177:
 2107              		.loc 1 1440 28 view .LVU558
 2108 0004 0023     		movs	r3, #0
 2109 0006 82B2     		uxth	r2, r0
 2110 0008 62F30F03 		bfi	r3, r2, #0, #16
 2111 000c 000C     		lsrs	r0, r0, #16
 2112 000e 60F31F43 		bfi	r3, r0, #16, #16
1425:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 67


 2113              		.loc 1 1425 1 view .LVU559
 2114 0012 82B0     		sub	sp, sp, #8
 2115              	.LCFI33:
 2116              		.cfi_def_cfa_offset 8
1441:Src/mc_interface.c **** #endif
1442:Src/mc_interface.c **** }
 2117              		.loc 1 1442 1 view .LVU560
 2118 0014 1846     		mov	r0, r3
 2119 0016 02B0     		add	sp, sp, #8
 2120              	.LCFI34:
 2121              		.cfi_def_cfa_offset 0
 2122              		@ sp needed
 2123 0018 7047     		bx	lr
 2124              		.cfi_endproc
 2125              	.LFE1133:
 2127 001a 00BF     		.section	.text.MCI_GetIqd,"ax",%progbits
 2128              		.align	1
 2129              		.p2align 2,,3
 2130              		.weak	MCI_GetIqd
 2131              		.syntax unified
 2132              		.thumb
 2133              		.thumb_func
 2135              	MCI_GetIqd:
 2136              	.LVL178:
 2137              	.LFB1134:
1443:Src/mc_interface.c **** 
1444:Src/mc_interface.c **** /**
1445:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in qd_t format
1446:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1447:Src/mc_interface.c ****   * @retval qd_t Stator current Iqd
1448:Src/mc_interface.c ****   */
1449:Src/mc_interface.c **** __weak qd_t MCI_GetIqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1450:Src/mc_interface.c **** {
 2138              		.loc 1 1450 1 is_stmt 1 view -0
 2139              		.cfi_startproc
 2140              		@ args = 0, pretend = 0, frame = 8
 2141              		@ frame_needed = 0, uses_anonymous_args = 0
 2142              		@ link register save eliminated.
1451:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1452:Src/mc_interface.c ****   qd_t tempVal;
1453:Src/mc_interface.c **** 
1454:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1455:Src/mc_interface.c ****   {
1456:Src/mc_interface.c ****     tempVal.q = 0;
1457:Src/mc_interface.c ****     tempVal.d = 0;
1458:Src/mc_interface.c ****   }
1459:Src/mc_interface.c ****   else
1460:Src/mc_interface.c ****   {
1461:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqd;
1462:Src/mc_interface.c ****   }
1463:Src/mc_interface.c ****   return (tempVal);
1464:Src/mc_interface.c **** #else
1465:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqd);
 2143              		.loc 1 1465 3 view .LVU562
 2144              		.loc 1 1465 28 is_stmt 0 view .LVU563
 2145 0000 4268     		ldr	r2, [r0, #4]
 2146 0002 D068     		ldr	r0, [r2, #12]	@ unaligned
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 68


 2147              	.LVL179:
 2148              		.loc 1 1465 28 view .LVU564
 2149 0004 0023     		movs	r3, #0
 2150 0006 82B2     		uxth	r2, r0
 2151 0008 62F30F03 		bfi	r3, r2, #0, #16
 2152 000c 000C     		lsrs	r0, r0, #16
 2153 000e 60F31F43 		bfi	r3, r0, #16, #16
1450:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2154              		.loc 1 1450 1 view .LVU565
 2155 0012 82B0     		sub	sp, sp, #8
 2156              	.LCFI35:
 2157              		.cfi_def_cfa_offset 8
1466:Src/mc_interface.c **** #endif
1467:Src/mc_interface.c **** }
 2158              		.loc 1 1467 1 view .LVU566
 2159 0014 1846     		mov	r0, r3
 2160 0016 02B0     		add	sp, sp, #8
 2161              	.LCFI36:
 2162              		.cfi_def_cfa_offset 0
 2163              		@ sp needed
 2164 0018 7047     		bx	lr
 2165              		.cfi_endproc
 2166              	.LFE1134:
 2168 001a 00BF     		.section	.text.MCI_GetIqd_F,"ax",%progbits
 2169              		.align	1
 2170              		.p2align 2,,3
 2171              		.weak	MCI_GetIqd_F
 2172              		.syntax unified
 2173              		.thumb
 2174              		.thumb_func
 2176              	MCI_GetIqd_F:
 2177              	.LVL180:
 2178              	.LFB1135:
1468:Src/mc_interface.c **** 
1469:Src/mc_interface.c **** /**
1470:Src/mc_interface.c ****   * @brief  It returns stator current Iqd in float_t format
1471:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1472:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqd (in Ampere)
1473:Src/mc_interface.c ****   */
1474:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqd_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1475:Src/mc_interface.c **** {
 2179              		.loc 1 1475 1 is_stmt 1 view -0
 2180              		.cfi_startproc
 2181              		@ args = 0, pretend = 0, frame = 16
 2182              		@ frame_needed = 0, uses_anonymous_args = 0
 2183              		@ link register save eliminated.
1476:Src/mc_interface.c ****   qd_f_t iqd;
 2184              		.loc 1 1476 3 view .LVU568
1477:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1478:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1479:Src/mc_interface.c ****   {
1480:Src/mc_interface.c ****     iqd.d = 0.0f;
1481:Src/mc_interface.c ****     iqd.q = 0.0f;
1482:Src/mc_interface.c ****   }
1483:Src/mc_interface.c ****   else
1484:Src/mc_interface.c ****   {
1485:Src/mc_interface.c **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 69


1486:Src/mc_interface.c ****   iqd.d = (float_t)((float_t)pHandle->pFOCVars->Iqd.d * pHandle->pScale->current);
 2185              		.loc 1 1486 3 view .LVU569
 2186              		.loc 1 1486 37 is_stmt 0 view .LVU570
 2187 0000 4368     		ldr	r3, [r0, #4]
 2188              		.loc 1 1486 72 view .LVU571
 2189 0002 026A     		ldr	r2, [r0, #32]
 2190              		.loc 1 1486 21 view .LVU572
 2191 0004 B3F90E10 		ldrsh	r1, [r3, #14]
1487:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2192              		.loc 1 1487 21 view .LVU573
 2193 0008 B3F90C30 		ldrsh	r3, [r3, #12]
1486:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2194              		.loc 1 1486 21 view .LVU574
 2195 000c 00EE901A 		vmov	s1, r1	@ int
 2196              		.loc 1 1487 21 view .LVU575
 2197 0010 07EE903A 		vmov	s15, r3	@ int
1486:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2198              		.loc 1 1486 72 view .LVU576
 2199 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
 2200              		.loc 1 1487 21 view .LVU577
 2201 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1486:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2202              		.loc 1 1486 72 view .LVU578
 2203 001a 00EE103A 		vmov	s0, r3	@ int
1486:Src/mc_interface.c ****   iqd.q = (float_t)((float_t)pHandle->pFOCVars->Iqd.q * pHandle->pScale->current);
 2204              		.loc 1 1486 21 view .LVU579
 2205 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2206              	.LVL181:
 2207              		.loc 1 1487 3 is_stmt 1 view .LVU580
1488:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1489:Src/mc_interface.c ****   }
1490:Src/mc_interface.c **** #endif
1491:Src/mc_interface.c ****   return (iqd);
 2208              		.loc 1 1491 3 view .LVU581
1475:Src/mc_interface.c ****   qd_f_t iqd;
 2209              		.loc 1 1475 1 is_stmt 0 view .LVU582
 2210 0022 84B0     		sub	sp, sp, #16
 2211              	.LCFI37:
 2212              		.cfi_def_cfa_offset 16
1492:Src/mc_interface.c **** }
 2213              		.loc 1 1492 1 view .LVU583
 2214 0024 60EE800A 		vmul.f32	s1, s1, s0
 2215 0028 27EE800A 		vmul.f32	s0, s15, s0
 2216 002c 04B0     		add	sp, sp, #16
 2217              	.LCFI38:
 2218              		.cfi_def_cfa_offset 0
 2219              		@ sp needed
 2220 002e 7047     		bx	lr
 2221              		.cfi_endproc
 2222              	.LFE1135:
 2224              		.section	.text.MCI_GetIqdHF,"ax",%progbits
 2225              		.align	1
 2226              		.p2align 2,,3
 2227              		.weak	MCI_GetIqdHF
 2228              		.syntax unified
 2229              		.thumb
 2230              		.thumb_func
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 70


 2232              	MCI_GetIqdHF:
 2233              	.LVL182:
 2234              	.LFB1136:
1493:Src/mc_interface.c **** 
1494:Src/mc_interface.c **** /**
1495:Src/mc_interface.c ****   * @brief  It returns stator current IqdHF in qd_t format
1496:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1497:Src/mc_interface.c ****   * @retval qd_t Stator current IqdHF if HFI is selected as main
1498:Src/mc_interface.c ****   *         sensor. Otherwise it returns { 0, 0}.
1499:Src/mc_interface.c ****   */
1500:Src/mc_interface.c **** __weak qd_t MCI_GetIqdHF(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1501:Src/mc_interface.c **** {
 2235              		.loc 1 1501 1 is_stmt 1 view -0
 2236              		.cfi_startproc
 2237              		@ args = 0, pretend = 0, frame = 8
 2238              		@ frame_needed = 0, uses_anonymous_args = 0
 2239              		@ link register save eliminated.
1502:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1503:Src/mc_interface.c ****   qd_t tempVal;
1504:Src/mc_interface.c **** 
1505:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1506:Src/mc_interface.c ****   {
1507:Src/mc_interface.c ****     tempVal.q = 0;
1508:Src/mc_interface.c ****     tempVal.d = 0;
1509:Src/mc_interface.c ****   }
1510:Src/mc_interface.c ****   else
1511:Src/mc_interface.c ****   {
1512:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->IqdHF;
1513:Src/mc_interface.c ****   }
1514:Src/mc_interface.c ****   return (tempVal);
1515:Src/mc_interface.c **** #else
1516:Src/mc_interface.c ****   return (pHandle->pFOCVars->IqdHF);
 2240              		.loc 1 1516 3 view .LVU585
 2241              		.loc 1 1516 28 is_stmt 0 view .LVU586
 2242 0000 4268     		ldr	r2, [r0, #4]
 2243 0002 9068     		ldr	r0, [r2, #8]	@ unaligned
 2244              	.LVL183:
 2245              		.loc 1 1516 28 view .LVU587
 2246 0004 0023     		movs	r3, #0
 2247 0006 82B2     		uxth	r2, r0
 2248 0008 62F30F03 		bfi	r3, r2, #0, #16
 2249 000c 000C     		lsrs	r0, r0, #16
 2250 000e 60F31F43 		bfi	r3, r0, #16, #16
1501:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2251              		.loc 1 1501 1 view .LVU588
 2252 0012 82B0     		sub	sp, sp, #8
 2253              	.LCFI39:
 2254              		.cfi_def_cfa_offset 8
1517:Src/mc_interface.c **** #endif
1518:Src/mc_interface.c **** }
 2255              		.loc 1 1518 1 view .LVU589
 2256 0014 1846     		mov	r0, r3
 2257 0016 02B0     		add	sp, sp, #8
 2258              	.LCFI40:
 2259              		.cfi_def_cfa_offset 0
 2260              		@ sp needed
 2261 0018 7047     		bx	lr
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 71


 2262              		.cfi_endproc
 2263              	.LFE1136:
 2265 001a 00BF     		.section	.text.MCI_GetIqdref,"ax",%progbits
 2266              		.align	1
 2267              		.p2align 2,,3
 2268              		.weak	MCI_GetIqdref
 2269              		.syntax unified
 2270              		.thumb
 2271              		.thumb_func
 2273              	MCI_GetIqdref:
 2274              	.LVL184:
 2275              	.LFB1137:
1519:Src/mc_interface.c **** 
1520:Src/mc_interface.c **** /**
1521:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in qd_t format
1522:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1523:Src/mc_interface.c ****   * @retval qd_t Stator current Iqdref
1524:Src/mc_interface.c ****   */
1525:Src/mc_interface.c **** __weak qd_t MCI_GetIqdref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1526:Src/mc_interface.c **** {
 2276              		.loc 1 1526 1 is_stmt 1 view -0
 2277              		.cfi_startproc
 2278              		@ args = 0, pretend = 0, frame = 8
 2279              		@ frame_needed = 0, uses_anonymous_args = 0
 2280              		@ link register save eliminated.
1527:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1528:Src/mc_interface.c ****   qd_t tempVal;
1529:Src/mc_interface.c **** 
1530:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1531:Src/mc_interface.c ****   {
1532:Src/mc_interface.c ****     tempVal.q = 0;
1533:Src/mc_interface.c ****     tempVal.d = 0;
1534:Src/mc_interface.c ****   }
1535:Src/mc_interface.c ****   else
1536:Src/mc_interface.c ****   {
1537:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Iqdref;
1538:Src/mc_interface.c ****   }
1539:Src/mc_interface.c ****   return (tempVal);
1540:Src/mc_interface.c **** #else
1541:Src/mc_interface.c ****   return (pHandle->pFOCVars->Iqdref);
 2281              		.loc 1 1541 3 view .LVU591
 2282              		.loc 1 1541 28 is_stmt 0 view .LVU592
 2283 0000 4268     		ldr	r2, [r0, #4]
 2284 0002 1069     		ldr	r0, [r2, #16]	@ unaligned
 2285              	.LVL185:
 2286              		.loc 1 1541 28 view .LVU593
 2287 0004 0023     		movs	r3, #0
 2288 0006 82B2     		uxth	r2, r0
 2289 0008 62F30F03 		bfi	r3, r2, #0, #16
 2290 000c 000C     		lsrs	r0, r0, #16
 2291 000e 60F31F43 		bfi	r3, r0, #16, #16
1526:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2292              		.loc 1 1526 1 view .LVU594
 2293 0012 82B0     		sub	sp, sp, #8
 2294              	.LCFI41:
 2295              		.cfi_def_cfa_offset 8
1542:Src/mc_interface.c **** #endif
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 72


1543:Src/mc_interface.c **** }
 2296              		.loc 1 1543 1 view .LVU595
 2297 0014 1846     		mov	r0, r3
 2298 0016 02B0     		add	sp, sp, #8
 2299              	.LCFI42:
 2300              		.cfi_def_cfa_offset 0
 2301              		@ sp needed
 2302 0018 7047     		bx	lr
 2303              		.cfi_endproc
 2304              	.LFE1137:
 2306 001a 00BF     		.section	.text.MCI_GetIqdref_F,"ax",%progbits
 2307              		.align	1
 2308              		.p2align 2,,3
 2309              		.weak	MCI_GetIqdref_F
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2314              	MCI_GetIqdref_F:
 2315              	.LVL186:
 2316              	.LFB1138:
1544:Src/mc_interface.c **** 
1545:Src/mc_interface.c **** /**
1546:Src/mc_interface.c ****   * @brief  It returns stator current Iqdref in float_t format
1547:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1548:Src/mc_interface.c ****   * @retval qd_f_t Stator current Iqdref (in Ampere)
1549:Src/mc_interface.c ****   */
1550:Src/mc_interface.c **** __weak qd_f_t MCI_GetIqdref_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1551:Src/mc_interface.c **** {
 2317              		.loc 1 1551 1 is_stmt 1 view -0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 16
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              		@ link register save eliminated.
1552:Src/mc_interface.c ****   qd_f_t iqdref;
 2322              		.loc 1 1552 3 view .LVU597
1553:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1554:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1555:Src/mc_interface.c ****   {
1556:Src/mc_interface.c ****     iqdref.d = 0.0f;
1557:Src/mc_interface.c ****     iqdref.q = 0.0f;
1558:Src/mc_interface.c ****   }
1559:Src/mc_interface.c ****   else
1560:Src/mc_interface.c ****   {
1561:Src/mc_interface.c **** #endif
1562:Src/mc_interface.c ****     iqdref.d = (float_t)((float_t)pHandle->pFOCVars->Iqdref.d * pHandle->pScale->current);
 2323              		.loc 1 1562 5 view .LVU598
 2324              		.loc 1 1562 42 is_stmt 0 view .LVU599
 2325 0000 4368     		ldr	r3, [r0, #4]
 2326              		.loc 1 1562 80 view .LVU600
 2327 0002 026A     		ldr	r2, [r0, #32]
 2328              		.loc 1 1562 26 view .LVU601
 2329 0004 B3F91210 		ldrsh	r1, [r3, #18]
1563:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2330              		.loc 1 1563 26 view .LVU602
 2331 0008 B3F91030 		ldrsh	r3, [r3, #16]
1562:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2332              		.loc 1 1562 26 view .LVU603
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 73


 2333 000c 00EE901A 		vmov	s1, r1	@ int
 2334              		.loc 1 1563 26 view .LVU604
 2335 0010 07EE903A 		vmov	s15, r3	@ int
1562:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2336              		.loc 1 1562 80 view .LVU605
 2337 0014 5368     		ldr	r3, [r2, #4]	@ unaligned
 2338              		.loc 1 1563 26 view .LVU606
 2339 0016 F8EEE77A 		vcvt.f32.s32	s15, s15
1562:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2340              		.loc 1 1562 80 view .LVU607
 2341 001a 00EE103A 		vmov	s0, r3	@ int
1562:Src/mc_interface.c ****     iqdref.q = (float_t)((float_t)pHandle->pFOCVars->Iqdref.q * pHandle->pScale->current);
 2342              		.loc 1 1562 26 view .LVU608
 2343 001e F8EEE00A 		vcvt.f32.s32	s1, s1
 2344              	.LVL187:
 2345              		.loc 1 1563 5 is_stmt 1 view .LVU609
1564:Src/mc_interface.c ****  #ifdef NULL_PTR_CHECK_MC_INT
1565:Src/mc_interface.c ****   }
1566:Src/mc_interface.c **** #endif
1567:Src/mc_interface.c ****   return (iqdref);
 2346              		.loc 1 1567 3 view .LVU610
1551:Src/mc_interface.c ****   qd_f_t iqdref;
 2347              		.loc 1 1551 1 is_stmt 0 view .LVU611
 2348 0022 84B0     		sub	sp, sp, #16
 2349              	.LCFI43:
 2350              		.cfi_def_cfa_offset 16
1568:Src/mc_interface.c **** }
 2351              		.loc 1 1568 1 view .LVU612
 2352 0024 60EE800A 		vmul.f32	s1, s1, s0
 2353 0028 27EE800A 		vmul.f32	s0, s15, s0
 2354 002c 04B0     		add	sp, sp, #16
 2355              	.LCFI44:
 2356              		.cfi_def_cfa_offset 0
 2357              		@ sp needed
 2358 002e 7047     		bx	lr
 2359              		.cfi_endproc
 2360              	.LFE1138:
 2362              		.section	.text.MCI_GetVqd,"ax",%progbits
 2363              		.align	1
 2364              		.p2align 2,,3
 2365              		.weak	MCI_GetVqd
 2366              		.syntax unified
 2367              		.thumb
 2368              		.thumb_func
 2370              	MCI_GetVqd:
 2371              	.LVL188:
 2372              	.LFB1139:
1569:Src/mc_interface.c **** 
1570:Src/mc_interface.c **** /**
1571:Src/mc_interface.c ****   * @brief  It returns stator current Vqd in qd_t format
1572:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1573:Src/mc_interface.c ****   * @retval qd_t Stator current Vqd
1574:Src/mc_interface.c ****   */
1575:Src/mc_interface.c **** __weak qd_t MCI_GetVqd(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1576:Src/mc_interface.c **** {
 2373              		.loc 1 1576 1 is_stmt 1 view -0
 2374              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 74


 2375              		@ args = 0, pretend = 0, frame = 8
 2376              		@ frame_needed = 0, uses_anonymous_args = 0
 2377              		@ link register save eliminated.
1577:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1578:Src/mc_interface.c ****   qd_t tempVal;
1579:Src/mc_interface.c **** 
1580:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1581:Src/mc_interface.c ****   {
1582:Src/mc_interface.c ****     tempVal.q = 0;
1583:Src/mc_interface.c ****     tempVal.d = 0;
1584:Src/mc_interface.c ****   }
1585:Src/mc_interface.c ****   else
1586:Src/mc_interface.c ****   {
1587:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Vqd;
1588:Src/mc_interface.c ****   }
1589:Src/mc_interface.c ****   return (tempVal);
1590:Src/mc_interface.c **** #else
1591:Src/mc_interface.c ****   return (pHandle->pFOCVars->Vqd);
 2378              		.loc 1 1591 3 view .LVU614
 2379              		.loc 1 1591 28 is_stmt 0 view .LVU615
 2380 0000 4268     		ldr	r2, [r0, #4]
 2381 0002 D2F81600 		ldr	r0, [r2, #22]	@ unaligned
 2382              	.LVL189:
 2383              		.loc 1 1591 28 view .LVU616
 2384 0006 0023     		movs	r3, #0
 2385 0008 82B2     		uxth	r2, r0
 2386 000a 62F30F03 		bfi	r3, r2, #0, #16
 2387 000e 000C     		lsrs	r0, r0, #16
 2388 0010 60F31F43 		bfi	r3, r0, #16, #16
1576:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2389              		.loc 1 1576 1 view .LVU617
 2390 0014 82B0     		sub	sp, sp, #8
 2391              	.LCFI45:
 2392              		.cfi_def_cfa_offset 8
1592:Src/mc_interface.c **** #endif
1593:Src/mc_interface.c **** }
 2393              		.loc 1 1593 1 view .LVU618
 2394 0016 1846     		mov	r0, r3
 2395 0018 02B0     		add	sp, sp, #8
 2396              	.LCFI46:
 2397              		.cfi_def_cfa_offset 0
 2398              		@ sp needed
 2399 001a 7047     		bx	lr
 2400              		.cfi_endproc
 2401              	.LFE1139:
 2403              		.section	.text.MCI_GetValphabeta,"ax",%progbits
 2404              		.align	1
 2405              		.p2align 2,,3
 2406              		.weak	MCI_GetValphabeta
 2407              		.syntax unified
 2408              		.thumb
 2409              		.thumb_func
 2411              	MCI_GetValphabeta:
 2412              	.LVL190:
 2413              	.LFB1140:
1594:Src/mc_interface.c **** 
1595:Src/mc_interface.c **** /**
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 75


1596:Src/mc_interface.c ****   * @brief  It returns stator current Valphabeta in alphabeta_t format
1597:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1598:Src/mc_interface.c ****   * @retval alphabeta_t Stator current Valphabeta
1599:Src/mc_interface.c ****   */
1600:Src/mc_interface.c **** __weak alphabeta_t MCI_GetValphabeta(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1601:Src/mc_interface.c **** {
 2414              		.loc 1 1601 1 is_stmt 1 view -0
 2415              		.cfi_startproc
 2416              		@ args = 0, pretend = 0, frame = 8
 2417              		@ frame_needed = 0, uses_anonymous_args = 0
 2418              		@ link register save eliminated.
1602:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1603:Src/mc_interface.c ****   alphabeta_t tempVal;
1604:Src/mc_interface.c **** 
1605:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1606:Src/mc_interface.c ****   {
1607:Src/mc_interface.c ****     tempVal.alpha = 0;
1608:Src/mc_interface.c ****     tempVal.beta = 0;
1609:Src/mc_interface.c ****   }
1610:Src/mc_interface.c ****   else
1611:Src/mc_interface.c ****   {
1612:Src/mc_interface.c ****     tempVal = pHandle->pFOCVars->Valphabeta;
1613:Src/mc_interface.c ****   }
1614:Src/mc_interface.c ****   return (tempVal);
1615:Src/mc_interface.c **** #else
1616:Src/mc_interface.c ****   return (pHandle->pFOCVars->Valphabeta);
 2419              		.loc 1 1616 3 view .LVU620
 2420              		.loc 1 1616 28 is_stmt 0 view .LVU621
 2421 0000 4268     		ldr	r2, [r0, #4]
 2422 0002 D2F81A00 		ldr	r0, [r2, #26]	@ unaligned
 2423              	.LVL191:
 2424              		.loc 1 1616 28 view .LVU622
 2425 0006 0023     		movs	r3, #0
 2426 0008 82B2     		uxth	r2, r0
 2427 000a 62F30F03 		bfi	r3, r2, #0, #16
 2428 000e 000C     		lsrs	r0, r0, #16
 2429 0010 60F31F43 		bfi	r3, r0, #16, #16
1601:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2430              		.loc 1 1601 1 view .LVU623
 2431 0014 82B0     		sub	sp, sp, #8
 2432              	.LCFI47:
 2433              		.cfi_def_cfa_offset 8
1617:Src/mc_interface.c **** #endif
1618:Src/mc_interface.c **** }
 2434              		.loc 1 1618 1 view .LVU624
 2435 0016 1846     		mov	r0, r3
 2436 0018 02B0     		add	sp, sp, #8
 2437              	.LCFI48:
 2438              		.cfi_def_cfa_offset 0
 2439              		@ sp needed
 2440 001a 7047     		bx	lr
 2441              		.cfi_endproc
 2442              	.LFE1140:
 2444              		.section	.text.MCI_GetElAngledpp,"ax",%progbits
 2445              		.align	1
 2446              		.p2align 2,,3
 2447              		.weak	MCI_GetElAngledpp
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 76


 2448              		.syntax unified
 2449              		.thumb
 2450              		.thumb_func
 2452              	MCI_GetElAngledpp:
 2453              	.LVL192:
 2454              	.LFB1141:
1619:Src/mc_interface.c **** 
1620:Src/mc_interface.c **** /**
1621:Src/mc_interface.c ****   * @brief  It returns the rotor electrical angle actually used for reference
1622:Src/mc_interface.c ****   *         frame transformation
1623:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1624:Src/mc_interface.c ****   * @retval int16_t Rotor electrical angle in dpp format
1625:Src/mc_interface.c ****   */
1626:Src/mc_interface.c **** __weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1627:Src/mc_interface.c **** {
 2455              		.loc 1 1627 1 is_stmt 1 view -0
 2456              		.cfi_startproc
 2457              		@ args = 0, pretend = 0, frame = 0
 2458              		@ frame_needed = 0, uses_anonymous_args = 0
 2459              		@ link register save eliminated.
1628:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1629:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
1630:Src/mc_interface.c **** #else
1631:Src/mc_interface.c ****   return (pHandle->pFOCVars->hElAngle);
 2460              		.loc 1 1631 3 view .LVU626
 2461              		.loc 1 1631 28 is_stmt 0 view .LVU627
 2462 0000 4368     		ldr	r3, [r0, #4]
1632:Src/mc_interface.c **** #endif
1633:Src/mc_interface.c **** }
 2463              		.loc 1 1633 1 view .LVU628
 2464 0002 B3F92000 		ldrsh	r0, [r3, #32]
 2465              	.LVL193:
 2466              		.loc 1 1633 1 view .LVU629
 2467 0006 7047     		bx	lr
 2468              		.cfi_endproc
 2469              	.LFE1141:
 2471              		.section	.text.MCI_GetTeref,"ax",%progbits
 2472              		.align	1
 2473              		.p2align 2,,3
 2474              		.weak	MCI_GetTeref
 2475              		.syntax unified
 2476              		.thumb
 2477              		.thumb_func
 2479              	MCI_GetTeref:
 2480              	.LVL194:
 2481              	.LFB1142:
1634:Src/mc_interface.c **** 
1635:Src/mc_interface.c **** /**
1636:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque, fed to derived class for
1637:Src/mc_interface.c ****   *         Iqref and Idref computation
1638:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1639:Src/mc_interface.c ****   * @retval int16_t Teref
1640:Src/mc_interface.c ****   */
1641:Src/mc_interface.c **** __weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1642:Src/mc_interface.c **** {
 2482              		.loc 1 1642 1 is_stmt 1 view -0
 2483              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 77


 2484              		@ args = 0, pretend = 0, frame = 0
 2485              		@ frame_needed = 0, uses_anonymous_args = 0
 2486              		@ link register save eliminated.
1643:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1644:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
1645:Src/mc_interface.c **** #else
1646:Src/mc_interface.c ****   return (pHandle->pFOCVars->hTeref);
 2487              		.loc 1 1646 3 view .LVU631
 2488              		.loc 1 1646 28 is_stmt 0 view .LVU632
 2489 0000 4368     		ldr	r3, [r0, #4]
1647:Src/mc_interface.c **** #endif
1648:Src/mc_interface.c **** }
 2490              		.loc 1 1648 1 view .LVU633
 2491 0002 B3F91E00 		ldrsh	r0, [r3, #30]
 2492              	.LVL195:
 2493              		.loc 1 1648 1 view .LVU634
 2494 0006 7047     		bx	lr
 2495              		.cfi_endproc
 2496              	.LFE1142:
 2498              		.section	.text.MCI_GetTeref_F,"ax",%progbits
 2499              		.align	1
 2500              		.p2align 2,,3
 2501              		.weak	MCI_GetTeref_F
 2502              		.syntax unified
 2503              		.thumb
 2504              		.thumb_func
 2506              	MCI_GetTeref_F:
 2507              	.LVL196:
 2508              	.LFB1143:
1649:Src/mc_interface.c **** 
1650:Src/mc_interface.c **** /**
1651:Src/mc_interface.c ****   * @brief  It returns the reference electrical torque.
1652:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1653:Src/mc_interface.c ****   * @retval float_t Teref
1654:Src/mc_interface.c ****   */
1655:Src/mc_interface.c **** __weak float_t MCI_GetTeref_F(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1656:Src/mc_interface.c **** {
 2509              		.loc 1 1656 1 is_stmt 1 view -0
 2510              		.cfi_startproc
 2511              		@ args = 0, pretend = 0, frame = 0
 2512              		@ frame_needed = 0, uses_anonymous_args = 0
 2513              		@ link register save eliminated.
1657:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1658:Src/mc_interface.c ****   return ((MC_NULL == pHandle) ? 0.0f : ((float_t)pHandle->pFOCVars->hTeref * (float_t)pHandle->pSc
1659:Src/mc_interface.c **** #else
1660:Src/mc_interface.c ****   return ((float_t)(pHandle->pFOCVars->hTeref * pHandle->pScale->current));
 2514              		.loc 1 1660 3 view .LVU636
 2515              		.loc 1 1660 38 is_stmt 0 view .LVU637
 2516 0000 4268     		ldr	r2, [r0, #4]
 2517              		.loc 1 1660 64 view .LVU638
 2518 0002 036A     		ldr	r3, [r0, #32]
 2519              		.loc 1 1660 11 view .LVU639
 2520 0004 B2F91E20 		ldrsh	r2, [r2, #30]
 2521              		.loc 1 1660 64 view .LVU640
 2522 0008 5B68     		ldr	r3, [r3, #4]	@ unaligned
 2523              		.loc 1 1660 11 view .LVU641
 2524 000a 07EE902A 		vmov	s15, r2	@ int
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 78


 2525              		.loc 1 1660 64 view .LVU642
 2526 000e 00EE103A 		vmov	s0, r3	@ int
 2527              		.loc 1 1660 11 view .LVU643
 2528 0012 F8EEE77A 		vcvt.f32.s32	s15, s15
1661:Src/mc_interface.c **** #endif
1662:Src/mc_interface.c **** }
 2529              		.loc 1 1662 1 view .LVU644
 2530 0016 27EE800A 		vmul.f32	s0, s15, s0
 2531 001a 7047     		bx	lr
 2532              		.cfi_endproc
 2533              	.LFE1143:
 2535              		.section	.text.MCI_GetPhaseCurrentAmplitude,"ax",%progbits
 2536              		.align	1
 2537              		.p2align 2,,3
 2538              		.weak	MCI_GetPhaseCurrentAmplitude
 2539              		.syntax unified
 2540              		.thumb
 2541              		.thumb_func
 2543              	MCI_GetPhaseCurrentAmplitude:
 2544              	.LVL197:
 2545              	.LFB1144:
1663:Src/mc_interface.c **** 
1664:Src/mc_interface.c **** /**
1665:Src/mc_interface.c ****   * @brief  It returns the motor phase current amplitude (0-to-peak) in s16A
1666:Src/mc_interface.c ****   *         To convert s16A into Ampere following formula must be used:
1667:Src/mc_interface.c ****   *         Current(Amp) = [Current(s16A) * Vdd micro] / [65536 * Rshunt * Aop]
1668:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1669:Src/mc_interface.c ****   * @retval int16_t Motor phase current (0-to-peak) in s16A
1670:Src/mc_interface.c ****   */
1671:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseCurrentAmplitude(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1672:Src/mc_interface.c **** {
 2546              		.loc 1 1672 1 is_stmt 1 view -0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 0
 2549              		@ frame_needed = 0, uses_anonymous_args = 0
1673:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2550              		.loc 1 1673 3 view .LVU646
1674:Src/mc_interface.c ****   int16_t wAux;
 2551              		.loc 1 1674 3 view .LVU647
1675:Src/mc_interface.c **** 
1676:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1677:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1678:Src/mc_interface.c ****   {
1679:Src/mc_interface.c ****     wAux = 0;
1680:Src/mc_interface.c ****   }
1681:Src/mc_interface.c ****   else
1682:Src/mc_interface.c ****   {
1683:Src/mc_interface.c **** #endif
1684:Src/mc_interface.c ****   Local_Curr = pHandle->pFOCVars->Ialphabeta;
 2552              		.loc 1 1684 3 view .LVU648
 2553              		.loc 1 1684 23 is_stmt 0 view .LVU649
 2554 0000 4268     		ldr	r2, [r0, #4]
1672:Src/mc_interface.c ****   alphabeta_t Local_Curr;
 2555              		.loc 1 1672 1 view .LVU650
 2556 0002 08B5     		push	{r3, lr}
 2557              	.LCFI49:
 2558              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 79


 2559              		.cfi_offset 3, -8
 2560              		.cfi_offset 14, -4
 2561              		.loc 1 1684 14 view .LVU651
 2562 0004 B2F90630 		ldrsh	r3, [r2, #6]
 2563 0008 B2F90400 		ldrsh	r0, [r2, #4]
 2564              	.LVL198:
1685:Src/mc_interface.c ****   wAux = MCM_Modulus(Local_Curr.alpha, Local_Curr.beta);
 2565              		.loc 1 1685 3 is_stmt 1 view .LVU652
 2566              	.LBB7:
 2567              	.LBI7:
 2568              		.file 2 "Inc/mc_math.h"
   1:Inc/mc_math.h **** 
   2:Inc/mc_math.h **** /**
   3:Inc/mc_math.h ****   ******************************************************************************
   4:Inc/mc_math.h ****   * @file    mc_math.h
   5:Inc/mc_math.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Inc/mc_math.h ****   * @brief   This file provides mathematics functions useful for and specific to
   7:Inc/mc_math.h ****   *          Motor Control.
   8:Inc/mc_math.h ****   *
   9:Inc/mc_math.h ****   ******************************************************************************
  10:Inc/mc_math.h ****   * @attention
  11:Inc/mc_math.h ****   *
  12:Inc/mc_math.h ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  13:Inc/mc_math.h ****   * All rights reserved.</center></h2>
  14:Inc/mc_math.h ****   *
  15:Inc/mc_math.h ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Inc/mc_math.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Inc/mc_math.h ****   * the License. You may obtain a copy of the License at:
  18:Inc/mc_math.h ****   *                             www.st.com/SLA0044
  19:Inc/mc_math.h ****   *
  20:Inc/mc_math.h ****   ******************************************************************************
  21:Inc/mc_math.h ****   * @ingroup MC_Math
  22:Inc/mc_math.h ****   */
  23:Inc/mc_math.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:Inc/mc_math.h **** #ifndef MC_MATH_H
  25:Inc/mc_math.h **** #define MC_MATH_H
  26:Inc/mc_math.h **** 
  27:Inc/mc_math.h **** /* Includes ------------------------------------------------------------------*/
  28:Inc/mc_math.h **** #include "mc_type.h"
  29:Inc/mc_math.h **** 
  30:Inc/mc_math.h **** /** @addtogroup MCSDK
  31:Inc/mc_math.h ****   * @{
  32:Inc/mc_math.h ****   */
  33:Inc/mc_math.h **** 
  34:Inc/mc_math.h **** /** @addtogroup MC_Math
  35:Inc/mc_math.h ****   * @{
  36:Inc/mc_math.h ****   */
  37:Inc/mc_math.h **** #define SQRT_2  1.4142
  38:Inc/mc_math.h **** #define SQRT_3  1.732
  39:Inc/mc_math.h **** 
  40:Inc/mc_math.h **** /**
  41:Inc/mc_math.h ****   * @brief  Macro to compute logarithm of two
  42:Inc/mc_math.h ****   */
  43:Inc/mc_math.h **** #define LOG2(x) \
  44:Inc/mc_math.h ****   (((x) == 65535 ) ? 16 : \
  45:Inc/mc_math.h ****    (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 15 : \
  46:Inc/mc_math.h ****     (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 14 : \
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 80


  47:Inc/mc_math.h ****      (((x) == (2*2*2*2*2*2*2*2*2*2*2*2*2)) ? 13 : \
  48:Inc/mc_math.h ****       (((x) == (2*2*2*2*2*2*2*2*2*2*2*2)) ? 12 : \
  49:Inc/mc_math.h ****        (((x) == (2*2*2*2*2*2*2*2*2*2*2)) ? 11 : \
  50:Inc/mc_math.h ****         (((x) == (2*2*2*2*2*2*2*2*2*2)) ? 10 : \
  51:Inc/mc_math.h ****          (((x) == (2*2*2*2*2*2*2*2*2)) ? 9 : \
  52:Inc/mc_math.h ****           (((x) == (2*2*2*2*2*2*2*2)) ? 8 : \
  53:Inc/mc_math.h ****            (((x) == (2*2*2*2*2*2*2)) ? 7 : \
  54:Inc/mc_math.h ****             (((x) == (2*2*2*2*2*2)) ? 6 : \
  55:Inc/mc_math.h ****              (((x) == (2*2*2*2*2)) ? 5 : \
  56:Inc/mc_math.h ****               (((x) == (2*2*2*2)) ? 4 : \
  57:Inc/mc_math.h ****                (((x) == (2*2*2)) ? 3 : \
  58:Inc/mc_math.h ****                 (((x) == (2*2)) ? 2 : \
  59:Inc/mc_math.h ****                  (((x) == 2) ? 1 : \
  60:Inc/mc_math.h ****                   (((x) == 1) ? 0 : -1)))))))))))))))))
  61:Inc/mc_math.h **** 
  62:Inc/mc_math.h **** /**
  63:Inc/mc_math.h ****   * @brief  Trigonometrical functions type definition
  64:Inc/mc_math.h ****   */
  65:Inc/mc_math.h **** typedef struct
  66:Inc/mc_math.h **** {
  67:Inc/mc_math.h ****   int16_t hCos;
  68:Inc/mc_math.h ****   int16_t hSin;
  69:Inc/mc_math.h **** } Trig_Components;
  70:Inc/mc_math.h **** 
  71:Inc/mc_math.h **** /**
  72:Inc/mc_math.h ****   * @brief  This function transforms stator currents Ia and qIb (which are
  73:Inc/mc_math.h ****   *         directed along axes each displaced by 120 degrees) into currents
  74:Inc/mc_math.h ****   *         Ialpha and Ibeta in a stationary qd reference frame.
  75:Inc/mc_math.h ****   *                               Ialpha = Ia
  76:Inc/mc_math.h ****   *                       Ibeta = -(2*Ib+Ia)/sqrt(3)
  77:Inc/mc_math.h ****   * @param  Curr_Input: stator current Ia and Ib in ab_t format.
  78:Inc/mc_math.h ****   * @retval Stator current Ialpha and Ibeta in alphabeta_t format.
  79:Inc/mc_math.h ****   */
  80:Inc/mc_math.h **** alphabeta_t MCM_Clarke(ab_t Input);
  81:Inc/mc_math.h **** 
  82:Inc/mc_math.h **** /**
  83:Inc/mc_math.h ****   * @brief  This function transforms stator values alpha and beta, which
  84:Inc/mc_math.h ****   *         belong to a stationary qd reference frame, to a rotor flux
  85:Inc/mc_math.h ****   *         synchronous reference frame (properly oriented), so as Iq and Id.
  86:Inc/mc_math.h ****   *                   Id= Ialpha *sin(theta)+qIbeta *cos(Theta)
  87:Inc/mc_math.h ****   *                   Iq=qIalpha *cos(Theta)-qIbeta *sin(Theta)
  88:Inc/mc_math.h ****   * @param  Curr_Input: stator values alpha and beta in alphabeta_t format.
  89:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
  90:Inc/mc_math.h ****   * @retval Stator current q and d in qd_t format.
  91:Inc/mc_math.h ****   */
  92:Inc/mc_math.h **** qd_t MCM_Park(alphabeta_t Input, int16_t Theta);
  93:Inc/mc_math.h **** 
  94:Inc/mc_math.h **** /**
  95:Inc/mc_math.h ****   * @brief  This function transforms stator voltage qVq and qVd, that belong to
  96:Inc/mc_math.h ****   *         a rotor flux synchronous rotating frame, to a stationary reference
  97:Inc/mc_math.h ****   *         frame, so as to obtain qValpha and qVbeta:
  98:Inc/mc_math.h ****   *                  Valfa= Vq*Cos(theta)+ Vd*Sin(theta)
  99:Inc/mc_math.h ****   *                  Vbeta=-Vq*Sin(theta)+ Vd*Cos(theta)
 100:Inc/mc_math.h ****   * @param  Curr_Input: stator voltage Vq and Vd in qd_t format.
 101:Inc/mc_math.h ****   * @param  Theta: rotating frame angular position in q1.15 format.
 102:Inc/mc_math.h ****   * @retval Stator values alpha and beta in alphabeta_t format.
 103:Inc/mc_math.h ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 81


 104:Inc/mc_math.h **** alphabeta_t MCM_Rev_Park(qd_t Input, int16_t Theta);
 105:Inc/mc_math.h **** 
 106:Inc/mc_math.h **** /**
 107:Inc/mc_math.h ****   * @brief  This function returns cosine and sine functions of the angle fed in input.
 108:Inc/mc_math.h ****   * @param  hAngle: angle in q1.15 format.
 109:Inc/mc_math.h ****   * @retval Trig_Components Cos(angle) and Sin(angle) in Trig_Components format.
 110:Inc/mc_math.h ****   */
 111:Inc/mc_math.h **** Trig_Components MCM_Trig_Functions(int16_t hAngle);
 112:Inc/mc_math.h **** 
 113:Inc/mc_math.h **** /**
 114:Inc/mc_math.h ****   * @brief  It calculates the square root of a non-negative s32. It returns 0 for negative s32.
 115:Inc/mc_math.h ****   * @param  Input int32_t number.
 116:Inc/mc_math.h ****   * @retval int32_t Square root of Input (0 if Input<0).
 117:Inc/mc_math.h ****   */
 118:Inc/mc_math.h **** int32_t MCM_Sqrt(int32_t wInput);
 119:Inc/mc_math.h **** 
 120:Inc/mc_math.h **** /**
 121:Inc/mc_math.h ****   * @brief  Sqrt table used by Circle Limitation function
 122:Inc/mc_math.h ****   *         used for STM32F0/STM32G0 series only
 123:Inc/mc_math.h ****   */
 124:Inc/mc_math.h **** #define SQRT_CIRCLE_LIMITATION {\
 125:Inc/mc_math.h ****      0 , 1023 , 1448 , 1773 , 2047 , 2289 , 2508 , 2709,\
 126:Inc/mc_math.h ****      2896 , 3071 , 3238 , 3396 , 3547 , 3691 , 3831 , 3965,\
 127:Inc/mc_math.h ****      4095 , 4221 , 4344 , 4463 , 4579 , 4692 , 4802 , 4910,\
 128:Inc/mc_math.h ****      5016 , 5119 , 5221 , 5320 , 5418 , 5514 , 5608 , 5701,\
 129:Inc/mc_math.h ****      5792 , 5882 , 5970 , 6057 , 6143 , 6228 , 6312 , 6394,\
 130:Inc/mc_math.h ****      6476 , 6556 , 6636 , 6714 , 6792 , 6868 , 6944 , 7019,\
 131:Inc/mc_math.h ****      7094 , 7167 , 7240 , 7312 , 7383 , 7454 , 7524 , 7593,\
 132:Inc/mc_math.h ****      7662 , 7730 , 7798 , 7865 , 7931 , 7997 , 8062 , 8127,\
 133:Inc/mc_math.h ****      8191 , 8255 , 8318 , 8381 , 8443 , 8505 , 8567 , 8628,\
 134:Inc/mc_math.h ****      8688 , 8748 , 8808 , 8867 , 8926 , 8985 , 9043 , 9101,\
 135:Inc/mc_math.h ****      9158 , 9215 , 9272 , 9328 , 9384 , 9440 , 9495 , 9550,\
 136:Inc/mc_math.h ****      9605 , 9660 , 9714 , 9768 , 9821 , 9874 , 9927 , 9980,\
 137:Inc/mc_math.h ****      10032 , 10084 , 10136 , 10188 , 10239 , 10290 , 10341 , 10392,\
 138:Inc/mc_math.h ****      10442 , 10492 , 10542 , 10592 , 10641 , 10690 , 10739 , 10788,\
 139:Inc/mc_math.h ****      10836 , 10884 , 10932 , 10980 , 11028 , 11075 , 11123 , 11170,\
 140:Inc/mc_math.h ****      11217 , 11263 , 11310 , 11356 , 11402 , 11448 , 11494 , 11539,\
 141:Inc/mc_math.h ****      11584 , 11630 , 11675 , 11719 , 11764 , 11808 , 11853 , 11897,\
 142:Inc/mc_math.h ****      11941 , 11985 , 12028 , 12072 , 12115 , 12158 , 12201 , 12244,\
 143:Inc/mc_math.h ****      12287 , 12330 , 12372 , 12414 , 12457 , 12499 , 12541 , 12582,\
 144:Inc/mc_math.h ****      12624 , 12665 , 12707 , 12748 , 12789 , 12830 , 12871 , 12911,\
 145:Inc/mc_math.h ****      12952 , 12992 , 13032 , 13073 , 13113 , 13153 , 13192 , 13232,\
 146:Inc/mc_math.h ****      13272 , 13311 , 13350 , 13390 , 13429 , 13468 , 13507 , 13545,\
 147:Inc/mc_math.h ****      13584 , 13623 , 13661 , 13699 , 13737 , 13776 , 13814 , 13851,\
 148:Inc/mc_math.h ****      13889 , 13927 , 13965 , 14002 , 14039 , 14077 , 14114 , 14151,\
 149:Inc/mc_math.h ****      14188 , 14225 , 14262 , 14298 , 14335 , 14372 , 14408 , 14444,\
 150:Inc/mc_math.h ****      14481 , 14517 , 14553 , 14589 , 14625 , 14661 , 14696 , 14732,\
 151:Inc/mc_math.h ****      14767 , 14803 , 14838 , 14874 , 14909 , 14944 , 14979 , 15014,\
 152:Inc/mc_math.h ****      15049 , 15084 , 15118 , 15153 , 15187 , 15222 , 15256 , 15291,\
 153:Inc/mc_math.h ****      15325 , 15359 , 15393 , 15427 , 15461 , 15495 , 15529 , 15562,\
 154:Inc/mc_math.h ****      15596 , 15630 , 15663 , 15697 , 15730 , 15763 , 15797 , 15830,\
 155:Inc/mc_math.h ****      15863 , 15896 , 15929 , 15962 , 15994 , 16027 , 16060 , 16092,\
 156:Inc/mc_math.h ****      16125 , 16157 , 16190 , 16222 , 16254 , 16287 , 16319 , 16351,\
 157:Inc/mc_math.h ****      16383 , 16415 , 16447 , 16479 , 16510 , 16542 , 16574 , 16605,\
 158:Inc/mc_math.h ****      16637 , 16669 , 16700 , 16731 , 16763 , 16794 , 16825 , 16856,\
 159:Inc/mc_math.h ****      16887 , 16918 , 16949 , 16980 , 17011 , 17042 , 17072 , 17103,\
 160:Inc/mc_math.h ****      17134 , 17164 , 17195 , 17225 , 17256 , 17286 , 17316 , 17347,\
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 82


 161:Inc/mc_math.h ****      17377 , 17407 , 17437 , 17467 , 17497 , 17527 , 17557 , 17587,\
 162:Inc/mc_math.h ****      17617 , 17646 , 17676 , 17706 , 17735 , 17765 , 17794 , 17824,\
 163:Inc/mc_math.h ****      17853 , 17882 , 17912 , 17941 , 17970 , 17999 , 18028 , 18057,\
 164:Inc/mc_math.h ****      18086 , 18115 , 18144 , 18173 , 18202 , 18231 , 18259 , 18288,\
 165:Inc/mc_math.h ****      18317 , 18345 , 18374 , 18402 , 18431 , 18459 , 18488 , 18516,\
 166:Inc/mc_math.h ****      18544 , 18573 , 18601 , 18629 , 18657 , 18685 , 18713 , 18741,\
 167:Inc/mc_math.h ****      18769 , 18797 , 18825 , 18853 , 18881 , 18908 , 18936 , 18964,\
 168:Inc/mc_math.h ****      18991 , 19019 , 19046 , 19074 , 19101 , 19129 , 19156 , 19184,\
 169:Inc/mc_math.h ****      19211 , 19238 , 19265 , 19293 , 19320 , 19347 , 19374 , 19401,\
 170:Inc/mc_math.h ****      19428 , 19455 , 19482 , 19509 , 19536 , 19562 , 19589 , 19616,\
 171:Inc/mc_math.h ****      19643 , 19669 , 19696 , 19723 , 19749 , 19776 , 19802 , 19829,\
 172:Inc/mc_math.h ****      19855 , 19881 , 19908 , 19934 , 19960 , 19987 , 20013 , 20039,\
 173:Inc/mc_math.h ****      20065 , 20091 , 20117 , 20143 , 20169 , 20235 , 20231 , 20247,\
 174:Inc/mc_math.h ****      20273 , 20299 , 20325 , 20350 , 20376 , 20402 , 20428 , 20453,\
 175:Inc/mc_math.h ****      20479 , 20504 , 20530 , 20556 , 20581 , 20606 , 20632 , 20657,\
 176:Inc/mc_math.h ****      20683 , 20708 , 20733 , 20759 , 20784 , 20809 , 20834 , 20859,\
 177:Inc/mc_math.h ****      20884 , 20910 , 20935 , 20960 , 20985 , 21010 , 21035 , 21059,\
 178:Inc/mc_math.h ****      21084 , 21109 , 21134 , 21159 , 21184 , 21208 , 21233 , 21258,\
 179:Inc/mc_math.h ****      21282 , 21307 , 21331 , 21356 , 21381 , 21405 , 21430 , 21454,\
 180:Inc/mc_math.h ****      21478 , 21503 , 21527 , 21552 , 21576 , 21600 , 21624 , 21649,\
 181:Inc/mc_math.h ****      21673 , 21697 , 21721 , 21745 , 21769 , 21793 , 21817 , 21841,\
 182:Inc/mc_math.h ****      21865 , 21889 , 21913 , 21937 , 21961 , 21985 , 22009 , 22033,\
 183:Inc/mc_math.h ****      22056 , 22080 , 22104 , 22128 , 22151 , 22175 , 22199 , 22222,\
 184:Inc/mc_math.h ****      22246 , 22269 , 22293 , 22316 , 22340 , 22363 , 22387 , 22410,\
 185:Inc/mc_math.h ****      22434 , 22457 , 22480 , 22504 , 22527 , 22550 , 22573 , 22597,\
 186:Inc/mc_math.h ****      22620 , 22643 , 22666 , 22689 , 22712 , 22735 , 22758 , 22781,\
 187:Inc/mc_math.h ****      22804 , 22827 , 22850 , 22873 , 22896 , 22919 , 22942 , 22965,\
 188:Inc/mc_math.h ****      22988 , 23010 , 23033 , 23056 , 23079 , 23101 , 23124 , 23147,\
 189:Inc/mc_math.h ****      23169 , 23192 , 23214 , 23237 , 23260 , 23282 , 23305 , 23327,\
 190:Inc/mc_math.h ****      23350 , 23372 , 23394 , 23417 , 23439 , 23462 , 23484 , 23506,\
 191:Inc/mc_math.h ****      23529 , 23551 , 23573 , 23595 , 23617 , 23640 , 23662 , 23684,\
 192:Inc/mc_math.h ****      23706 , 23728 , 23750 , 23772 , 23794 , 23816 , 23838 , 23860,\
 193:Inc/mc_math.h ****      23882 , 23904 , 23926 , 23948 , 23970 , 23992 , 24014 , 24036,\
 194:Inc/mc_math.h ****      24057 , 24079 , 24101 , 24123 , 24144 , 24166 , 24188 , 24209,\
 195:Inc/mc_math.h ****      24231 , 24253 , 24274 , 24296 , 24317 , 24339 , 24360 , 24382,\
 196:Inc/mc_math.h ****      24403 , 24425 , 24446 , 24468 , 24489 , 24511 , 24532 , 24553,\
 197:Inc/mc_math.h ****      24575 , 24596 , 24617 , 24639 , 24660 , 24681 , 24702 , 24724,\
 198:Inc/mc_math.h ****      24745 , 24766 , 24787 , 24808 , 24829 , 24851 , 24872 , 24893,\
 199:Inc/mc_math.h ****      24914 , 24935 , 24956 , 24977 , 24998 , 25019 , 25040 , 25061,\
 200:Inc/mc_math.h ****      25082 , 25102 , 25123 , 25144 , 25165 , 25186 , 25207 , 25227,\
 201:Inc/mc_math.h ****      25248 , 25269 , 25290 , 25310 , 25331 , 25352 , 25372 , 25393,\
 202:Inc/mc_math.h ****      25414 , 25434 , 25455 , 25476 , 25496 , 25517 , 25537 , 25558,\
 203:Inc/mc_math.h ****      25578 , 25599 , 25619 , 25640 , 25660 , 25681 , 25701 , 25721,\
 204:Inc/mc_math.h ****      25742 , 25762 , 25782 , 25803 , 25823 , 25843 , 25864 , 25884,\
 205:Inc/mc_math.h ****      25904 , 25924 , 25945 , 25965 , 25985 , 26005 , 26025 , 26045,\
 206:Inc/mc_math.h ****      26065 , 26086 , 26106 , 26126 , 26146 , 26166 , 26186 , 26206,\
 207:Inc/mc_math.h ****      26226 , 26246 , 26266 , 26286 , 26306 , 26326 , 26346 , 26365,\
 208:Inc/mc_math.h ****      26385 , 26405 , 26425 , 26445 , 26465 , 26484 , 26504 , 26524,\
 209:Inc/mc_math.h ****      26544 , 26564 , 26583 , 26603 , 26623 , 26642 , 26662 , 26682,\
 210:Inc/mc_math.h ****      26701 , 26721 , 26741 , 26760 , 26780 , 26799 , 26819 , 26838,\
 211:Inc/mc_math.h ****      26858 , 26877 , 26897 , 26916 , 26936 , 26955 , 26975 , 26994,\
 212:Inc/mc_math.h ****      27014 , 27033 , 27052 , 27072 , 27091 , 27111 , 27130 , 27149,\
 213:Inc/mc_math.h ****      27168 , 27188 , 27207 , 27226 , 27246 , 27265 , 27284 , 27303,\
 214:Inc/mc_math.h ****      27322 , 27342 , 27361 , 27380 , 27399 , 27418 , 27437 , 27456,\
 215:Inc/mc_math.h ****      27475 , 27495 , 27514 , 27533 , 27552 , 27571 , 27590 , 27609,\
 216:Inc/mc_math.h ****      27628 , 27647 , 27666 , 27685 , 27703 , 27722 , 27741 , 27760,\
 217:Inc/mc_math.h ****      27779 , 27798 , 27817 , 27836 , 27854 , 27873 , 27892 , 27911,\
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 83


 218:Inc/mc_math.h ****      27930 , 27948 , 27967 , 27986 , 28005 , 28023 , 28042 , 28061,\
 219:Inc/mc_math.h ****      28079 , 28098 , 28117 , 28135 , 28154 , 28173 , 28191 , 28210,\
 220:Inc/mc_math.h ****      28228 , 28247 , 28265 , 28284 , 28303 , 28321 , 28340 , 28358,\
 221:Inc/mc_math.h ****      28377 , 28395 , 28413 , 28432 , 28450 , 28469 , 28487 , 28506,\
 222:Inc/mc_math.h ****      28524 , 28542 , 28561 , 28579 , 28597 , 28616 , 28634 , 28652,\
 223:Inc/mc_math.h ****      28671 , 28689 , 28707 , 28725 , 28744 , 28762 , 28780 , 28798,\
 224:Inc/mc_math.h ****      28817 , 28835 , 28853 , 28871 , 28889 , 28907 , 28925 , 28944,\
 225:Inc/mc_math.h ****      28962 , 28980 , 28998 , 29016 , 29034 , 29052 , 29070 , 29088,\
 226:Inc/mc_math.h ****      29106 , 29124 , 29142 , 29160 , 29178 , 29196 , 29214 , 29232,\
 227:Inc/mc_math.h ****      29250 , 29268 , 29286 , 29304 , 29322 , 29339 , 29357 , 29375,\
 228:Inc/mc_math.h ****      29393 , 29411 , 29429 , 29446 , 29464 , 29482 , 29500 , 29518,\
 229:Inc/mc_math.h ****      29535 , 29553 , 29571 , 29588 , 29606 , 29624 , 29642 , 29659,\
 230:Inc/mc_math.h ****      29677 , 29695 , 29712 , 29730 , 29748 , 29765 , 29783 , 29800,\
 231:Inc/mc_math.h ****      29818 , 29835 , 29853 , 29871 , 29888 , 29906 , 29923 , 29941,\
 232:Inc/mc_math.h ****      29958 , 29976 , 29993 , 30011 , 30028 , 30046 , 30063 , 30080,\
 233:Inc/mc_math.h ****      30098 , 30115 , 30133 , 30150 , 30168 , 30185 , 30202 , 30220,\
 234:Inc/mc_math.h ****      30237 , 30254 , 30272 , 30289 , 30306 , 30324 , 30341 , 30358,\
 235:Inc/mc_math.h ****      30375 , 30393 , 30410 , 30427 , 30444 , 30461 , 30479 , 30496,\
 236:Inc/mc_math.h ****      30513 , 30530 , 30547 , 30565 , 30582 , 30599 , 30616 , 30633,\
 237:Inc/mc_math.h ****      30650 , 30667 , 30684 , 30701 , 30719 , 30736 , 30753 , 30770,\
 238:Inc/mc_math.h ****      30787 , 30804 , 30821 , 30838 , 30855 , 30872 , 30889 , 30906,\
 239:Inc/mc_math.h ****      30923 , 30940 , 30957 , 30973 , 30990 , 31007 , 31024 , 31041,\
 240:Inc/mc_math.h ****      31058 , 31075 , 31092 , 31109 , 31125 , 31142 , 31159 , 31176,\
 241:Inc/mc_math.h ****      31193 , 31210 , 31226 , 31243 , 31260 , 31277 , 31293 , 31310,\
 242:Inc/mc_math.h ****      31327 , 31344 , 31360 , 31377 , 31394 , 31410 , 31427 , 31444,\
 243:Inc/mc_math.h ****      31461 , 31477 , 31494 , 31510 , 31527 , 31544 , 31560 , 31577,\
 244:Inc/mc_math.h ****      31594 , 31610 , 31627 , 31643 , 31660 , 31676 , 31693 , 31709,\
 245:Inc/mc_math.h ****      31726 , 31743 , 31759 , 31776 , 31792 , 31809 , 31825 , 31841,\
 246:Inc/mc_math.h ****      31858 , 31874 , 31891 , 31907 , 31924 , 31940 , 31957 , 31973,\
 247:Inc/mc_math.h ****      31989 , 32006 , 32023 , 32038 , 32055 , 32071 , 32087 , 32104,\
 248:Inc/mc_math.h ****      32120 , 32136 , 32153 , 32169 , 32185 , 32202 , 32218 , 32234,\
 249:Inc/mc_math.h ****      32250 , 32267 , 32283 , 32299 , 32315 , 32332 , 32348 , 32364,\
 250:Inc/mc_math.h ****      32380 , 32396 , 32413 , 32429 , 32445 , 32461 , 32477 , 32493,\
 251:Inc/mc_math.h ****      32509 , 32526 , 32542 , 32558 , 32574 , 32590 , 32606 , 32622,\
 252:Inc/mc_math.h ****      32638 , 32654 , 32670 , 32686 , 32702 , 32718 , 32734 , 32750,\
 253:Inc/mc_math.h ****      32767 }
 254:Inc/mc_math.h **** 
 255:Inc/mc_math.h **** #define ATAN1DIV1     (int16_t)8192
 256:Inc/mc_math.h **** #define ATAN1DIV2     (int16_t)4836
 257:Inc/mc_math.h **** #define ATAN1DIV4     (int16_t)2555
 258:Inc/mc_math.h **** #define ATAN1DIV8     (int16_t)1297
 259:Inc/mc_math.h **** #define ATAN1DIV16    (int16_t)651
 260:Inc/mc_math.h **** #define ATAN1DIV32    (int16_t)326
 261:Inc/mc_math.h **** #define ATAN1DIV64    (int16_t)163
 262:Inc/mc_math.h **** #define ATAN1DIV128   (int16_t)81
 263:Inc/mc_math.h **** #define ATAN1DIV256   (int16_t)41
 264:Inc/mc_math.h **** #define ATAN1DIV512   (int16_t)20
 265:Inc/mc_math.h **** #define ATAN1DIV1024  (int16_t)10
 266:Inc/mc_math.h **** #define ATAN1DIV2048  (int16_t)5
 267:Inc/mc_math.h **** #define ATAN1DIV4096  (int16_t)3
 268:Inc/mc_math.h **** #define ATAN1DIV8192  (int16_t)1
 269:Inc/mc_math.h **** 
 270:Inc/mc_math.h **** /**
 271:Inc/mc_math.h ****   * @brief  It executes Modulus algorithm.
 272:Inc/mc_math.h ****   * @param  alpha component,
 273:Inc/mc_math.h ****   *         beta component.
 274:Inc/mc_math.h ****   * @retval int16_t Modulus.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 84


 275:Inc/mc_math.h ****   */
 276:Inc/mc_math.h **** static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
 2569              		.loc 2 276 23 view .LVU653
 2570              	.LBB8:
 277:Inc/mc_math.h **** {
 278:Inc/mc_math.h **** 
 279:Inc/mc_math.h ****   int32_t wAux1;
 2571              		.loc 2 279 3 view .LVU654
 280:Inc/mc_math.h ****   int32_t wAux2;
 2572              		.loc 2 280 3 view .LVU655
 281:Inc/mc_math.h **** 
 282:Inc/mc_math.h ****   wAux1 = (int32_t)(alpha  * alpha);
 2573              		.loc 2 282 3 view .LVU656
 283:Inc/mc_math.h ****   wAux2 = (int32_t)(beta * beta);
 2574              		.loc 2 283 3 view .LVU657
 284:Inc/mc_math.h **** 
 285:Inc/mc_math.h ****   wAux1 += wAux2;
 2575              		.loc 2 285 3 view .LVU658
 283:Inc/mc_math.h ****   wAux2 = (int32_t)(beta * beta);
 2576              		.loc 2 283 9 is_stmt 0 view .LVU659
 2577 000c 03FB03F3 		mul	r3, r3, r3
 2578              	.LVL199:
 286:Inc/mc_math.h ****   wAux1 = MCM_Sqrt(wAux1);
 2579              		.loc 2 286 3 is_stmt 1 view .LVU660
 2580              		.loc 2 286 11 is_stmt 0 view .LVU661
 2581 0010 00FB0030 		mla	r0, r0, r0, r3
 2582              	.LVL200:
 2583              		.loc 2 286 11 view .LVU662
 2584 0014 FFF7FEFF 		bl	MCM_Sqrt
 2585              	.LVL201:
 287:Inc/mc_math.h **** 
 288:Inc/mc_math.h ****   if (wAux1 > INT16_MAX)
 2586              		.loc 2 288 3 is_stmt 1 view .LVU663
 289:Inc/mc_math.h ****   {
 290:Inc/mc_math.h ****     wAux1 = (int32_t)INT16_MAX;
 291:Inc/mc_math.h ****   }
 292:Inc/mc_math.h ****   else
 293:Inc/mc_math.h ****   {
 294:Inc/mc_math.h ****     /* Nothing to do */
 295:Inc/mc_math.h ****   }
 2587              		.loc 2 295 3 view .LVU664
 296:Inc/mc_math.h **** 
 297:Inc/mc_math.h ****   return ((int16_t)wAux1);
 2588              		.loc 2 297 3 view .LVU665
 2589              		.loc 2 297 3 is_stmt 0 view .LVU666
 2590              	.LBE8:
 2591              	.LBE7:
1686:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1687:Src/mc_interface.c ****   }
1688:Src/mc_interface.c **** #endif
1689:Src/mc_interface.c **** 
1690:Src/mc_interface.c ****   return (wAux);
 2592              		.loc 1 1690 3 is_stmt 1 view .LVU667
 2593              	.LBB10:
 2594              	.LBB9:
 2595              		.loc 2 297 11 is_stmt 0 view .LVU668
 2596 0018 47F6FF73 		movw	r3, #32767
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 85


 2597 001c 9842     		cmp	r0, r3
 2598 001e A8BF     		it	ge
 2599 0020 1846     		movge	r0, r3
 2600              	.LVL202:
 2601              		.loc 2 297 11 view .LVU669
 2602              	.LBE9:
 2603              	.LBE10:
1691:Src/mc_interface.c **** }
 2604              		.loc 1 1691 1 view .LVU670
 2605 0022 00B2     		sxth	r0, r0
 2606 0024 08BD     		pop	{r3, pc}
 2607              		.cfi_endproc
 2608              	.LFE1144:
 2610 0026 00BF     		.section	.text.MCI_GetPhaseVoltageAmplitude,"ax",%progbits
 2611              		.align	1
 2612              		.p2align 2,,3
 2613              		.weak	MCI_GetPhaseVoltageAmplitude
 2614              		.syntax unified
 2615              		.thumb
 2616              		.thumb_func
 2618              	MCI_GetPhaseVoltageAmplitude:
 2619              	.LVL203:
 2620              	.LFB1145:
1692:Src/mc_interface.c **** 
1693:Src/mc_interface.c **** /**
1694:Src/mc_interface.c ****   * @brief  It returns the applied motor phase voltage amplitude (0-to-peak) in
1695:Src/mc_interface.c ****   *         s16V. To convert s16V into Volts following formula must be used:
1696:Src/mc_interface.c ****   *         PhaseVoltage(V) = [PhaseVoltage(s16A) * Vbus(V)] /[sqrt(3) *32767]
1697:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1698:Src/mc_interface.c ****   * @retval int16_t Motor phase voltage (0-to-peak) in s16V
1699:Src/mc_interface.c ****   */
1700:Src/mc_interface.c **** __weak int16_t MCI_GetPhaseVoltageAmplitude(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
1701:Src/mc_interface.c **** {
 2621              		.loc 1 1701 1 is_stmt 1 view -0
 2622              		.cfi_startproc
 2623              		@ args = 0, pretend = 0, frame = 0
 2624              		@ frame_needed = 0, uses_anonymous_args = 0
1702:Src/mc_interface.c ****   int16_t temp_wAux;
 2625              		.loc 1 1702 3 view .LVU672
1703:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1704:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1705:Src/mc_interface.c ****   {
1706:Src/mc_interface.c ****     temp_wAux = 0;
1707:Src/mc_interface.c ****   }
1708:Src/mc_interface.c ****   else
1709:Src/mc_interface.c ****   {
1710:Src/mc_interface.c **** #endif
1711:Src/mc_interface.c ****     alphabeta_t Local_Voltage;
 2626              		.loc 1 1711 5 view .LVU673
1712:Src/mc_interface.c ****     int32_t wAux1;
 2627              		.loc 1 1712 5 view .LVU674
1713:Src/mc_interface.c ****     int32_t wAux2;
 2628              		.loc 1 1713 5 view .LVU675
1714:Src/mc_interface.c **** 
1715:Src/mc_interface.c ****     Local_Voltage = pHandle->pFOCVars->Valphabeta;
 2629              		.loc 1 1715 5 view .LVU676
 2630              		.loc 1 1715 28 is_stmt 0 view .LVU677
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 86


 2631 0000 4268     		ldr	r2, [r0, #4]
1701:Src/mc_interface.c ****   int16_t temp_wAux;
 2632              		.loc 1 1701 1 view .LVU678
 2633 0002 08B5     		push	{r3, lr}
 2634              	.LCFI50:
 2635              		.cfi_def_cfa_offset 8
 2636              		.cfi_offset 3, -8
 2637              		.cfi_offset 14, -4
 2638              		.loc 1 1715 19 view .LVU679
 2639 0004 B2F91C30 		ldrsh	r3, [r2, #28]
 2640 0008 B2F91A00 		ldrsh	r0, [r2, #26]
 2641              	.LVL204:
1716:Src/mc_interface.c ****     wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
 2642              		.loc 1 1716 5 is_stmt 1 view .LVU680
1717:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2643              		.loc 1 1717 5 view .LVU681
1718:Src/mc_interface.c **** 
1719:Src/mc_interface.c ****     wAux1 += wAux2;
 2644              		.loc 1 1719 5 view .LVU682
1717:Src/mc_interface.c ****     wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 2645              		.loc 1 1717 11 is_stmt 0 view .LVU683
 2646 000c 03FB03F3 		mul	r3, r3, r3
 2647              	.LVL205:
1720:Src/mc_interface.c ****     wAux1 = MCM_Sqrt(wAux1);
 2648              		.loc 1 1720 5 is_stmt 1 view .LVU684
 2649              		.loc 1 1720 13 is_stmt 0 view .LVU685
 2650 0010 00FB0030 		mla	r0, r0, r0, r3
 2651              	.LVL206:
 2652              		.loc 1 1720 13 view .LVU686
 2653 0014 FFF7FEFF 		bl	MCM_Sqrt
 2654              	.LVL207:
1721:Src/mc_interface.c **** 
1722:Src/mc_interface.c ****     if (wAux1 > INT16_MAX)
 2655              		.loc 1 1722 5 is_stmt 1 view .LVU687
1723:Src/mc_interface.c ****     {
1724:Src/mc_interface.c ****       wAux1 = (int32_t)INT16_MAX;
1725:Src/mc_interface.c ****     }
1726:Src/mc_interface.c ****     temp_wAux = (int16_t)wAux1;
 2656              		.loc 1 1726 5 view .LVU688
1727:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1728:Src/mc_interface.c ****   }
1729:Src/mc_interface.c **** #endif
1730:Src/mc_interface.c ****   return (temp_wAux);
 2657              		.loc 1 1730 3 view .LVU689
1726:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2658              		.loc 1 1726 15 is_stmt 0 view .LVU690
 2659 0018 47F6FF73 		movw	r3, #32767
 2660 001c 9842     		cmp	r0, r3
 2661 001e A8BF     		it	ge
 2662 0020 1846     		movge	r0, r3
 2663              	.LVL208:
1731:Src/mc_interface.c **** }
 2664              		.loc 1 1731 1 view .LVU691
 2665 0022 00B2     		sxth	r0, r0
 2666 0024 08BD     		pop	{r3, pc}
 2667              		.cfi_endproc
 2668              	.LFE1145:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 87


 2670 0026 00BF     		.section	.text.MCI_Clear_Iqdref,"ax",%progbits
 2671              		.align	1
 2672              		.p2align 2,,3
 2673              		.weak	MCI_Clear_Iqdref
 2674              		.syntax unified
 2675              		.thumb
 2676              		.thumb_func
 2678              	MCI_Clear_Iqdref:
 2679              	.LVL209:
 2680              	.LFB1146:
1732:Src/mc_interface.c **** 
1733:Src/mc_interface.c **** /**
1734:Src/mc_interface.c ****   * @brief  It re-initializes Iqdref variables with their default values.
1735:Src/mc_interface.c ****   * @param  pHandle Pointer on the component instance to work on.
1736:Src/mc_interface.c ****   */
1737:Src/mc_interface.c **** __weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
1738:Src/mc_interface.c **** {
 2681              		.loc 1 1738 1 is_stmt 1 view -0
 2682              		.cfi_startproc
 2683              		@ args = 0, pretend = 0, frame = 0
 2684              		@ frame_needed = 0, uses_anonymous_args = 0
1739:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1740:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1741:Src/mc_interface.c ****   {
1742:Src/mc_interface.c ****     /* Nothing to do */
1743:Src/mc_interface.c ****   }
1744:Src/mc_interface.c ****   else
1745:Src/mc_interface.c ****   {
1746:Src/mc_interface.c **** #endif
1747:Src/mc_interface.c ****     pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 2685              		.loc 1 1747 5 view .LVU693
1738:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
 2686              		.loc 1 1738 1 is_stmt 0 view .LVU694
 2687 0000 10B5     		push	{r4, lr}
 2688              	.LCFI51:
 2689              		.cfi_def_cfa_offset 8
 2690              		.cfi_offset 4, -8
 2691              		.cfi_offset 14, -4
 2692              		.loc 1 1747 12 view .LVU695
 2693 0002 D0E90004 		ldrd	r0, r4, [r0]
 2694              	.LVL210:
 2695              		.loc 1 1747 33 view .LVU696
 2696 0006 FFF7FEFF 		bl	STC_GetDefaultIqdref
 2697              	.LVL211:
 2698 000a C0F30F43 		ubfx	r3, r0, #16, #16
 2699 000e 2082     		strh	r0, [r4, #16]	@ movhi
 2700 0010 6382     		strh	r3, [r4, #18]	@ movhi
1748:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1749:Src/mc_interface.c ****   }
1750:Src/mc_interface.c **** #endif
1751:Src/mc_interface.c **** }
 2701              		.loc 1 1751 1 view .LVU697
 2702 0012 10BD     		pop	{r4, pc}
 2703              		.cfi_endproc
 2704              	.LFE1146:
 2706              		.section	.text.MCI_Clear_PerfMeasure,"ax",%progbits
 2707              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 88


 2708              		.p2align 2,,3
 2709              		.weak	MCI_Clear_PerfMeasure
 2710              		.syntax unified
 2711              		.thumb
 2712              		.thumb_func
 2714              	MCI_Clear_PerfMeasure:
 2715              	.LVL212:
 2716              	.LFB1147:
1752:Src/mc_interface.c **** __weak void MCI_Clear_PerfMeasure(MCI_Handle_t *pHandle, uint8_t bMotor)
1753:Src/mc_interface.c **** {
 2717              		.loc 1 1753 1 is_stmt 1 view -0
 2718              		.cfi_startproc
 2719              		@ args = 0, pretend = 0, frame = 0
 2720              		@ frame_needed = 0, uses_anonymous_args = 0
 2721              		@ link register save eliminated.
1754:Src/mc_interface.c **** #ifdef NULL_PTR_CHECK_MC_INT
1755:Src/mc_interface.c ****   if (MC_NULL == pHandle)
1756:Src/mc_interface.c ****   {
1757:Src/mc_interface.c ****     /* Nothing to do */
1758:Src/mc_interface.c ****   }
1759:Src/mc_interface.c ****   else
1760:Src/mc_interface.c ****   {
1761:Src/mc_interface.c **** #endif
1762:Src/mc_interface.c ****     MC_Perf_Clear(pHandle->pPerfMeasure,bMotor);
 2722              		.loc 1 1762 5 view .LVU699
 2723 0000 C068     		ldr	r0, [r0, #12]
 2724              	.LVL213:
 2725              		.loc 1 1762 5 is_stmt 0 view .LVU700
 2726 0002 FFF7FEBF 		b	MC_Perf_Clear
 2727              	.LVL214:
 2728              		.loc 1 1762 5 view .LVU701
 2729              		.cfi_endproc
 2730              	.LFE1147:
 2732 0006 00BF     		.text
 2733              	.Letext0:
 2734              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2735              		.file 4 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 2736              		.file 5 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 2737              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 2738              		.file 7 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 2739              		.file 8 "Inc/mc_type.h"
 2740              		.file 9 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 2741              		.file 10 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 2742              		.file 11 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 2743              		.file 12 "Inc/pwm_curr_fdbk.h"
 2744              		.file 13 "Inc/mc_perf.h"
 2745              		.file 14 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/encoder_speed_pos_fdbk.h"
 2746              		.file 15 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/trajectory_ctrl.h"
 2747              		.file 16 "Inc/mc_interface.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 89


DEFINED SYMBOLS
                            *ABS*:00000000 mc_interface.c
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:20     .text.MCI_Init:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:27     .text.MCI_Init:00000000 MCI_Init
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:77     .text.MCI_ExecSpeedRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:84     .text.MCI_ExecSpeedRamp:00000000 MCI_ExecSpeedRamp
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:115    .text.MCI_ExecSpeedRamp_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:122    .text.MCI_ExecSpeedRamp_F:00000000 MCI_ExecSpeedRamp_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:160    .text.MCI_ExecSpeedRamp_F:00000020 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:165    .text.MCI_ExecTorqueRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:172    .text.MCI_ExecTorqueRamp:00000000 MCI_ExecTorqueRamp
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:203    .text.MCI_ExecTorqueRamp_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:210    .text.MCI_ExecTorqueRamp_F:00000000 MCI_ExecTorqueRamp_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:249    .text.MCI_SetCurrentReferences:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:256    .text.MCI_SetCurrentReferences:00000000 MCI_SetCurrentReferences
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:293    .text.MCI_SetCurrentReferences_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:300    .text.MCI_SetCurrentReferences_F:00000000 MCI_SetCurrentReferences_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:363    .text.MCI_ExecPositionCommand:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:370    .text.MCI_ExecPositionCommand:00000000 MCI_ExecPositionCommand
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:475    .text.MCI_ExecPositionCommand:00000068 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:480    .text.MCI_GetCalibratedOffsetsMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:487    .text.MCI_GetCalibratedOffsetsMotor:00000000 MCI_GetCalibratedOffsetsMotor
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:531    .text.MCI_FaultProcessing:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:538    .text.MCI_FaultProcessing:00000000 MCI_FaultProcessing
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:568    .text.MCI_ExecBufferedCommands:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:575    .text.MCI_ExecBufferedCommands:00000000 MCI_ExecBufferedCommands
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:701    .text.MCI_IsCommandAcknowledged:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:708    .text.MCI_IsCommandAcknowledged:00000000 MCI_IsCommandAcknowledged
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:741    .text.MCI_GetSTMState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:748    .text.MCI_GetSTMState:00000000 MCI_GetSTMState
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:766    .text.MCI_GetCtrlPositionState:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:773    .text.MCI_GetCtrlPositionState:00000000 MCI_GetCtrlPositionState
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:792    .text.MCI_GetAlignmentStatus:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:799    .text.MCI_GetAlignmentStatus:00000000 MCI_GetAlignmentStatus
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:818    .text.MCI_GetCurrentPosition:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:825    .text.MCI_GetCurrentPosition:00000000 MCI_GetCurrentPosition
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:844    .text.MCI_GetTargetPosition:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:851    .text.MCI_GetTargetPosition:00000000 MCI_GetTargetPosition
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:870    .text.MCI_GetMoveDuration:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:877    .text.MCI_GetMoveDuration:00000000 MCI_GetMoveDuration
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:896    .text.MCI_GetOccurredFaults:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:903    .text.MCI_GetOccurredFaults:00000000 MCI_GetOccurredFaults
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:921    .text.MCI_GetCurrentFaults:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:928    .text.MCI_GetCurrentFaults:00000000 MCI_GetCurrentFaults
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:946    .text.MCI_StartMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:953    .text.MCI_StartMotor:00000000 MCI_StartMotor
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1017   .text.MCI_StartWithPolarizationMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1024   .text.MCI_StartWithPolarizationMotor:00000000 MCI_StartWithPolarizationMotor
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1094   .text.MCI_StartOffsetMeasurments:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1101   .text.MCI_StartOffsetMeasurments:00000000 MCI_StartOffsetMeasurments
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1170   .text.MCI_SetCalibratedOffsetsMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1177   .text.MCI_SetCalibratedOffsetsMotor:00000000 MCI_SetCalibratedOffsetsMotor
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1247   .text.MCI_StopMotor:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1254   .text.MCI_StopMotor:00000000 MCI_StopMotor
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1344   .text.MCI_FaultAcknowledged:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1351   .text.MCI_FaultAcknowledged:00000000 MCI_FaultAcknowledged
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1412   .text.MCI_GetFaultState:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 90


C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1419   .text.MCI_GetFaultState:00000000 MCI_GetFaultState
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1444   .text.MCI_GetControlMode:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1451   .text.MCI_GetControlMode:00000000 MCI_GetControlMode
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1469   .text.MCI_GetImposedMotorDirection:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1476   .text.MCI_GetImposedMotorDirection:00000000 MCI_GetImposedMotorDirection
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1543   .text.MCI_GetLastRampFinalSpeed:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1550   .text.MCI_GetLastRampFinalSpeed:00000000 MCI_GetLastRampFinalSpeed
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1568   .text.MCI_GetLastRampFinalTorque:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1575   .text.MCI_GetLastRampFinalTorque:00000000 MCI_GetLastRampFinalTorque
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1593   .text.MCI_GetLastRampFinalDuration:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1600   .text.MCI_GetLastRampFinalDuration:00000000 MCI_GetLastRampFinalDuration
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1618   .text.MCI_GetLastRampFinalSpeed_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1625   .text.MCI_GetLastRampFinalSpeed_F:00000000 MCI_GetLastRampFinalSpeed_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1664   .text.MCI_GetLastRampFinalSpeed_F:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1670   .text.MCI_RampCompleted:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1677   .text.MCI_RampCompleted:00000000 MCI_RampCompleted
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1724   .text.MCI_StopSpeedRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1731   .text.MCI_StopSpeedRamp:00000000 MCI_StopSpeedRamp
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1750   .text.MCI_StopRamp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1757   .text.MCI_StopRamp:00000000 MCI_StopRamp
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1775   .text.MCI_GetSpdSensorReliability:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1782   .text.MCI_GetSpdSensorReliability:00000000 MCI_GetSpdSensorReliability
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1818   .text.MCI_GetAvrgMecSpeedUnit:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1825   .text.MCI_GetAvrgMecSpeedUnit:00000000 MCI_GetAvrgMecSpeedUnit
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1861   .text.MCI_GetAvrgMecSpeed_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1868   .text.MCI_GetAvrgMecSpeed_F:00000000 MCI_GetAvrgMecSpeed_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1910   .text.MCI_GetAvrgMecSpeed_F:00000028 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1915   .text.MCI_GetMecSpeedRefUnit:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1922   .text.MCI_GetMecSpeedRefUnit:00000000 MCI_GetMecSpeedRefUnit
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1941   .text.MCI_GetMecSpeedRef_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1948   .text.MCI_GetMecSpeedRef_F:00000000 MCI_GetMecSpeedRef_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1984   .text.MCI_GetMecSpeedRef_F:00000024 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1989   .text.MCI_GetIab:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:1996   .text.MCI_GetIab:00000000 MCI_GetIab
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2030   .text.MCI_GetIab_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2037   .text.MCI_GetIab_F:00000000 MCI_GetIab_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2087   .text.MCI_GetIalphabeta:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2094   .text.MCI_GetIalphabeta:00000000 MCI_GetIalphabeta
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2128   .text.MCI_GetIqd:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2135   .text.MCI_GetIqd:00000000 MCI_GetIqd
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2169   .text.MCI_GetIqd_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2176   .text.MCI_GetIqd_F:00000000 MCI_GetIqd_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2225   .text.MCI_GetIqdHF:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2232   .text.MCI_GetIqdHF:00000000 MCI_GetIqdHF
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2266   .text.MCI_GetIqdref:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2273   .text.MCI_GetIqdref:00000000 MCI_GetIqdref
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2307   .text.MCI_GetIqdref_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2314   .text.MCI_GetIqdref_F:00000000 MCI_GetIqdref_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2363   .text.MCI_GetVqd:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2370   .text.MCI_GetVqd:00000000 MCI_GetVqd
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2404   .text.MCI_GetValphabeta:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2411   .text.MCI_GetValphabeta:00000000 MCI_GetValphabeta
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2445   .text.MCI_GetElAngledpp:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2452   .text.MCI_GetElAngledpp:00000000 MCI_GetElAngledpp
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2472   .text.MCI_GetTeref:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2479   .text.MCI_GetTeref:00000000 MCI_GetTeref
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2499   .text.MCI_GetTeref_F:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s 			page 91


C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2506   .text.MCI_GetTeref_F:00000000 MCI_GetTeref_F
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2536   .text.MCI_GetPhaseCurrentAmplitude:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2543   .text.MCI_GetPhaseCurrentAmplitude:00000000 MCI_GetPhaseCurrentAmplitude
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2611   .text.MCI_GetPhaseVoltageAmplitude:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2618   .text.MCI_GetPhaseVoltageAmplitude:00000000 MCI_GetPhaseVoltageAmplitude
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2671   .text.MCI_Clear_Iqdref:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2678   .text.MCI_Clear_Iqdref:00000000 MCI_Clear_Iqdref
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2707   .text.MCI_Clear_PerfMeasure:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccvTNUuc.s:2714   .text.MCI_Clear_PerfMeasure:00000000 MCI_Clear_PerfMeasure

UNDEFINED SYMBOLS
STC_GetSpeedSensor
SPD_GetMecAngle
TC_MoveCommand
TC_FollowCommand
PWMC_GetOffsetCalib
STC_SetControlMode
STC_ExecRamp
TC_GetControlPositionStatus
TC_GetAlignmentStatus
TC_GetCurrentPosition
TC_GetTargetPosition
TC_GetMoveDuration
PWMC_SetOffsetCalib
STC_RampCompleted
STC_StopSpeedRamp
STC_StopRamp
SPD_Check
SPD_GetAvrgMecSpeedUnit
STC_GetMecSpeedRefUnit
MCM_Sqrt
STC_GetDefaultIqdref
MC_Perf_Clear
