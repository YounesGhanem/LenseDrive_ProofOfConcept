ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 2
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"mc_api.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.MC_StartMotor1,"ax",%progbits
  20              		.align	1
  21              		.p2align 2,,3
  22              		.weak	MC_StartMotor1
  23              		.syntax unified
  24              		.thumb
  25              		.thumb_func
  27              	MC_StartMotor1:
  28              	.LFB1088:
  29              		.file 1 "Src/mc_api.c"
   1:Src/mc_api.c  **** 
   2:Src/mc_api.c  **** /**
   3:Src/mc_api.c  ****   ******************************************************************************
   4:Src/mc_api.c  ****   * @file    mc_api.c
   5:Src/mc_api.c  ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_api.c  ****   * @brief   This file implements the high level interface of the Motor Control SDK.
   7:Src/mc_api.c  ****   ******************************************************************************
   8:Src/mc_api.c  ****   * @attention
   9:Src/mc_api.c  ****   *
  10:Src/mc_api.c  ****   * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
  11:Src/mc_api.c  ****   * All rights reserved.</center></h2>
  12:Src/mc_api.c  ****   *
  13:Src/mc_api.c  ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/mc_api.c  ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/mc_api.c  ****   * the License. You may obtain a copy of the License at:
  16:Src/mc_api.c  ****   *                             www.st.com/SLA0044
  17:Src/mc_api.c  ****   *
  18:Src/mc_api.c  ****   ******************************************************************************
  19:Src/mc_api.c  ****   * @ingroup MCIAPI
  20:Src/mc_api.c  ****   */
  21:Src/mc_api.c  **** 
  22:Src/mc_api.c  **** #include "mc_interface.h"
  23:Src/mc_api.c  **** #include "mc_api.h"
  24:Src/mc_api.c  **** #include "mc_config.h"
  25:Src/mc_api.c  **** #include "mcp.h"
  26:Src/mc_api.c  **** 
  27:Src/mc_api.c  **** /** @addtogroup MCSDK
  28:Src/mc_api.c  ****   * @{
  29:Src/mc_api.c  ****   */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 2


  30:Src/mc_api.c  **** 
  31:Src/mc_api.c  **** /**
  32:Src/mc_api.c  ****   * @defgroup CAI Application Programming Interface
  33:Src/mc_api.c  ****   * @brief Interface for Motor Control applications using the classic SDK
  34:Src/mc_api.c  ****   *
  35:Src/mc_api.c  ****   * @{
  36:Src/mc_api.c  ****   */
  37:Src/mc_api.c  **** 
  38:Src/mc_api.c  **** /** @defgroup MCIAPI Motor Control API
  39:Src/mc_api.c  ****   *
  40:Src/mc_api.c  ****   * @brief High level Programming Interface of the Motor Control SDK
  41:Src/mc_api.c  ****   *
  42:Src/mc_api.c  ****   *  This interface allows for performing basic operations on the motor(s) driven by an
  43:Src/mc_api.c  ****   * Motor Control SDK based application. With it, motors can be started and stopped, speed or
  44:Src/mc_api.c  ****   * torque ramps can be programmed and executed and information on the state of the motors can
  45:Src/mc_api.c  ****   * be retrieved, among others.
  46:Src/mc_api.c  ****   *
  47:Src/mc_api.c  ****   *  This interface consists in functions that target a specific motor, indicated in their name.
  48:Src/mc_api.c  ****   * These functions aims at being the main interface used by an Application to control motors.
  49:Src/mc_api.c  ****   *
  50:Src/mc_api.c  ****   *  The current Motor Control API can cope with up to 2 motors.
  51:Src/mc_api.c  ****   * @{
  52:Src/mc_api.c  ****   */
  53:Src/mc_api.c  **** 
  54:Src/mc_api.c  **** /**
  55:Src/mc_api.c  ****   * @brief  Initiates the start-up procedure for Motor 1
  56:Src/mc_api.c  ****   *
  57:Src/mc_api.c  ****   *  If the state machine of Motor 1 is in #IDLE state, the command is immediately
  58:Src/mc_api.c  ****   * executed. Otherwise the command is discarded. The Application can check the
  59:Src/mc_api.c  ****   * return value to know whether the command was executed or discarded.
  60:Src/mc_api.c  ****   *
  61:Src/mc_api.c  ****   *  One of the following commands must be executed before calling MC_StartMotor1()
  62:Src/mc_api.c  ****   * in order to set a torque or a speed reference:
  63:Src/mc_api.c  ****   *
  64:Src/mc_api.c  ****   * - MC_ProgramSpeedRampMotor1()
  65:Src/mc_api.c  ****   * - MC_ProgramTorqueRampMotor1()
  66:Src/mc_api.c  ****   * - MC_SetCurrentReferenceMotor1()
  67:Src/mc_api.c  ****   *
  68:Src/mc_api.c  ****   * Failing to do so results in an unpredictable behaviour.
  69:Src/mc_api.c  ****   *
  70:Src/mc_api.c  ****   * If the offsets of the current measurement circuitry offsets are not known yet,
  71:Src/mc_api.c  ****   * an offset calibration procedure is executed to measure them prior to acutally
  72:Src/mc_api.c  ****   * starting up the motor.
  73:Src/mc_api.c  ****   *
  74:Src/mc_api.c  ****   * @note The MCI_StartMotor1 command only triggers the execution of the start-up
  75:Src/mc_api.c  ****   * procedure (or eventually the offset calibration procedure) and returns
  76:Src/mc_api.c  ****   * immediately after. It is not blocking the execution of the application until
  77:Src/mc_api.c  ****   * the motor is indeed running in steady state. If the application needs to wait
  78:Src/mc_api.c  ****   * for the motor to be running in steady state, the application has to check the
  79:Src/mc_api.c  ****   * state machine of the motor and verify that the #RUN state has been reached.
  80:Src/mc_api.c  ****   * Note also that if the startup sequence fails the #RUN state may never be reached.
  81:Src/mc_api.c  ****   *
  82:Src/mc_api.c  ****   * @retval returns true if the command is successfully executed, false otherwise.
  83:Src/mc_api.c  ****   */
  84:Src/mc_api.c  **** __weak bool MC_StartMotor1(void)
  85:Src/mc_api.c  **** {
  30              		.loc 1 85 1 view -0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 3


  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
  86:Src/mc_api.c  ****   return (MCI_StartMotor(pMCI[M1]));
  35              		.loc 1 86 3 view .LVU1
  36              		.loc 1 86 11 is_stmt 0 view .LVU2
  37 0000 014B     		ldr	r3, .L3
  38 0002 1868     		ldr	r0, [r3]
  39 0004 FFF7FEBF 		b	MCI_StartMotor
  40              	.LVL0:
  41              	.L4:
  42              		.align	2
  43              	.L3:
  44 0008 00000000 		.word	pMCI
  45              		.cfi_endproc
  46              	.LFE1088:
  48              		.section	.text.MC_StopMotor1,"ax",%progbits
  49              		.align	1
  50              		.p2align 2,,3
  51              		.weak	MC_StopMotor1
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  56              	MC_StopMotor1:
  57              	.LFB1089:
  87:Src/mc_api.c  **** }
  88:Src/mc_api.c  **** 
  89:Src/mc_api.c  **** /**
  90:Src/mc_api.c  ****   * @brief  Initiates the stop procedure for Motor 1.
  91:Src/mc_api.c  ****   *
  92:Src/mc_api.c  ****   *  If the state machine is in any state but the #ICLWAIT, #IDLE, FAULT_NOW and
  93:Src/mc_api.c  ****   * #FAULT_OVER states, the command is immediately executed. Otherwise, it is
  94:Src/mc_api.c  ****   * discarded. The Application can check the return value to know whether the
  95:Src/mc_api.c  ****   * command was executed or discarded.
  96:Src/mc_api.c  ****   *
  97:Src/mc_api.c  ****   * @note The MC_StopMotor1() command only triggers the stop motor procedure
  98:Src/mc_api.c  ****   * and then returns. It is not blocking the application until the motor is indeed
  99:Src/mc_api.c  ****   * stopped. To know if it has stopped, the application can query the motor's state
 100:Src/mc_api.c  ****   * machine and check if the #IDLE state has been reached.
 101:Src/mc_api.c  ****   *
 102:Src/mc_api.c  ****   * @retval returns true if the command is successfully executed, false otherwise.
 103:Src/mc_api.c  ****   */
 104:Src/mc_api.c  **** __weak bool MC_StopMotor1(void)
 105:Src/mc_api.c  **** {
  58              		.loc 1 105 1 is_stmt 1 view -0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
 106:Src/mc_api.c  ****   return (MCI_StopMotor(pMCI[M1]));
  63              		.loc 1 106 3 view .LVU4
  64              		.loc 1 106 11 is_stmt 0 view .LVU5
  65 0000 014B     		ldr	r3, .L6
  66 0002 1868     		ldr	r0, [r3]
  67 0004 FFF7FEBF 		b	MCI_StopMotor
  68              	.LVL1:
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 4


  69              	.L7:
  70              		.align	2
  71              	.L6:
  72 0008 00000000 		.word	pMCI
  73              		.cfi_endproc
  74              	.LFE1089:
  76              		.section	.text.MC_ProgramSpeedRampMotor1,"ax",%progbits
  77              		.align	1
  78              		.p2align 2,,3
  79              		.weak	MC_ProgramSpeedRampMotor1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  84              	MC_ProgramSpeedRampMotor1:
  85              	.LVL2:
  86              	.LFB1090:
 107:Src/mc_api.c  **** }
 108:Src/mc_api.c  **** 
 109:Src/mc_api.c  **** /**
 110:Src/mc_api.c  ****   * @brief Programs a speed ramp for Motor 1 for later or immediate execution.
 111:Src/mc_api.c  ****   *
 112:Src/mc_api.c  ****   *  A speed ramp is a linear change from the current speed reference to the @p hFinalSpeed
 113:Src/mc_api.c  ****   * target speed in the given @p hDurationms time.
 114:Src/mc_api.c  ****   *
 115:Src/mc_api.c  ****   *  Invoking the MC_ProgramSpeedRampMotor1() function programs a new speed ramp
 116:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 117:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 118:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 119:Src/mc_api.c  ****   *
 120:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 121:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 122:Src/mc_api.c  ****   *
 123:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 124:Src/mc_api.c  ****   * speed or a torque one - or if another buffered command is programmed before the
 125:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 126:Src/mc_api.c  ****   *
 127:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 128:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalSpeed parameter
 129:Src/mc_api.c  ****   * differs from that of the current speed, the ramp will not complete and a Speed
 130:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 131:Src/mc_api.c  ****   * reach 0 rpm.
 132:Src/mc_api.c  ****   *
 133:Src/mc_api.c  ****   * @param  hFinalSpeed Mechanical rotor speed reference at the end of the ramp.
 134:Src/mc_api.c  ****   *                     Expressed in the unit defined by #SPEED_UNIT.
 135:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 136:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the speed
 137:Src/mc_api.c  ****   *         value.
 138:Src/mc_api.c  ****   */
 139:Src/mc_api.c  **** __weak void MC_ProgramSpeedRampMotor1(int16_t hFinalSpeed, uint16_t hDurationms)
 140:Src/mc_api.c  **** {
  87              		.loc 1 140 1 is_stmt 1 view -0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
 141:Src/mc_api.c  ****   MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
  92              		.loc 1 141 3 view .LVU7
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 5


 140:Src/mc_api.c  ****   MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
  93              		.loc 1 140 1 is_stmt 0 view .LVU8
  94 0000 10B4     		push	{r4}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 4
  97              		.cfi_offset 4, -4
  98              		.loc 1 141 3 view .LVU9
  99 0002 044C     		ldr	r4, .L10
 140:Src/mc_api.c  ****   MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 100              		.loc 1 140 1 view .LVU10
 101 0004 0346     		mov	r3, r0
 102 0006 0A46     		mov	r2, r1
 103              		.loc 1 141 3 view .LVU11
 104 0008 2068     		ldr	r0, [r4]
 105              	.LVL3:
 142:Src/mc_api.c  **** }
 106              		.loc 1 142 1 view .LVU12
 107 000a 5DF8044B 		ldr	r4, [sp], #4
 108              	.LCFI1:
 109              		.cfi_restore 4
 110              		.cfi_def_cfa_offset 0
 141:Src/mc_api.c  ****   MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 111              		.loc 1 141 3 view .LVU13
 112 000e 1946     		mov	r1, r3
 113              	.LVL4:
 141:Src/mc_api.c  ****   MCI_ExecSpeedRamp(pMCI[M1], hFinalSpeed, hDurationms);
 114              		.loc 1 141 3 view .LVU14
 115 0010 FFF7FEBF 		b	MCI_ExecSpeedRamp
 116              	.LVL5:
 117              	.L11:
 118              		.align	2
 119              	.L10:
 120 0014 00000000 		.word	pMCI
 121              		.cfi_endproc
 122              	.LFE1090:
 124              		.section	.text.MC_ProgramSpeedRampMotor1_F,"ax",%progbits
 125              		.align	1
 126              		.p2align 2,,3
 127              		.weak	MC_ProgramSpeedRampMotor1_F
 128              		.syntax unified
 129              		.thumb
 130              		.thumb_func
 132              	MC_ProgramSpeedRampMotor1_F:
 133              	.LVL6:
 134              	.LFB1091:
 143:Src/mc_api.c  **** 
 144:Src/mc_api.c  **** /**
 145:Src/mc_api.c  ****   * @brief Programs a speed ramp for Motor 1 for later or immediate execution.
 146:Src/mc_api.c  ****   *
 147:Src/mc_api.c  ****   *  A speed ramp is a linear change from the current speed reference to the @p FinalSpeed
 148:Src/mc_api.c  ****   * target speed in the given @p hDurationms time.
 149:Src/mc_api.c  ****   *
 150:Src/mc_api.c  ****   *  Invoking the MC_ProgramSpeedRampMotor1() function programs a new speed ramp
 151:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 152:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 153:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 154:Src/mc_api.c  ****   *
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 6


 155:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 156:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 157:Src/mc_api.c  ****   *
 158:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 159:Src/mc_api.c  ****   * speed or a torque one - or if another buffered command is programmed before the
 160:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 161:Src/mc_api.c  ****   *
 162:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 163:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalSpeed parameter
 164:Src/mc_api.c  ****   * differs from that of the current speed, the ramp will not complete and a Speed
 165:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 166:Src/mc_api.c  ****   * reach 0 rpm.
 167:Src/mc_api.c  ****   *
 168:Src/mc_api.c  ****   * @param  FinalSpeed Mechanical rotor speed reference at the end of the ramp.
 169:Src/mc_api.c  ****   *         Expressed in rpm.
 170:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 171:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the speed
 172:Src/mc_api.c  ****   *         value.
 173:Src/mc_api.c  ****   */
 174:Src/mc_api.c  **** __weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
 175:Src/mc_api.c  **** {
 135              		.loc 1 175 1 is_stmt 1 view -0
 136              		.cfi_startproc
 137              		@ args = 0, pretend = 0, frame = 0
 138              		@ frame_needed = 0, uses_anonymous_args = 0
 139              		@ link register save eliminated.
 176:Src/mc_api.c  ****   MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 140              		.loc 1 176 3 view .LVU16
 141 0000 024B     		ldr	r3, .L13
 175:Src/mc_api.c  ****   MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 142              		.loc 1 175 1 is_stmt 0 view .LVU17
 143 0002 0146     		mov	r1, r0
 144              		.loc 1 176 3 view .LVU18
 145 0004 1868     		ldr	r0, [r3]
 146              	.LVL7:
 147              		.loc 1 176 3 view .LVU19
 148 0006 FFF7FEBF 		b	MCI_ExecSpeedRamp_F
 149              	.LVL8:
 150              	.L14:
 151              		.loc 1 176 3 view .LVU20
 152 000a 00BF     		.align	2
 153              	.L13:
 154 000c 00000000 		.word	pMCI
 155              		.cfi_endproc
 156              	.LFE1091:
 158              		.section	.text.MC_ProgramTorqueRampMotor1,"ax",%progbits
 159              		.align	1
 160              		.p2align 2,,3
 161              		.weak	MC_ProgramTorqueRampMotor1
 162              		.syntax unified
 163              		.thumb
 164              		.thumb_func
 166              	MC_ProgramTorqueRampMotor1:
 167              	.LVL9:
 168              	.LFB1092:
 177:Src/mc_api.c  **** }
 178:Src/mc_api.c  **** 
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 7


 179:Src/mc_api.c  **** /**
 180:Src/mc_api.c  ****   * @brief Programs a torque ramp for Motor 1 for later or immediate execution.
 181:Src/mc_api.c  ****   *
 182:Src/mc_api.c  ****   *  A torque ramp is a linear change from the current torque reference to the @p hFinalTorque
 183:Src/mc_api.c  ****   * target torque reference in the given @p hDurationms time.
 184:Src/mc_api.c  ****   *
 185:Src/mc_api.c  ****   *  Invoking the MC_ProgramTorqueRampMotor1() function programs a new torque ramp
 186:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 187:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 188:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 189:Src/mc_api.c  ****   *
 190:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 191:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 192:Src/mc_api.c  ****   *
 193:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 194:Src/mc_api.c  ****   * torque or a speed one - or if another buffered command is programmed before the
 195:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 196:Src/mc_api.c  ****   *
 197:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 198:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the hFinalTorque parameter
 199:Src/mc_api.c  ****   * differs from that of the current torque, the ramp will not complete and a Speed
 200:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 201:Src/mc_api.c  ****   * reach 0 rpm.
 202:Src/mc_api.c  ****   *
 203:Src/mc_api.c  ****   * @param  hFinalTorque Mechanical motor torque reference at the end of the ramp.
 204:Src/mc_api.c  ****   *         This value represents actually the Iq current expressed in digit.
 205:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 206:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the torque
 207:Src/mc_api.c  ****   *         value.
 208:Src/mc_api.c  ****   */
 209:Src/mc_api.c  **** __weak void MC_ProgramTorqueRampMotor1(int16_t hFinalTorque, uint16_t hDurationms)
 210:Src/mc_api.c  **** {
 169              		.loc 1 210 1 is_stmt 1 view -0
 170              		.cfi_startproc
 171              		@ args = 0, pretend = 0, frame = 0
 172              		@ frame_needed = 0, uses_anonymous_args = 0
 173              		@ link register save eliminated.
 211:Src/mc_api.c  ****   MCI_ExecTorqueRamp(pMCI[M1], hFinalTorque, hDurationms);
 174              		.loc 1 211 3 view .LVU22
 210:Src/mc_api.c  ****   MCI_ExecTorqueRamp(pMCI[M1], hFinalTorque, hDurationms);
 175              		.loc 1 210 1 is_stmt 0 view .LVU23
 176 0000 10B4     		push	{r4}
 177              	.LCFI2:
 178              		.cfi_def_cfa_offset 4
 179              		.cfi_offset 4, -4
 180              		.loc 1 211 3 view .LVU24
 181 0002 044C     		ldr	r4, .L17
 210:Src/mc_api.c  ****   MCI_ExecTorqueRamp(pMCI[M1], hFinalTorque, hDurationms);
 182              		.loc 1 210 1 view .LVU25
 183 0004 0346     		mov	r3, r0
 184 0006 0A46     		mov	r2, r1
 185              		.loc 1 211 3 view .LVU26
 186 0008 2068     		ldr	r0, [r4]
 187              	.LVL10:
 212:Src/mc_api.c  **** }
 188              		.loc 1 212 1 view .LVU27
 189 000a 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 8


 190              	.LCFI3:
 191              		.cfi_restore 4
 192              		.cfi_def_cfa_offset 0
 211:Src/mc_api.c  ****   MCI_ExecTorqueRamp(pMCI[M1], hFinalTorque, hDurationms);
 193              		.loc 1 211 3 view .LVU28
 194 000e 1946     		mov	r1, r3
 195              	.LVL11:
 211:Src/mc_api.c  ****   MCI_ExecTorqueRamp(pMCI[M1], hFinalTorque, hDurationms);
 196              		.loc 1 211 3 view .LVU29
 197 0010 FFF7FEBF 		b	MCI_ExecTorqueRamp
 198              	.LVL12:
 199              	.L18:
 200              		.align	2
 201              	.L17:
 202 0014 00000000 		.word	pMCI
 203              		.cfi_endproc
 204              	.LFE1092:
 206              		.section	.text.MC_ProgramTorqueRampMotor1_F,"ax",%progbits
 207              		.align	1
 208              		.p2align 2,,3
 209              		.weak	MC_ProgramTorqueRampMotor1_F
 210              		.syntax unified
 211              		.thumb
 212              		.thumb_func
 214              	MC_ProgramTorqueRampMotor1_F:
 215              	.LVL13:
 216              	.LFB1093:
 213:Src/mc_api.c  **** 
 214:Src/mc_api.c  **** /**
 215:Src/mc_api.c  ****   * @brief Programs a torque ramp for Motor 1 for later or immediate execution.
 216:Src/mc_api.c  ****   *
 217:Src/mc_api.c  ****   *  A torque ramp is a linear change from the current torque reference to the @p FinalTorque
 218:Src/mc_api.c  ****   * target torque reference in the given @p hDurationms time.
 219:Src/mc_api.c  ****   *
 220:Src/mc_api.c  ****   *  Invoking the MC_ProgramTorqueRampMotor1() function programs a new torque ramp
 221:Src/mc_api.c  ****   * with the provided parameters. The programmed ramp is executed immediately if
 222:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the ramp is buffered
 223:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 224:Src/mc_api.c  ****   *
 225:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 226:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 227:Src/mc_api.c  ****   *
 228:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another ramp - whether a
 229:Src/mc_api.c  ****   * torque or a speed one - or if another buffered command is programmed before the
 230:Src/mc_api.c  ****   * current one has completed, the latter replaces the former.
 231:Src/mc_api.c  ****   *
 232:Src/mc_api.c  ****   * @note A ramp cannot reverse the rotation direction if the Application is using
 233:Src/mc_api.c  ****   * sensorless motor control techniques. If the sign of the FinalTorque parameter
 234:Src/mc_api.c  ****   * differs from that of the current torque, the ramp will not complete and a Speed
 235:Src/mc_api.c  ****   * Feedback error (#MC_SPEED_FDBK) will occur when the rotation speed is about to
 236:Src/mc_api.c  ****   * reach 0 rpm.
 237:Src/mc_api.c  ****   *
 238:Src/mc_api.c  ****   * @param  FinalTorque Mechanical motor torque reference at the end of the ramp.
 239:Src/mc_api.c  ****   *         This value represents actually the Iq current expressed in Ampere.
 240:Src/mc_api.c  ****   * @param  hDurationms Duration of the ramp expressed in milliseconds. It
 241:Src/mc_api.c  ****   *         is possible to set 0 to perform an instantaneous change in the torque
 242:Src/mc_api.c  ****   *         value.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 9


 243:Src/mc_api.c  ****   */
 244:Src/mc_api.c  **** __weak void MC_ProgramTorqueRampMotor1_F(float_t FinalTorque, uint16_t hDurationms)
 245:Src/mc_api.c  **** {
 217              		.loc 1 245 1 is_stmt 1 view -0
 218              		.cfi_startproc
 219              		@ args = 0, pretend = 0, frame = 0
 220              		@ frame_needed = 0, uses_anonymous_args = 0
 221              		@ link register save eliminated.
 246:Src/mc_api.c  ****   MCI_ExecTorqueRamp_F(pMCI[M1], FinalTorque, hDurationms);
 222              		.loc 1 246 3 view .LVU31
 223 0000 024B     		ldr	r3, .L20
 245:Src/mc_api.c  ****   MCI_ExecTorqueRamp_F(pMCI[M1], FinalTorque, hDurationms);
 224              		.loc 1 245 1 is_stmt 0 view .LVU32
 225 0002 0146     		mov	r1, r0
 226              		.loc 1 246 3 view .LVU33
 227 0004 1868     		ldr	r0, [r3]
 228              	.LVL14:
 229              		.loc 1 246 3 view .LVU34
 230 0006 FFF7FEBF 		b	MCI_ExecTorqueRamp_F
 231              	.LVL15:
 232              	.L21:
 233              		.loc 1 246 3 view .LVU35
 234 000a 00BF     		.align	2
 235              	.L20:
 236 000c 00000000 		.word	pMCI
 237              		.cfi_endproc
 238              	.LFE1093:
 240              		.section	.text.MC_ProgramPositionCommandMotor1,"ax",%progbits
 241              		.align	1
 242              		.p2align 2,,3
 243              		.weak	MC_ProgramPositionCommandMotor1
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 248              	MC_ProgramPositionCommandMotor1:
 249              	.LVL16:
 250              	.LFB1094:
 247:Src/mc_api.c  **** }
 248:Src/mc_api.c  **** 
 249:Src/mc_api.c  **** /**
 250:Src/mc_api.c  ****   * @brief Programs a position command for Motor 1 for later or immediate execution.
 251:Src/mc_api.c  ****   *
 252:Src/mc_api.c  ****   *  A position command allows to program a specific movement from current position to
 253:Src/mc_api.c  ****   *  the @p fTargetPosition target mechanical angle reference in the given @p fDuration time.
 254:Src/mc_api.c  ****   *
 255:Src/mc_api.c  ****   *  Invoking the MC_ProgramPositionCommandMotor1() function programs a target position
 256:Src/mc_api.c  ****   * with the provided parameters. The programmed position is executed immediately if
 257:Src/mc_api.c  ****   * there is no movement ongoing.
 258:Src/mc_api.c  ****   *
 259:Src/mc_api.c  ****   *  The Application can check the status of the control with the MC_GetControlPositionStatusMotor1
 260:Src/mc_api.c  ****   * to know whether the motor is ready to execute a new command or not.
 261:Src/mc_api.c  ****   *
 262:Src/mc_api.c  ****   * @note when the duration is set to 0, the input target position is immediately executed.
 263:Src/mc_api.c  ****   * By calling repeatedly the command with an update of input target angle, the control will be in 
 264:Src/mc_api.c  ****   *
 265:Src/mc_api.c  ****   *
 266:Src/mc_api.c  ****   * @param  fTargetPosition Target mechanical angle reference at the end of the movement.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 10


 267:Src/mc_api.c  ****   *         This value represents the final position expressed in radian.
 268:Src/mc_api.c  ****   * @param  fDuration Duration of the movement expressed in seconds.
 269:Src/mc_api.c  ****   *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
 270:Src/mc_api.c  ****   */
 271:Src/mc_api.c  **** __weak void MC_ProgramPositionCommandMotor1(float_t fTargetPosition, float_t fDuration)
 272:Src/mc_api.c  **** {
 251              		.loc 1 272 1 is_stmt 1 view -0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 0, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 273:Src/mc_api.c  ****   MCI_ExecPositionCommand(pMCI[M1], fTargetPosition, fDuration);
 256              		.loc 1 273 3 view .LVU37
 257 0000 014B     		ldr	r3, .L23
 258 0002 1868     		ldr	r0, [r3]
 259 0004 FFF7FEBF 		b	MCI_ExecPositionCommand
 260              	.LVL17:
 261              	.L24:
 262              		.loc 1 273 3 is_stmt 0 view .LVU38
 263              		.align	2
 264              	.L23:
 265 0008 00000000 		.word	pMCI
 266              		.cfi_endproc
 267              	.LFE1094:
 269              		.section	.text.MC_SetCurrentReferenceMotor1,"ax",%progbits
 270              		.align	1
 271              		.p2align 2,,3
 272              		.weak	MC_SetCurrentReferenceMotor1
 273              		.syntax unified
 274              		.thumb
 275              		.thumb_func
 277              	MC_SetCurrentReferenceMotor1:
 278              	.LFB1095:
 274:Src/mc_api.c  **** }
 275:Src/mc_api.c  **** 
 276:Src/mc_api.c  **** /**
 277:Src/mc_api.c  ****   * @brief Programs the current reference to Motor 1 for later or immediate execution.
 278:Src/mc_api.c  ****   *
 279:Src/mc_api.c  ****   *  The current reference to consider is made of the $I_d$ and $I_q$ current components.
 280:Src/mc_api.c  ****   *
 281:Src/mc_api.c  ****   *  Invoking the MC_SetCurrentReferenceMotor1() function programs a current reference
 282:Src/mc_api.c  ****   * with the provided parameters. The programmed reference is executed immediately if
 283:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the command is buffered
 284:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 285:Src/mc_api.c  ****   *
 286:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 287:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
 288:Src/mc_api.c  ****   *
 289:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another buffered command is
 290:Src/mc_api.c  ****   * programmed before the current one has completed, the latter replaces the former.
 291:Src/mc_api.c  ****   *
 292:Src/mc_api.c  ****   * @param  Iqdref current reference in the Direct-Quadratic reference frame. Expressed
 293:Src/mc_api.c  ****   *         in the qd_t format.
 294:Src/mc_api.c  ****   */
 295:Src/mc_api.c  **** __weak void MC_SetCurrentReferenceMotor1(qd_t Iqdref)
 296:Src/mc_api.c  **** {
 279              		.loc 1 296 1 is_stmt 1 view -0
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 11


 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 8
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              		@ link register save eliminated.
 297:Src/mc_api.c  ****   MCI_SetCurrentReferences(pMCI[M1], Iqdref);
 284              		.loc 1 297 3 view .LVU40
 296:Src/mc_api.c  ****   MCI_SetCurrentReferences(pMCI[M1], Iqdref);
 285              		.loc 1 296 1 is_stmt 0 view .LVU41
 286 0000 82B0     		sub	sp, sp, #8
 287              	.LCFI4:
 288              		.cfi_def_cfa_offset 8
 289              		.loc 1 297 3 view .LVU42
 290 0002 034B     		ldr	r3, .L27
 296:Src/mc_api.c  ****   MCI_SetCurrentReferences(pMCI[M1], Iqdref);
 291              		.loc 1 296 1 view .LVU43
 292 0004 0190     		str	r0, [sp, #4]
 293              		.loc 1 297 3 view .LVU44
 294 0006 0146     		mov	r1, r0
 295 0008 1868     		ldr	r0, [r3]
 298:Src/mc_api.c  **** }
 296              		.loc 1 298 1 view .LVU45
 297 000a 02B0     		add	sp, sp, #8
 298              	.LCFI5:
 299              		.cfi_def_cfa_offset 0
 300              		@ sp needed
 297:Src/mc_api.c  ****   MCI_SetCurrentReferences(pMCI[M1], Iqdref);
 301              		.loc 1 297 3 view .LVU46
 302 000c FFF7FEBF 		b	MCI_SetCurrentReferences
 303              	.LVL18:
 304              	.L28:
 305              		.align	2
 306              	.L27:
 307 0010 00000000 		.word	pMCI
 308              		.cfi_endproc
 309              	.LFE1095:
 311              		.section	.text.MC_SetCurrentReferenceMotor1_F,"ax",%progbits
 312              		.align	1
 313              		.p2align 2,,3
 314              		.weak	MC_SetCurrentReferenceMotor1_F
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 319              	MC_SetCurrentReferenceMotor1_F:
 320              	.LFB1096:
 299:Src/mc_api.c  **** 
 300:Src/mc_api.c  **** /**
 301:Src/mc_api.c  ****   * @brief Programs the current reference to Motor 1 for later or immediate execution.
 302:Src/mc_api.c  ****   *
 303:Src/mc_api.c  ****   *  The current reference to consider is made of the $I_d$ and $I_q$ current components.
 304:Src/mc_api.c  ****   *
 305:Src/mc_api.c  ****   *  Invoking the MC_SetCurrentReferenceMotor1_F() function programs a current reference
 306:Src/mc_api.c  ****   * with the provided parameters. The programmed reference is executed immediately if
 307:Src/mc_api.c  ****   * Motor 1's state machine is in the #RUN states. Otherwise, the command is buffered
 308:Src/mc_api.c  ****   * and will be executed when the state machine reaches any of the aforementioned state.
 309:Src/mc_api.c  ****   *
 310:Src/mc_api.c  ****   *  The Application can check the status of the command with the MC_GetCommandStateMotor1()
 311:Src/mc_api.c  ****   * to know whether the last command was executed immediately or not.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 12


 312:Src/mc_api.c  ****   *
 313:Src/mc_api.c  ****   * Only one command can be buffered at any given time. If another buffered command is
 314:Src/mc_api.c  ****   * programmed before the current one has completed, the latter replaces the former.
 315:Src/mc_api.c  ****   *
 316:Src/mc_api.c  ****   * @param  IqdRef current reference in the Direct-Quadratic reference frame. Expressed
 317:Src/mc_api.c  ****   *         in the qd_f_t format.
 318:Src/mc_api.c  ****   */
 319:Src/mc_api.c  **** __weak void MC_SetCurrentReferenceMotor1_F(qd_f_t IqdRef)
 320:Src/mc_api.c  **** {
 321              		.loc 1 320 1 is_stmt 1 view -0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 8
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 321:Src/mc_api.c  ****   MCI_SetCurrentReferences_F(pMCI[M1], IqdRef);
 326              		.loc 1 321 3 view .LVU48
 327 0000 024B     		ldr	r3, .L31
 328 0002 1868     		ldr	r0, [r3]
 320:Src/mc_api.c  ****   MCI_SetCurrentReferences_F(pMCI[M1], IqdRef);
 329              		.loc 1 320 1 is_stmt 0 view .LVU49
 330 0004 82B0     		sub	sp, sp, #8
 331              	.LCFI6:
 332              		.cfi_def_cfa_offset 8
 322:Src/mc_api.c  **** }
 333              		.loc 1 322 1 view .LVU50
 334 0006 02B0     		add	sp, sp, #8
 335              	.LCFI7:
 336              		.cfi_def_cfa_offset 0
 337              		@ sp needed
 321:Src/mc_api.c  ****   MCI_SetCurrentReferences_F(pMCI[M1], IqdRef);
 338              		.loc 1 321 3 view .LVU51
 339 0008 FFF7FEBF 		b	MCI_SetCurrentReferences_F
 340              	.LVL19:
 341              	.L32:
 342              		.align	2
 343              	.L31:
 344 000c 00000000 		.word	pMCI
 345              		.cfi_endproc
 346              	.LFE1096:
 348              		.section	.text.MC_GetCommandStateMotor1,"ax",%progbits
 349              		.align	1
 350              		.p2align 2,,3
 351              		.weak	MC_GetCommandStateMotor1
 352              		.syntax unified
 353              		.thumb
 354              		.thumb_func
 356              	MC_GetCommandStateMotor1:
 357              	.LFB1097:
 323:Src/mc_api.c  **** 
 324:Src/mc_api.c  **** /**
 325:Src/mc_api.c  ****   * @brief  Returns the status of the last buffered command for Motor 1.
 326:Src/mc_api.c  ****   *
 327:Src/mc_api.c  ****   * The status can be one of the following values:
 328:Src/mc_api.c  ****   * - #MCI_BUFFER_EMPTY: no buffered command is currently programmed.
 329:Src/mc_api.c  ****   * - #MCI_COMMAND_NOT_ALREADY_EXECUTED: A command has been buffered but the conditions for its
 330:Src/mc_api.c  ****   *   execution have not occurred yet. The command is still in the buffer, pending execution.
 331:Src/mc_api.c  ****   * - #MCI_COMMAND_EXECUTED_SUCCESSFULLY: the last buffered command has been executed successfully.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 13


 332:Src/mc_api.c  ****   *   In this case calling this function resets the command state to #MCI_BUFFER_EMPTY.
 333:Src/mc_api.c  ****   * - #MCI_COMMAND_EXECUTED_UNSUCCESSFULLY: the buffered command has been executed unsuccessfully.
 334:Src/mc_api.c  ****   *   In this case calling this function resets the command state to #MCI_BUFFER_EMPTY.
 335:Src/mc_api.c  ****   */
 336:Src/mc_api.c  **** __weak MCI_CommandState_t  MC_GetCommandStateMotor1(void)
 337:Src/mc_api.c  **** {
 358              		.loc 1 337 1 is_stmt 1 view -0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
 338:Src/mc_api.c  ****   return (MCI_IsCommandAcknowledged(pMCI[M1]));
 363              		.loc 1 338 3 view .LVU53
 364              		.loc 1 338 11 is_stmt 0 view .LVU54
 365 0000 014B     		ldr	r3, .L34
 366 0002 1868     		ldr	r0, [r3]
 367 0004 FFF7FEBF 		b	MCI_IsCommandAcknowledged
 368              	.LVL20:
 369              	.L35:
 370              		.align	2
 371              	.L34:
 372 0008 00000000 		.word	pMCI
 373              		.cfi_endproc
 374              	.LFE1097:
 376              		.section	.text.MC_StopSpeedRampMotor1,"ax",%progbits
 377              		.align	1
 378              		.p2align 2,,3
 379              		.weak	MC_StopSpeedRampMotor1
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 384              	MC_StopSpeedRampMotor1:
 385              	.LFB1098:
 339:Src/mc_api.c  **** }
 340:Src/mc_api.c  **** 
 341:Src/mc_api.c  **** /**
 342:Src/mc_api.c  ****  * @brief Stops the execution of the on-going speed ramp for Motor 1, if any.
 343:Src/mc_api.c  ****  *
 344:Src/mc_api.c  ****  *  If a speed ramp is currently being executed, it is immediately stopped, the rotation
 345:Src/mc_api.c  ****  * speed of Motor 1 is maintained to its current value and true is returned. If no speed
 346:Src/mc_api.c  ****  * ramp is on-going, nothing is done and false is returned.
 347:Src/mc_api.c  ****  *
 348:Src/mc_api.c  ****  * @deprecated This function is deprecated and should not be used anymore. It will be
 349:Src/mc_api.c  ****  *             removed in a future version of the MCSDK. Use MC_StopRampMotor1() instead.
 350:Src/mc_api.c  ****  */
 351:Src/mc_api.c  **** __weak bool MC_StopSpeedRampMotor1(void)
 352:Src/mc_api.c  **** {
 386              		.loc 1 352 1 is_stmt 1 view -0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 353:Src/mc_api.c  ****   return (MCI_StopSpeedRamp(pMCI[M1]));
 391              		.loc 1 353 3 view .LVU56
 392              		.loc 1 353 11 is_stmt 0 view .LVU57
 393 0000 014B     		ldr	r3, .L37
 394 0002 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 14


 395 0004 FFF7FEBF 		b	MCI_StopSpeedRamp
 396              	.LVL21:
 397              	.L38:
 398              		.align	2
 399              	.L37:
 400 0008 00000000 		.word	pMCI
 401              		.cfi_endproc
 402              	.LFE1098:
 404              		.section	.text.MC_StopRampMotor1,"ax",%progbits
 405              		.align	1
 406              		.p2align 2,,3
 407              		.weak	MC_StopRampMotor1
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 412              	MC_StopRampMotor1:
 413              	.LFB1099:
 354:Src/mc_api.c  **** }
 355:Src/mc_api.c  **** 
 356:Src/mc_api.c  **** /**
 357:Src/mc_api.c  ****  * @brief Stops the execution of the on-going ramp for Motor 1, if any.
 358:Src/mc_api.c  ****  *
 359:Src/mc_api.c  ****  *  If a ramp is currently being executed, it is immediately stopped, the torque or the speed
 360:Src/mc_api.c  ****  *  of Motor 1 is maintained to its current value.
 361:Src/mc_api.c  ****  */
 362:Src/mc_api.c  **** __weak void MC_StopRampMotor1(void)
 363:Src/mc_api.c  **** {
 414              		.loc 1 363 1 is_stmt 1 view -0
 415              		.cfi_startproc
 416              		@ args = 0, pretend = 0, frame = 0
 417              		@ frame_needed = 0, uses_anonymous_args = 0
 418              		@ link register save eliminated.
 364:Src/mc_api.c  ****   MCI_StopRamp(pMCI[M1]);
 419              		.loc 1 364 3 view .LVU59
 420 0000 014B     		ldr	r3, .L40
 421 0002 1868     		ldr	r0, [r3]
 422 0004 FFF7FEBF 		b	MCI_StopRamp
 423              	.LVL22:
 424              	.L41:
 425              		.align	2
 426              	.L40:
 427 0008 00000000 		.word	pMCI
 428              		.cfi_endproc
 429              	.LFE1099:
 431              		.section	.text.MC_HasRampCompletedMotor1,"ax",%progbits
 432              		.align	1
 433              		.p2align 2,,3
 434              		.weak	MC_HasRampCompletedMotor1
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 439              	MC_HasRampCompletedMotor1:
 440              	.LFB1100:
 365:Src/mc_api.c  **** }
 366:Src/mc_api.c  **** 
 367:Src/mc_api.c  **** /**
 368:Src/mc_api.c  ****  * @brief Returns true if the last ramp submited for Motor 1 has completed, false otherwise
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 15


 369:Src/mc_api.c  ****  */
 370:Src/mc_api.c  **** __weak bool MC_HasRampCompletedMotor1(void)
 371:Src/mc_api.c  **** {
 441              		.loc 1 371 1 view -0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445              		@ link register save eliminated.
 372:Src/mc_api.c  ****   return (MCI_RampCompleted(pMCI[M1]));
 446              		.loc 1 372 3 view .LVU61
 447              		.loc 1 372 11 is_stmt 0 view .LVU62
 448 0000 014B     		ldr	r3, .L43
 449 0002 1868     		ldr	r0, [r3]
 450 0004 FFF7FEBF 		b	MCI_RampCompleted
 451              	.LVL23:
 452              	.L44:
 453              		.align	2
 454              	.L43:
 455 0008 00000000 		.word	pMCI
 456              		.cfi_endproc
 457              	.LFE1100:
 459              		.section	.text.MC_GetMecSpeedReferenceMotor1,"ax",%progbits
 460              		.align	1
 461              		.p2align 2,,3
 462              		.weak	MC_GetMecSpeedReferenceMotor1
 463              		.syntax unified
 464              		.thumb
 465              		.thumb_func
 467              	MC_GetMecSpeedReferenceMotor1:
 468              	.LFB1101:
 373:Src/mc_api.c  **** }
 374:Src/mc_api.c  **** 
 375:Src/mc_api.c  **** /**
 376:Src/mc_api.c  ****  *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in the u
 377:Src/mc_api.c  ****  */
 378:Src/mc_api.c  **** __weak int16_t MC_GetMecSpeedReferenceMotor1(void)
 379:Src/mc_api.c  **** {
 469              		.loc 1 379 1 is_stmt 1 view -0
 470              		.cfi_startproc
 471              		@ args = 0, pretend = 0, frame = 0
 472              		@ frame_needed = 0, uses_anonymous_args = 0
 473              		@ link register save eliminated.
 380:Src/mc_api.c  ****   return (MCI_GetMecSpeedRefUnit(pMCI[M1]));
 474              		.loc 1 380 3 view .LVU64
 475              		.loc 1 380 11 is_stmt 0 view .LVU65
 476 0000 014B     		ldr	r3, .L46
 477 0002 1868     		ldr	r0, [r3]
 478 0004 FFF7FEBF 		b	MCI_GetMecSpeedRefUnit
 479              	.LVL24:
 480              	.L47:
 481              		.align	2
 482              	.L46:
 483 0008 00000000 		.word	pMCI
 484              		.cfi_endproc
 485              	.LFE1101:
 487              		.section	.text.MC_GetMecSpeedReferenceMotor1_F,"ax",%progbits
 488              		.align	1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 16


 489              		.p2align 2,,3
 490              		.weak	MC_GetMecSpeedReferenceMotor1_F
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 495              	MC_GetMecSpeedReferenceMotor1_F:
 496              	.LFB1102:
 381:Src/mc_api.c  **** }
 382:Src/mc_api.c  **** 
 383:Src/mc_api.c  **** /**
 384:Src/mc_api.c  ****  *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 385:Src/mc_api.c  ****  */
 386:Src/mc_api.c  **** __weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
 387:Src/mc_api.c  **** {
 497              		.loc 1 387 1 is_stmt 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 388:Src/mc_api.c  ****   return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 502              		.loc 1 388 3 view .LVU67
 503              		.loc 1 388 11 is_stmt 0 view .LVU68
 504 0000 014B     		ldr	r3, .L49
 505 0002 1868     		ldr	r0, [r3]
 506 0004 FFF7FEBF 		b	MCI_GetMecSpeedRef_F
 507              	.LVL25:
 508              	.L50:
 509              		.align	2
 510              	.L49:
 511 0008 00000000 		.word	pMCI
 512              		.cfi_endproc
 513              	.LFE1102:
 515              		.section	.text.MC_GetMecSpeedAverageMotor1,"ax",%progbits
 516              		.align	1
 517              		.p2align 2,,3
 518              		.weak	MC_GetMecSpeedAverageMotor1
 519              		.syntax unified
 520              		.thumb
 521              		.thumb_func
 523              	MC_GetMecSpeedAverageMotor1:
 524              	.LFB1103:
 389:Src/mc_api.c  **** }
 390:Src/mc_api.c  **** 
 391:Src/mc_api.c  **** /**
 392:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the un
 393:Src/mc_api.c  ****  */
 394:Src/mc_api.c  **** __weak int16_t MC_GetMecSpeedAverageMotor1(void)
 395:Src/mc_api.c  **** {
 525              		.loc 1 395 1 is_stmt 1 view -0
 526              		.cfi_startproc
 527              		@ args = 0, pretend = 0, frame = 0
 528              		@ frame_needed = 0, uses_anonymous_args = 0
 529              		@ link register save eliminated.
 396:Src/mc_api.c  ****   return (MCI_GetAvrgMecSpeedUnit(pMCI[M1]));
 530              		.loc 1 396 3 view .LVU70
 531              		.loc 1 396 11 is_stmt 0 view .LVU71
 532 0000 014B     		ldr	r3, .L52
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 17


 533 0002 1868     		ldr	r0, [r3]
 534 0004 FFF7FEBF 		b	MCI_GetAvrgMecSpeedUnit
 535              	.LVL26:
 536              	.L53:
 537              		.align	2
 538              	.L52:
 539 0008 00000000 		.word	pMCI
 540              		.cfi_endproc
 541              	.LFE1103:
 543              		.section	.text.MC_GetAverageMecSpeedMotor1_F,"ax",%progbits
 544              		.align	1
 545              		.p2align 2,,3
 546              		.weak	MC_GetAverageMecSpeedMotor1_F
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 551              	MC_GetAverageMecSpeedMotor1_F:
 552              	.LFB1104:
 397:Src/mc_api.c  **** }
 398:Src/mc_api.c  **** 
 399:Src/mc_api.c  **** /**
 400:Src/mc_api.c  ****  * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in rpm.
 401:Src/mc_api.c  ****  */
 402:Src/mc_api.c  **** __weak float_t MC_GetAverageMecSpeedMotor1_F(void)
 403:Src/mc_api.c  **** {
 553              		.loc 1 403 1 is_stmt 1 view -0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 0
 556              		@ frame_needed = 0, uses_anonymous_args = 0
 557              		@ link register save eliminated.
 404:Src/mc_api.c  ****   return (MCI_GetAvrgMecSpeed_F(pMCI[M1]));
 558              		.loc 1 404 3 view .LVU73
 559              		.loc 1 404 11 is_stmt 0 view .LVU74
 560 0000 014B     		ldr	r3, .L55
 561 0002 1868     		ldr	r0, [r3]
 562 0004 FFF7FEBF 		b	MCI_GetAvrgMecSpeed_F
 563              	.LVL27:
 564              	.L56:
 565              		.align	2
 566              	.L55:
 567 0008 00000000 		.word	pMCI
 568              		.cfi_endproc
 569              	.LFE1104:
 571              		.section	.text.MC_GetLastRampFinalSpeedMotor1,"ax",%progbits
 572              		.align	1
 573              		.p2align 2,,3
 574              		.weak	MC_GetLastRampFinalSpeedMotor1
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 579              	MC_GetLastRampFinalSpeedMotor1:
 580              	.LFB1105:
 405:Src/mc_api.c  **** }
 406:Src/mc_api.c  **** 
 407:Src/mc_api.c  **** /**
 408:Src/mc_api.c  ****  * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed 
 409:Src/mc_api.c  ****  */
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 18


 410:Src/mc_api.c  **** __weak int16_t MC_GetLastRampFinalSpeedMotor1(void)
 411:Src/mc_api.c  **** {
 581              		.loc 1 411 1 is_stmt 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585              		@ link register save eliminated.
 412:Src/mc_api.c  ****   return (MCI_GetLastRampFinalSpeed(pMCI[M1]));
 586              		.loc 1 412 3 view .LVU76
 587              		.loc 1 412 11 is_stmt 0 view .LVU77
 588 0000 014B     		ldr	r3, .L58
 589 0002 1868     		ldr	r0, [r3]
 590 0004 FFF7FEBF 		b	MCI_GetLastRampFinalSpeed
 591              	.LVL28:
 592              	.L59:
 593              		.align	2
 594              	.L58:
 595 0008 00000000 		.word	pMCI
 596              		.cfi_endproc
 597              	.LFE1105:
 599              		.section	.text.MC_GetLastRampFinalSpeedM1_F,"ax",%progbits
 600              		.align	1
 601              		.p2align 2,,3
 602              		.weak	MC_GetLastRampFinalSpeedM1_F
 603              		.syntax unified
 604              		.thumb
 605              		.thumb_func
 607              	MC_GetLastRampFinalSpeedM1_F:
 608              	.LFB1106:
 413:Src/mc_api.c  **** }
 414:Src/mc_api.c  **** 
 415:Src/mc_api.c  **** /**
 416:Src/mc_api.c  ****  * @brief Returns the final speed of the last ramp programmed for Motor 1 if this ramp was a speed 
 417:Src/mc_api.c  ****  */
 418:Src/mc_api.c  **** __weak float_t MC_GetLastRampFinalSpeedM1_F(void)
 419:Src/mc_api.c  **** {
 609              		.loc 1 419 1 is_stmt 1 view -0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 420:Src/mc_api.c  ****   return (MCI_GetLastRampFinalSpeed_F(pMCI[M1]));
 614              		.loc 1 420 3 view .LVU79
 615              		.loc 1 420 11 is_stmt 0 view .LVU80
 616 0000 014B     		ldr	r3, .L61
 617 0002 1868     		ldr	r0, [r3]
 618 0004 FFF7FEBF 		b	MCI_GetLastRampFinalSpeed_F
 619              	.LVL29:
 620              	.L62:
 621              		.align	2
 622              	.L61:
 623 0008 00000000 		.word	pMCI
 624              		.cfi_endproc
 625              	.LFE1106:
 627              		.section	.text.MC_GetControlModeMotor1,"ax",%progbits
 628              		.align	1
 629              		.p2align 2,,3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 19


 630              		.weak	MC_GetControlModeMotor1
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 635              	MC_GetControlModeMotor1:
 636              	.LFB1107:
 421:Src/mc_api.c  **** }
 422:Src/mc_api.c  **** 
 423:Src/mc_api.c  **** /**
 424:Src/mc_api.c  ****  * @brief Returns the Control Mode used for Motor 1 (either Speed or Torque)
 425:Src/mc_api.c  ****  */
 426:Src/mc_api.c  **** __weak MC_ControlMode_t MC_GetControlModeMotor1(void)
 427:Src/mc_api.c  **** {
 637              		.loc 1 427 1 is_stmt 1 view -0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 0
 640              		@ frame_needed = 0, uses_anonymous_args = 0
 641              		@ link register save eliminated.
 428:Src/mc_api.c  ****   return (MCI_GetControlMode(pMCI[M1]));
 642              		.loc 1 428 3 view .LVU82
 643              		.loc 1 428 11 is_stmt 0 view .LVU83
 644 0000 014B     		ldr	r3, .L64
 645 0002 1868     		ldr	r0, [r3]
 646 0004 FFF7FEBF 		b	MCI_GetControlMode
 647              	.LVL30:
 648              	.L65:
 649              		.align	2
 650              	.L64:
 651 0008 00000000 		.word	pMCI
 652              		.cfi_endproc
 653              	.LFE1107:
 655              		.section	.text.MC_GetImposedDirectionMotor1,"ax",%progbits
 656              		.align	1
 657              		.p2align 2,,3
 658              		.weak	MC_GetImposedDirectionMotor1
 659              		.syntax unified
 660              		.thumb
 661              		.thumb_func
 663              	MC_GetImposedDirectionMotor1:
 664              	.LFB1108:
 429:Src/mc_api.c  **** }
 430:Src/mc_api.c  **** 
 431:Src/mc_api.c  **** /**
 432:Src/mc_api.c  ****  * @brief Returns the rotation direction imposed by the last command on Motor 1
 433:Src/mc_api.c  ****  *
 434:Src/mc_api.c  ****  * The last command is either MC_ProgramSpeedRampMotor1(), MC_ProgramTorqueRampMotor1() or
 435:Src/mc_api.c  ****  * MC_SetCurrentReferenceMotor1().
 436:Src/mc_api.c  ****  *
 437:Src/mc_api.c  ****  * The function returns -1 if the sign of the final speed, the final torque or the Iq current
 438:Src/mc_api.c  ****  * reference component of the last command is negative. Otherwise, 1 is returned.
 439:Src/mc_api.c  ****  *
 440:Src/mc_api.c  ****  * @note if no such command has ever been submitted, 1 is returned as well.
 441:Src/mc_api.c  ****  */
 442:Src/mc_api.c  **** __weak int16_t MC_GetImposedDirectionMotor1(void)
 443:Src/mc_api.c  **** {
 665              		.loc 1 443 1 is_stmt 1 view -0
 666              		.cfi_startproc
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 20


 667              		@ args = 0, pretend = 0, frame = 0
 668              		@ frame_needed = 0, uses_anonymous_args = 0
 669              		@ link register save eliminated.
 444:Src/mc_api.c  ****   return (MCI_GetImposedMotorDirection(pMCI[M1]));
 670              		.loc 1 444 3 view .LVU85
 671              		.loc 1 444 11 is_stmt 0 view .LVU86
 672 0000 014B     		ldr	r3, .L67
 673 0002 1868     		ldr	r0, [r3]
 674 0004 FFF7FEBF 		b	MCI_GetImposedMotorDirection
 675              	.LVL31:
 676              	.L68:
 677              		.align	2
 678              	.L67:
 679 0008 00000000 		.word	pMCI
 680              		.cfi_endproc
 681              	.LFE1108:
 683              		.section	.text.MC_GetSpeedSensorReliabilityMotor1,"ax",%progbits
 684              		.align	1
 685              		.p2align 2,,3
 686              		.weak	MC_GetSpeedSensorReliabilityMotor1
 687              		.syntax unified
 688              		.thumb
 689              		.thumb_func
 691              	MC_GetSpeedSensorReliabilityMotor1:
 692              	.LFB1109:
 445:Src/mc_api.c  **** }
 446:Src/mc_api.c  **** 
 447:Src/mc_api.c  **** /**
 448:Src/mc_api.c  ****  * @brief Returns true if the speed sensor used for Motor 1 is reliable, false otherwise
 449:Src/mc_api.c  ****  */
 450:Src/mc_api.c  **** __weak bool MC_GetSpeedSensorReliabilityMotor1(void)
 451:Src/mc_api.c  **** {
 693              		.loc 1 451 1 is_stmt 1 view -0
 694              		.cfi_startproc
 695              		@ args = 0, pretend = 0, frame = 0
 696              		@ frame_needed = 0, uses_anonymous_args = 0
 697              		@ link register save eliminated.
 452:Src/mc_api.c  ****   return (MCI_GetSpdSensorReliability(pMCI[M1]));
 698              		.loc 1 452 3 view .LVU88
 699              		.loc 1 452 11 is_stmt 0 view .LVU89
 700 0000 014B     		ldr	r3, .L70
 701 0002 1868     		ldr	r0, [r3]
 702 0004 FFF7FEBF 		b	MCI_GetSpdSensorReliability
 703              	.LVL32:
 704              	.L71:
 705              		.align	2
 706              	.L70:
 707 0008 00000000 		.word	pMCI
 708              		.cfi_endproc
 709              	.LFE1109:
 711              		.section	.text.MC_GetPhaseCurrentAmplitudeMotor1,"ax",%progbits
 712              		.align	1
 713              		.p2align 2,,3
 714              		.weak	MC_GetPhaseCurrentAmplitudeMotor1
 715              		.syntax unified
 716              		.thumb
 717              		.thumb_func
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 21


 719              	MC_GetPhaseCurrentAmplitudeMotor1:
 720              	.LFB1110:
 453:Src/mc_api.c  **** }
 454:Src/mc_api.c  **** 
 455:Src/mc_api.c  **** /**
 456:Src/mc_api.c  ****  * @brief returns the amplitude of the phase current injected in Motor 1
 457:Src/mc_api.c  ****  *
 458:Src/mc_api.c  ****  * The returned amplitude (0-to-peak) is expressed in s16A unit. To convert it to amperes, use the 
 459:Src/mc_api.c  ****  *
 460:Src/mc_api.c  ****  * @f[
 461:Src/mc_api.c  ****  * I_{Amps} = \frac{ I_{s16A} \times V_{dd}}{ 65536 \times R_{shunt} \times A_{op} }
 462:Src/mc_api.c  ****  * @f]
 463:Src/mc_api.c  ****  *
 464:Src/mc_api.c  ****  */
 465:Src/mc_api.c  **** __weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
 466:Src/mc_api.c  **** {
 721              		.loc 1 466 1 is_stmt 1 view -0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725              		@ link register save eliminated.
 467:Src/mc_api.c  ****   return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 726              		.loc 1 467 3 view .LVU91
 727              		.loc 1 467 11 is_stmt 0 view .LVU92
 728 0000 014B     		ldr	r3, .L73
 729 0002 1868     		ldr	r0, [r3]
 730 0004 FFF7FEBF 		b	MCI_GetPhaseCurrentAmplitude
 731              	.LVL33:
 732              	.L74:
 733              		.align	2
 734              	.L73:
 735 0008 00000000 		.word	pMCI
 736              		.cfi_endproc
 737              	.LFE1110:
 739              		.section	.text.MC_GetPhaseVoltageAmplitudeMotor1,"ax",%progbits
 740              		.align	1
 741              		.p2align 2,,3
 742              		.weak	MC_GetPhaseVoltageAmplitudeMotor1
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 747              	MC_GetPhaseVoltageAmplitudeMotor1:
 748              	.LFB1111:
 468:Src/mc_api.c  **** }
 469:Src/mc_api.c  **** 
 470:Src/mc_api.c  **** /**
 471:Src/mc_api.c  ****  * @brief returns the amplitude of the phase voltage applied to Motor 1
 472:Src/mc_api.c  ****  *
 473:Src/mc_api.c  ****  * The returned amplitude (0-to-peak) is expressed in s16V unit. To convert it to volts, use the fo
 474:Src/mc_api.c  ****  *
 475:Src/mc_api.c  ****  * @f[
 476:Src/mc_api.c  ****  * U_{Volts} = \frac{ U_{s16V} \times V_{bus}}{ \sqrt{3} \times 32768  }
 477:Src/mc_api.c  ****  * @f]
 478:Src/mc_api.c  ****  *
 479:Src/mc_api.c  ****  */
 480:Src/mc_api.c  **** __weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
 481:Src/mc_api.c  **** {
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 22


 749              		.loc 1 481 1 is_stmt 1 view -0
 750              		.cfi_startproc
 751              		@ args = 0, pretend = 0, frame = 0
 752              		@ frame_needed = 0, uses_anonymous_args = 0
 753              		@ link register save eliminated.
 482:Src/mc_api.c  ****   return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 754              		.loc 1 482 3 view .LVU94
 755              		.loc 1 482 11 is_stmt 0 view .LVU95
 756 0000 014B     		ldr	r3, .L76
 757 0002 1868     		ldr	r0, [r3]
 758 0004 FFF7FEBF 		b	MCI_GetPhaseVoltageAmplitude
 759              	.LVL34:
 760              	.L77:
 761              		.align	2
 762              	.L76:
 763 0008 00000000 		.word	pMCI
 764              		.cfi_endproc
 765              	.LFE1111:
 767              		.section	.text.MC_GetIabMotor1,"ax",%progbits
 768              		.align	1
 769              		.p2align 2,,3
 770              		.weak	MC_GetIabMotor1
 771              		.syntax unified
 772              		.thumb
 773              		.thumb_func
 775              	MC_GetIabMotor1:
 776              	.LFB1112:
 483:Src/mc_api.c  **** }
 484:Src/mc_api.c  **** 
 485:Src/mc_api.c  **** /**
 486:Src/mc_api.c  ****  * @brief returns Ia and Ib current values for Motor 1 in ab_t format
 487:Src/mc_api.c  ****  */
 488:Src/mc_api.c  **** __weak ab_t MC_GetIabMotor1(void)
 489:Src/mc_api.c  **** {
 777              		.loc 1 489 1 is_stmt 1 view -0
 778              		.cfi_startproc
 779              		@ args = 0, pretend = 0, frame = 8
 780              		@ frame_needed = 0, uses_anonymous_args = 0
 781              		@ link register save eliminated.
 490:Src/mc_api.c  ****   return (MCI_GetIab(pMCI[M1]));
 782              		.loc 1 490 3 view .LVU97
 783              		.loc 1 490 11 is_stmt 0 view .LVU98
 784 0000 024B     		ldr	r3, .L80
 785 0002 1868     		ldr	r0, [r3]
 489:Src/mc_api.c  ****   return (MCI_GetIab(pMCI[M1]));
 786              		.loc 1 489 1 view .LVU99
 787 0004 82B0     		sub	sp, sp, #8
 788              	.LCFI8:
 789              		.cfi_def_cfa_offset 8
 491:Src/mc_api.c  **** }
 790              		.loc 1 491 1 view .LVU100
 791 0006 02B0     		add	sp, sp, #8
 792              	.LCFI9:
 793              		.cfi_def_cfa_offset 0
 794              		@ sp needed
 490:Src/mc_api.c  ****   return (MCI_GetIab(pMCI[M1]));
 795              		.loc 1 490 11 view .LVU101
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 23


 796 0008 FFF7FEBF 		b	MCI_GetIab
 797              	.LVL35:
 798              	.L81:
 799              		.align	2
 800              	.L80:
 801 000c 00000000 		.word	pMCI
 802              		.cfi_endproc
 803              	.LFE1112:
 805              		.section	.text.MC_GetIabMotor1_F,"ax",%progbits
 806              		.align	1
 807              		.p2align 2,,3
 808              		.weak	MC_GetIabMotor1_F
 809              		.syntax unified
 810              		.thumb
 811              		.thumb_func
 813              	MC_GetIabMotor1_F:
 814              	.LFB1113:
 492:Src/mc_api.c  **** 
 493:Src/mc_api.c  **** /**
 494:Src/mc_api.c  ****  * @brief returns Ia and Ib current values for Motor 1 in ab_f_t format
 495:Src/mc_api.c  ****  */
 496:Src/mc_api.c  **** __weak ab_f_t MC_GetIabMotor1_F(void)
 497:Src/mc_api.c  **** {
 815              		.loc 1 497 1 is_stmt 1 view -0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 8
 818              		@ frame_needed = 0, uses_anonymous_args = 0
 819              		@ link register save eliminated.
 498:Src/mc_api.c  ****   return (MCI_GetIab_F(pMCI[M1]));
 820              		.loc 1 498 3 view .LVU103
 821              		.loc 1 498 11 is_stmt 0 view .LVU104
 822 0000 024B     		ldr	r3, .L84
 823 0002 1868     		ldr	r0, [r3]
 497:Src/mc_api.c  ****   return (MCI_GetIab_F(pMCI[M1]));
 824              		.loc 1 497 1 view .LVU105
 825 0004 82B0     		sub	sp, sp, #8
 826              	.LCFI10:
 827              		.cfi_def_cfa_offset 8
 499:Src/mc_api.c  **** }
 828              		.loc 1 499 1 view .LVU106
 829 0006 02B0     		add	sp, sp, #8
 830              	.LCFI11:
 831              		.cfi_def_cfa_offset 0
 832              		@ sp needed
 498:Src/mc_api.c  ****   return (MCI_GetIab_F(pMCI[M1]));
 833              		.loc 1 498 11 view .LVU107
 834 0008 FFF7FEBF 		b	MCI_GetIab_F
 835              	.LVL36:
 836              	.L85:
 837              		.align	2
 838              	.L84:
 839 000c 00000000 		.word	pMCI
 840              		.cfi_endproc
 841              	.LFE1113:
 843              		.section	.text.MC_GetIalphabetaMotor1,"ax",%progbits
 844              		.align	1
 845              		.p2align 2,,3
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 24


 846              		.weak	MC_GetIalphabetaMotor1
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 851              	MC_GetIalphabetaMotor1:
 852              	.LFB1114:
 500:Src/mc_api.c  **** 
 501:Src/mc_api.c  **** /**
 502:Src/mc_api.c  ****  * @brief returns Ialpha and Ibeta current values for Motor 1 in alphabeta_t format
 503:Src/mc_api.c  ****  */
 504:Src/mc_api.c  **** __weak alphabeta_t MC_GetIalphabetaMotor1(void)
 505:Src/mc_api.c  **** {
 853              		.loc 1 505 1 is_stmt 1 view -0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 8
 856              		@ frame_needed = 0, uses_anonymous_args = 0
 857              		@ link register save eliminated.
 506:Src/mc_api.c  ****   return (MCI_GetIalphabeta(pMCI[M1]));
 858              		.loc 1 506 3 view .LVU109
 859              		.loc 1 506 11 is_stmt 0 view .LVU110
 860 0000 024B     		ldr	r3, .L88
 861 0002 1868     		ldr	r0, [r3]
 505:Src/mc_api.c  ****   return (MCI_GetIalphabeta(pMCI[M1]));
 862              		.loc 1 505 1 view .LVU111
 863 0004 82B0     		sub	sp, sp, #8
 864              	.LCFI12:
 865              		.cfi_def_cfa_offset 8
 507:Src/mc_api.c  **** }
 866              		.loc 1 507 1 view .LVU112
 867 0006 02B0     		add	sp, sp, #8
 868              	.LCFI13:
 869              		.cfi_def_cfa_offset 0
 870              		@ sp needed
 506:Src/mc_api.c  ****   return (MCI_GetIalphabeta(pMCI[M1]));
 871              		.loc 1 506 11 view .LVU113
 872 0008 FFF7FEBF 		b	MCI_GetIalphabeta
 873              	.LVL37:
 874              	.L89:
 875              		.align	2
 876              	.L88:
 877 000c 00000000 		.word	pMCI
 878              		.cfi_endproc
 879              	.LFE1114:
 881              		.section	.text.MC_GetIqdMotor1,"ax",%progbits
 882              		.align	1
 883              		.p2align 2,,3
 884              		.weak	MC_GetIqdMotor1
 885              		.syntax unified
 886              		.thumb
 887              		.thumb_func
 889              	MC_GetIqdMotor1:
 890              	.LFB1115:
 508:Src/mc_api.c  **** 
 509:Src/mc_api.c  **** /**
 510:Src/mc_api.c  ****  * @brief returns Iq and Id current values for Motor 1 in qd_t format
 511:Src/mc_api.c  ****  */
 512:Src/mc_api.c  **** __weak qd_t MC_GetIqdMotor1(void)
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 25


 513:Src/mc_api.c  **** {
 891              		.loc 1 513 1 is_stmt 1 view -0
 892              		.cfi_startproc
 893              		@ args = 0, pretend = 0, frame = 8
 894              		@ frame_needed = 0, uses_anonymous_args = 0
 895              		@ link register save eliminated.
 514:Src/mc_api.c  ****   return (MCI_GetIqd(pMCI[M1]));
 896              		.loc 1 514 3 view .LVU115
 897              		.loc 1 514 11 is_stmt 0 view .LVU116
 898 0000 024B     		ldr	r3, .L92
 899 0002 1868     		ldr	r0, [r3]
 513:Src/mc_api.c  ****   return (MCI_GetIqd(pMCI[M1]));
 900              		.loc 1 513 1 view .LVU117
 901 0004 82B0     		sub	sp, sp, #8
 902              	.LCFI14:
 903              		.cfi_def_cfa_offset 8
 515:Src/mc_api.c  **** }
 904              		.loc 1 515 1 view .LVU118
 905 0006 02B0     		add	sp, sp, #8
 906              	.LCFI15:
 907              		.cfi_def_cfa_offset 0
 908              		@ sp needed
 514:Src/mc_api.c  ****   return (MCI_GetIqd(pMCI[M1]));
 909              		.loc 1 514 11 view .LVU119
 910 0008 FFF7FEBF 		b	MCI_GetIqd
 911              	.LVL38:
 912              	.L93:
 913              		.align	2
 914              	.L92:
 915 000c 00000000 		.word	pMCI
 916              		.cfi_endproc
 917              	.LFE1115:
 919              		.section	.text.MC_GetIqdMotor1_F,"ax",%progbits
 920              		.align	1
 921              		.p2align 2,,3
 922              		.weak	MC_GetIqdMotor1_F
 923              		.syntax unified
 924              		.thumb
 925              		.thumb_func
 927              	MC_GetIqdMotor1_F:
 928              	.LFB1116:
 516:Src/mc_api.c  **** 
 517:Src/mc_api.c  **** /**
 518:Src/mc_api.c  ****  * @brief returns Iq and Id current values for Motor 1 in float_t type
 519:Src/mc_api.c  ****  */
 520:Src/mc_api.c  **** __weak qd_f_t MC_GetIqdMotor1_F(void)
 521:Src/mc_api.c  **** {
 929              		.loc 1 521 1 is_stmt 1 view -0
 930              		.cfi_startproc
 931              		@ args = 0, pretend = 0, frame = 8
 932              		@ frame_needed = 0, uses_anonymous_args = 0
 933              		@ link register save eliminated.
 522:Src/mc_api.c  ****   return (MCI_GetIqd_F(pMCI[M1]));
 934              		.loc 1 522 3 view .LVU121
 935              		.loc 1 522 11 is_stmt 0 view .LVU122
 936 0000 024B     		ldr	r3, .L96
 937 0002 1868     		ldr	r0, [r3]
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 26


 521:Src/mc_api.c  ****   return (MCI_GetIqd_F(pMCI[M1]));
 938              		.loc 1 521 1 view .LVU123
 939 0004 82B0     		sub	sp, sp, #8
 940              	.LCFI16:
 941              		.cfi_def_cfa_offset 8
 523:Src/mc_api.c  **** }
 942              		.loc 1 523 1 view .LVU124
 943 0006 02B0     		add	sp, sp, #8
 944              	.LCFI17:
 945              		.cfi_def_cfa_offset 0
 946              		@ sp needed
 522:Src/mc_api.c  ****   return (MCI_GetIqd_F(pMCI[M1]));
 947              		.loc 1 522 11 view .LVU125
 948 0008 FFF7FEBF 		b	MCI_GetIqd_F
 949              	.LVL39:
 950              	.L97:
 951              		.align	2
 952              	.L96:
 953 000c 00000000 		.word	pMCI
 954              		.cfi_endproc
 955              	.LFE1116:
 957              		.section	.text.MC_GetIqdrefMotor1,"ax",%progbits
 958              		.align	1
 959              		.p2align 2,,3
 960              		.weak	MC_GetIqdrefMotor1
 961              		.syntax unified
 962              		.thumb
 963              		.thumb_func
 965              	MC_GetIqdrefMotor1:
 966              	.LFB1117:
 524:Src/mc_api.c  **** 
 525:Src/mc_api.c  **** /**
 526:Src/mc_api.c  ****  * @brief returns Iq and Id reference current values for Motor 1 in qd_t format
 527:Src/mc_api.c  ****  */
 528:Src/mc_api.c  **** __weak qd_t MC_GetIqdrefMotor1(void)
 529:Src/mc_api.c  **** {
 967              		.loc 1 529 1 is_stmt 1 view -0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 8
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971              		@ link register save eliminated.
 530:Src/mc_api.c  ****   return (MCI_GetIqdref(pMCI[M1]));
 972              		.loc 1 530 3 view .LVU127
 973              		.loc 1 530 11 is_stmt 0 view .LVU128
 974 0000 024B     		ldr	r3, .L100
 975 0002 1868     		ldr	r0, [r3]
 529:Src/mc_api.c  ****   return (MCI_GetIqdref(pMCI[M1]));
 976              		.loc 1 529 1 view .LVU129
 977 0004 82B0     		sub	sp, sp, #8
 978              	.LCFI18:
 979              		.cfi_def_cfa_offset 8
 531:Src/mc_api.c  **** }
 980              		.loc 1 531 1 view .LVU130
 981 0006 02B0     		add	sp, sp, #8
 982              	.LCFI19:
 983              		.cfi_def_cfa_offset 0
 984              		@ sp needed
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 27


 530:Src/mc_api.c  ****   return (MCI_GetIqdref(pMCI[M1]));
 985              		.loc 1 530 11 view .LVU131
 986 0008 FFF7FEBF 		b	MCI_GetIqdref
 987              	.LVL40:
 988              	.L101:
 989              		.align	2
 990              	.L100:
 991 000c 00000000 		.word	pMCI
 992              		.cfi_endproc
 993              	.LFE1117:
 995              		.section	.text.MC_GetIqdrefMotor1_F,"ax",%progbits
 996              		.align	1
 997              		.p2align 2,,3
 998              		.weak	MC_GetIqdrefMotor1_F
 999              		.syntax unified
 1000              		.thumb
 1001              		.thumb_func
 1003              	MC_GetIqdrefMotor1_F:
 1004              	.LFB1118:
 532:Src/mc_api.c  **** 
 533:Src/mc_api.c  **** /**
 534:Src/mc_api.c  ****  * @brief returns Iq and Id reference current values for Motor 1 in float_t type
 535:Src/mc_api.c  ****  */
 536:Src/mc_api.c  **** __weak qd_f_t MC_GetIqdrefMotor1_F(void)
 537:Src/mc_api.c  **** {
 1005              		.loc 1 537 1 is_stmt 1 view -0
 1006              		.cfi_startproc
 1007              		@ args = 0, pretend = 0, frame = 8
 1008              		@ frame_needed = 0, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 538:Src/mc_api.c  ****   return (MCI_GetIqdref_F(pMCI[M1]));
 1010              		.loc 1 538 3 view .LVU133
 1011              		.loc 1 538 11 is_stmt 0 view .LVU134
 1012 0000 024B     		ldr	r3, .L104
 1013 0002 1868     		ldr	r0, [r3]
 537:Src/mc_api.c  ****   return (MCI_GetIqdref_F(pMCI[M1]));
 1014              		.loc 1 537 1 view .LVU135
 1015 0004 82B0     		sub	sp, sp, #8
 1016              	.LCFI20:
 1017              		.cfi_def_cfa_offset 8
 539:Src/mc_api.c  **** }
 1018              		.loc 1 539 1 view .LVU136
 1019 0006 02B0     		add	sp, sp, #8
 1020              	.LCFI21:
 1021              		.cfi_def_cfa_offset 0
 1022              		@ sp needed
 538:Src/mc_api.c  ****   return (MCI_GetIqdref_F(pMCI[M1]));
 1023              		.loc 1 538 11 view .LVU137
 1024 0008 FFF7FEBF 		b	MCI_GetIqdref_F
 1025              	.LVL41:
 1026              	.L105:
 1027              		.align	2
 1028              	.L104:
 1029 000c 00000000 		.word	pMCI
 1030              		.cfi_endproc
 1031              	.LFE1118:
 1033              		.section	.text.MC_GetVqdMotor1,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 28


 1034              		.align	1
 1035              		.p2align 2,,3
 1036              		.weak	MC_GetVqdMotor1
 1037              		.syntax unified
 1038              		.thumb
 1039              		.thumb_func
 1041              	MC_GetVqdMotor1:
 1042              	.LFB1119:
 540:Src/mc_api.c  **** 
 541:Src/mc_api.c  **** /**
 542:Src/mc_api.c  ****  * @brief returns Vq and Vd voltage values for Motor 1 in qd_t format
 543:Src/mc_api.c  ****  */
 544:Src/mc_api.c  **** __weak qd_t MC_GetVqdMotor1(void)
 545:Src/mc_api.c  **** {
 1043              		.loc 1 545 1 is_stmt 1 view -0
 1044              		.cfi_startproc
 1045              		@ args = 0, pretend = 0, frame = 8
 1046              		@ frame_needed = 0, uses_anonymous_args = 0
 1047              		@ link register save eliminated.
 546:Src/mc_api.c  ****   return (MCI_GetVqd(pMCI[M1]));
 1048              		.loc 1 546 3 view .LVU139
 1049              		.loc 1 546 11 is_stmt 0 view .LVU140
 1050 0000 024B     		ldr	r3, .L108
 1051 0002 1868     		ldr	r0, [r3]
 545:Src/mc_api.c  ****   return (MCI_GetVqd(pMCI[M1]));
 1052              		.loc 1 545 1 view .LVU141
 1053 0004 82B0     		sub	sp, sp, #8
 1054              	.LCFI22:
 1055              		.cfi_def_cfa_offset 8
 547:Src/mc_api.c  **** }
 1056              		.loc 1 547 1 view .LVU142
 1057 0006 02B0     		add	sp, sp, #8
 1058              	.LCFI23:
 1059              		.cfi_def_cfa_offset 0
 1060              		@ sp needed
 546:Src/mc_api.c  ****   return (MCI_GetVqd(pMCI[M1]));
 1061              		.loc 1 546 11 view .LVU143
 1062 0008 FFF7FEBF 		b	MCI_GetVqd
 1063              	.LVL42:
 1064              	.L109:
 1065              		.align	2
 1066              	.L108:
 1067 000c 00000000 		.word	pMCI
 1068              		.cfi_endproc
 1069              	.LFE1119:
 1071              		.section	.text.MC_GetValphabetaMotor1,"ax",%progbits
 1072              		.align	1
 1073              		.p2align 2,,3
 1074              		.weak	MC_GetValphabetaMotor1
 1075              		.syntax unified
 1076              		.thumb
 1077              		.thumb_func
 1079              	MC_GetValphabetaMotor1:
 1080              	.LFB1120:
 548:Src/mc_api.c  **** 
 549:Src/mc_api.c  **** /**
 550:Src/mc_api.c  ****  * @brief returns Valpha and Vbeta voltage values for Motor 1 in alphabeta_t format
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 29


 551:Src/mc_api.c  ****  */
 552:Src/mc_api.c  **** __weak alphabeta_t MC_GetValphabetaMotor1(void)
 553:Src/mc_api.c  **** {
 1081              		.loc 1 553 1 is_stmt 1 view -0
 1082              		.cfi_startproc
 1083              		@ args = 0, pretend = 0, frame = 8
 1084              		@ frame_needed = 0, uses_anonymous_args = 0
 1085              		@ link register save eliminated.
 554:Src/mc_api.c  ****   return (MCI_GetValphabeta(pMCI[M1]));
 1086              		.loc 1 554 3 view .LVU145
 1087              		.loc 1 554 11 is_stmt 0 view .LVU146
 1088 0000 024B     		ldr	r3, .L112
 1089 0002 1868     		ldr	r0, [r3]
 553:Src/mc_api.c  ****   return (MCI_GetValphabeta(pMCI[M1]));
 1090              		.loc 1 553 1 view .LVU147
 1091 0004 82B0     		sub	sp, sp, #8
 1092              	.LCFI24:
 1093              		.cfi_def_cfa_offset 8
 555:Src/mc_api.c  **** }
 1094              		.loc 1 555 1 view .LVU148
 1095 0006 02B0     		add	sp, sp, #8
 1096              	.LCFI25:
 1097              		.cfi_def_cfa_offset 0
 1098              		@ sp needed
 554:Src/mc_api.c  ****   return (MCI_GetValphabeta(pMCI[M1]));
 1099              		.loc 1 554 11 view .LVU149
 1100 0008 FFF7FEBF 		b	MCI_GetValphabeta
 1101              	.LVL43:
 1102              	.L113:
 1103              		.align	2
 1104              	.L112:
 1105 000c 00000000 		.word	pMCI
 1106              		.cfi_endproc
 1107              	.LFE1120:
 1109              		.section	.text.MC_GetElAngledppMotor1,"ax",%progbits
 1110              		.align	1
 1111              		.p2align 2,,3
 1112              		.weak	MC_GetElAngledppMotor1
 1113              		.syntax unified
 1114              		.thumb
 1115              		.thumb_func
 1117              	MC_GetElAngledppMotor1:
 1118              	.LFB1121:
 556:Src/mc_api.c  **** 
 557:Src/mc_api.c  **** /**
 558:Src/mc_api.c  ****  * @brief returns the electrical angle of the rotor of Motor 1, in DDP format
 559:Src/mc_api.c  ****  */
 560:Src/mc_api.c  **** __weak int16_t MC_GetElAngledppMotor1(void)
 561:Src/mc_api.c  **** {
 1119              		.loc 1 561 1 is_stmt 1 view -0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 0, uses_anonymous_args = 0
 1123              		@ link register save eliminated.
 562:Src/mc_api.c  ****   return (MCI_GetElAngledpp(pMCI[M1]));
 1124              		.loc 1 562 3 view .LVU151
 1125              		.loc 1 562 11 is_stmt 0 view .LVU152
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 30


 1126 0000 014B     		ldr	r3, .L115
 1127 0002 1868     		ldr	r0, [r3]
 1128 0004 FFF7FEBF 		b	MCI_GetElAngledpp
 1129              	.LVL44:
 1130              	.L116:
 1131              		.align	2
 1132              	.L115:
 1133 0008 00000000 		.word	pMCI
 1134              		.cfi_endproc
 1135              	.LFE1121:
 1137              		.section	.text.MC_GetTerefMotor1,"ax",%progbits
 1138              		.align	1
 1139              		.p2align 2,,3
 1140              		.weak	MC_GetTerefMotor1
 1141              		.syntax unified
 1142              		.thumb
 1143              		.thumb_func
 1145              	MC_GetTerefMotor1:
 1146              	.LFB1122:
 563:Src/mc_api.c  **** }
 564:Src/mc_api.c  **** 
 565:Src/mc_api.c  **** /**
 566:Src/mc_api.c  ****  * @brief returns the electrical torque reference for Motor 1
 567:Src/mc_api.c  ****  */
 568:Src/mc_api.c  **** __weak int16_t MC_GetTerefMotor1(void)
 569:Src/mc_api.c  **** {
 1147              		.loc 1 569 1 is_stmt 1 view -0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 0
 1150              		@ frame_needed = 0, uses_anonymous_args = 0
 1151              		@ link register save eliminated.
 570:Src/mc_api.c  ****   return (MCI_GetTeref(pMCI[M1]));
 1152              		.loc 1 570 3 view .LVU154
 1153              		.loc 1 570 11 is_stmt 0 view .LVU155
 1154 0000 014B     		ldr	r3, .L118
 1155 0002 1868     		ldr	r0, [r3]
 1156 0004 FFF7FEBF 		b	MCI_GetTeref
 1157              	.LVL45:
 1158              	.L119:
 1159              		.align	2
 1160              	.L118:
 1161 0008 00000000 		.word	pMCI
 1162              		.cfi_endproc
 1163              	.LFE1122:
 1165              		.section	.text.MC_GetTerefMotor1_F,"ax",%progbits
 1166              		.align	1
 1167              		.p2align 2,,3
 1168              		.weak	MC_GetTerefMotor1_F
 1169              		.syntax unified
 1170              		.thumb
 1171              		.thumb_func
 1173              	MC_GetTerefMotor1_F:
 1174              	.LFB1123:
 571:Src/mc_api.c  **** }
 572:Src/mc_api.c  **** 
 573:Src/mc_api.c  **** /**
 574:Src/mc_api.c  ****  * @brief returns the electrical torque reference for Motor 1
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 31


 575:Src/mc_api.c  ****  */
 576:Src/mc_api.c  **** __weak float_t MC_GetTerefMotor1_F(void)
 577:Src/mc_api.c  **** {
 1175              		.loc 1 577 1 is_stmt 1 view -0
 1176              		.cfi_startproc
 1177              		@ args = 0, pretend = 0, frame = 0
 1178              		@ frame_needed = 0, uses_anonymous_args = 0
 1179              		@ link register save eliminated.
 578:Src/mc_api.c  ****   return (MCI_GetTeref_F(pMCI[M1]));
 1180              		.loc 1 578 3 view .LVU157
 1181              		.loc 1 578 11 is_stmt 0 view .LVU158
 1182 0000 014B     		ldr	r3, .L121
 1183 0002 1868     		ldr	r0, [r3]
 1184 0004 FFF7FEBF 		b	MCI_GetTeref_F
 1185              	.LVL46:
 1186              	.L122:
 1187              		.align	2
 1188              	.L121:
 1189 0008 00000000 		.word	pMCI
 1190              		.cfi_endproc
 1191              	.LFE1123:
 1193              		.section	.text.MC_Clear_IqdrefMotor1,"ax",%progbits
 1194              		.align	1
 1195              		.p2align 2,,3
 1196              		.weak	MC_Clear_IqdrefMotor1
 1197              		.syntax unified
 1198              		.thumb
 1199              		.thumb_func
 1201              	MC_Clear_IqdrefMotor1:
 1202              	.LFB1124:
 579:Src/mc_api.c  **** }
 580:Src/mc_api.c  **** 
 581:Src/mc_api.c  **** /**
 582:Src/mc_api.c  ****  * @brief re-initializes Iq and Id references to their default values for Motor 1
 583:Src/mc_api.c  ****  *
 584:Src/mc_api.c  ****  * The default values for the Iq and Id references are coming from the Speed
 585:Src/mc_api.c  ****  * or the Torque controller depending on the control mode.
 586:Src/mc_api.c  ****  *
 587:Src/mc_api.c  ****  * @see   SpeednTorqCtrl for more details.
 588:Src/mc_api.c  ****  */
 589:Src/mc_api.c  **** __weak void MC_Clear_IqdrefMotor1(void)
 590:Src/mc_api.c  **** {
 1203              		.loc 1 590 1 is_stmt 1 view -0
 1204              		.cfi_startproc
 1205              		@ args = 0, pretend = 0, frame = 0
 1206              		@ frame_needed = 0, uses_anonymous_args = 0
 1207              		@ link register save eliminated.
 591:Src/mc_api.c  ****   MCI_Clear_Iqdref(pMCI[M1]);
 1208              		.loc 1 591 3 view .LVU160
 1209 0000 014B     		ldr	r3, .L124
 1210 0002 1868     		ldr	r0, [r3]
 1211 0004 FFF7FEBF 		b	MCI_Clear_Iqdref
 1212              	.LVL47:
 1213              	.L125:
 1214              		.align	2
 1215              	.L124:
 1216 0008 00000000 		.word	pMCI
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 32


 1217              		.cfi_endproc
 1218              	.LFE1124:
 1220              		.section	.text.MC_AcknowledgeFaultMotor1,"ax",%progbits
 1221              		.align	1
 1222              		.p2align 2,,3
 1223              		.weak	MC_AcknowledgeFaultMotor1
 1224              		.syntax unified
 1225              		.thumb
 1226              		.thumb_func
 1228              	MC_AcknowledgeFaultMotor1:
 1229              	.LFB1125:
 592:Src/mc_api.c  **** }
 593:Src/mc_api.c  **** 
 594:Src/mc_api.c  **** /**
 595:Src/mc_api.c  ****  * @brief Acknowledge a Motor Control fault that occured on Motor 1
 596:Src/mc_api.c  ****  *
 597:Src/mc_api.c  ****  *  This function informs Motor 1's state machine that the Application has taken
 598:Src/mc_api.c  ****  * the error condition that occured into account. If no error condition exists when
 599:Src/mc_api.c  ****  * the function is called, nothing is done and false is returned. Otherwise, true is
 600:Src/mc_api.c  ****  * returned.
 601:Src/mc_api.c  ****  */
 602:Src/mc_api.c  **** __weak bool MC_AcknowledgeFaultMotor1(void)
 603:Src/mc_api.c  **** {
 1230              		.loc 1 603 1 view -0
 1231              		.cfi_startproc
 1232              		@ args = 0, pretend = 0, frame = 0
 1233              		@ frame_needed = 0, uses_anonymous_args = 0
 1234              		@ link register save eliminated.
 604:Src/mc_api.c  ****   return (MCI_FaultAcknowledged(pMCI[M1]));
 1235              		.loc 1 604 3 view .LVU162
 1236              		.loc 1 604 11 is_stmt 0 view .LVU163
 1237 0000 014B     		ldr	r3, .L127
 1238 0002 1868     		ldr	r0, [r3]
 1239 0004 FFF7FEBF 		b	MCI_FaultAcknowledged
 1240              	.LVL48:
 1241              	.L128:
 1242              		.align	2
 1243              	.L127:
 1244 0008 00000000 		.word	pMCI
 1245              		.cfi_endproc
 1246              	.LFE1125:
 1248              		.section	.text.MC_GetOccurredFaultsMotor1,"ax",%progbits
 1249              		.align	1
 1250              		.p2align 2,,3
 1251              		.weak	MC_GetOccurredFaultsMotor1
 1252              		.syntax unified
 1253              		.thumb
 1254              		.thumb_func
 1256              	MC_GetOccurredFaultsMotor1:
 1257              	.LFB1126:
 605:Src/mc_api.c  **** }
 606:Src/mc_api.c  **** 
 607:Src/mc_api.c  **** /**
 608:Src/mc_api.c  ****  * @brief Returns a bit-field showing non acknowledged faults that occurred on Motor 1.
 609:Src/mc_api.c  ****  *
 610:Src/mc_api.c  ****  * This function returns a 16 bit fields containing the Motor Control faults
 611:Src/mc_api.c  ****  * that have occurred on Motor 1 since its state machine moved to the #FAULT_NOW state.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 33


 612:Src/mc_api.c  ****  *
 613:Src/mc_api.c  ****  * See @ref fault_codes "Motor Control Faults" for a list of
 614:Src/mc_api.c  ****  * of all possible faults codes.
 615:Src/mc_api.c  ****  */
 616:Src/mc_api.c  **** __weak uint16_t MC_GetOccurredFaultsMotor1(void)
 617:Src/mc_api.c  **** {
 1258              		.loc 1 617 1 is_stmt 1 view -0
 1259              		.cfi_startproc
 1260              		@ args = 0, pretend = 0, frame = 0
 1261              		@ frame_needed = 0, uses_anonymous_args = 0
 1262              		@ link register save eliminated.
 618:Src/mc_api.c  ****   return (MCI_GetOccurredFaults(pMCI[M1]));
 1263              		.loc 1 618 3 view .LVU165
 1264              		.loc 1 618 11 is_stmt 0 view .LVU166
 1265 0000 014B     		ldr	r3, .L130
 1266 0002 1868     		ldr	r0, [r3]
 1267 0004 FFF7FEBF 		b	MCI_GetOccurredFaults
 1268              	.LVL49:
 1269              	.L131:
 1270              		.align	2
 1271              	.L130:
 1272 0008 00000000 		.word	pMCI
 1273              		.cfi_endproc
 1274              	.LFE1126:
 1276              		.section	.text.MC_GetCurrentFaultsMotor1,"ax",%progbits
 1277              		.align	1
 1278              		.p2align 2,,3
 1279              		.weak	MC_GetCurrentFaultsMotor1
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1284              	MC_GetCurrentFaultsMotor1:
 1285              	.LFB1127:
 619:Src/mc_api.c  **** }
 620:Src/mc_api.c  **** 
 621:Src/mc_api.c  **** /**
 622:Src/mc_api.c  ****  * @brief returns a bitfield showing all current faults on Motor 1
 623:Src/mc_api.c  ****  *
 624:Src/mc_api.c  ****  * This function returns a 16 bit fields containing the Motor Control faults
 625:Src/mc_api.c  ****  * that are currently active.
 626:Src/mc_api.c  ****  *
 627:Src/mc_api.c  ****  * See @ref fault_codes "Motor Control Faults" for a list of
 628:Src/mc_api.c  ****  * of all possible faults codes.
 629:Src/mc_api.c  ****  */
 630:Src/mc_api.c  **** __weak uint16_t MC_GetCurrentFaultsMotor1(void)
 631:Src/mc_api.c  **** {
 1286              		.loc 1 631 1 is_stmt 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 0
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290              		@ link register save eliminated.
 632:Src/mc_api.c  ****   return (MCI_GetCurrentFaults(pMCI[M1]));
 1291              		.loc 1 632 3 view .LVU168
 1292              		.loc 1 632 11 is_stmt 0 view .LVU169
 1293 0000 014B     		ldr	r3, .L133
 1294 0002 1868     		ldr	r0, [r3]
 1295 0004 FFF7FEBF 		b	MCI_GetCurrentFaults
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 34


 1296              	.LVL50:
 1297              	.L134:
 1298              		.align	2
 1299              	.L133:
 1300 0008 00000000 		.word	pMCI
 1301              		.cfi_endproc
 1302              	.LFE1127:
 1304              		.section	.text.MC_GetSTMStateMotor1,"ax",%progbits
 1305              		.align	1
 1306              		.p2align 2,,3
 1307              		.weak	MC_GetSTMStateMotor1
 1308              		.syntax unified
 1309              		.thumb
 1310              		.thumb_func
 1312              	MC_GetSTMStateMotor1:
 1313              	.LFB1128:
 633:Src/mc_api.c  **** }
 634:Src/mc_api.c  **** 
 635:Src/mc_api.c  **** /**
 636:Src/mc_api.c  ****  * @brief returns the current state of Motor 1 state machine
 637:Src/mc_api.c  ****  */
 638:Src/mc_api.c  **** __weak MCI_State_t MC_GetSTMStateMotor1(void)
 639:Src/mc_api.c  **** {
 1314              		.loc 1 639 1 is_stmt 1 view -0
 1315              		.cfi_startproc
 1316              		@ args = 0, pretend = 0, frame = 0
 1317              		@ frame_needed = 0, uses_anonymous_args = 0
 1318              		@ link register save eliminated.
 640:Src/mc_api.c  ****   return (MCI_GetSTMState(pMCI[M1]));
 1319              		.loc 1 640 3 view .LVU171
 1320              		.loc 1 640 11 is_stmt 0 view .LVU172
 1321 0000 014B     		ldr	r3, .L136
 1322 0002 1868     		ldr	r0, [r3]
 1323 0004 FFF7FEBF 		b	MCI_GetSTMState
 1324              	.LVL51:
 1325              	.L137:
 1326              		.align	2
 1327              	.L136:
 1328 0008 00000000 		.word	pMCI
 1329              		.cfi_endproc
 1330              	.LFE1128:
 1332              		.section	.text.MC_SetPolarizationOffsetsMotor1,"ax",%progbits
 1333              		.align	1
 1334              		.p2align 2,,3
 1335              		.global	MC_SetPolarizationOffsetsMotor1
 1336              		.syntax unified
 1337              		.thumb
 1338              		.thumb_func
 1340              	MC_SetPolarizationOffsetsMotor1:
 1341              	.LVL52:
 1342              	.LFB1129:
 641:Src/mc_api.c  **** }
 642:Src/mc_api.c  **** 
 643:Src/mc_api.c  **** /**
 644:Src/mc_api.c  ****   * @brief Sets the polarization offset values to use for Motor 1
 645:Src/mc_api.c  ****   *
 646:Src/mc_api.c  ****   * The Motor Control algorithm relies on a number of current and voltage measures. The hardware
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 35


 647:Src/mc_api.c  ****   * parts that make these measurements need to be characterized at least once in the course of
 648:Src/mc_api.c  ****   * product life, prior to its first activation. This characterization consists in measuring the
 649:Src/mc_api.c  ****   * voltage presented to the ADC channels when either no current flows into the phases of the motor
 650:Src/mc_api.c  ****   * or no voltage is applied to them. This characterization is named polarization offsets measureme
 651:Src/mc_api.c  ****   * and its results are the polarization offsets.
 652:Src/mc_api.c  ****   *
 653:Src/mc_api.c  ****   * The Motor Control Firmware can performs this polarization offsets measurement procedure which
 654:Src/mc_api.c  ****   * results in a number of offset values that the application can store in a non volatile memory an
 655:Src/mc_api.c  ****   * then set into the Motor Control subsystem at power-on or after a reset.
 656:Src/mc_api.c  ****   *
 657:Src/mc_api.c  ****   * The application uses this function to set the polarization offset values that the Motor Control
 658:Src/mc_api.c  ****   * subsystem is to use in the current session. This function can only be used when the state machi
 659:Src/mc_api.c  ****   * of the motor is in the #IDLE state in which case it returns #MC_SUCCESS. Otherwise, it does not
 660:Src/mc_api.c  ****   * and returns the #MC_WRONG_STATE_ERROR error code.
 661:Src/mc_api.c  ****   *
 662:Src/mc_api.c  ****   *  The Motor Control subsystem needs to know the polarization offsets before the motor can be con
 663:Src/mc_api.c  ****   * The MC_SetPolarizationOffsetsMotor1() function provides a way to set these offsets. Alternative
 664:Src/mc_api.c  ****   * application can either:
 665:Src/mc_api.c  ****   *
 666:Src/mc_api.c  ****   *  * Execute the polarization offsets measurement procedure with a call to
 667:Src/mc_api.c  ****   *    MC_StartPolarizationOffsetsMeasurementMotor1() after a reset or a power on;
 668:Src/mc_api.c  ****   *  * Start the motor control with the MC_StartWithPolarizationMotor1() that will execute the proc
 669:Src/mc_api.c  ****   *    before actually starting the motor, on the first time it is called after a reset or a power 
 670:Src/mc_api.c  ****   *
 671:Src/mc_api.c  ****   * When this function completes successfully, the state of the polarization offsets measurement pr
 672:Src/mc_api.c  ****   * is set to #COMPLETED. See MC_GetPolarizationState().
 673:Src/mc_api.c  ****   *
 674:Src/mc_api.c  ****   * @param PolarizationOffsets an pointer on a structure containing the offset values
 675:Src/mc_api.c  ****   */
 676:Src/mc_api.c  **** bool MC_SetPolarizationOffsetsMotor1(PolarizationOffsets_t * PolarizationOffsets)
 677:Src/mc_api.c  **** {
 1343              		.loc 1 677 1 is_stmt 1 view -0
 1344              		.cfi_startproc
 1345              		@ args = 0, pretend = 0, frame = 0
 1346              		@ frame_needed = 0, uses_anonymous_args = 0
 1347              		@ link register save eliminated.
 678:Src/mc_api.c  ****   return (MCI_SetCalibratedOffsetsMotor(pMCI[M1], PolarizationOffsets));
 1348              		.loc 1 678 3 view .LVU174
 1349              		.loc 1 678 11 is_stmt 0 view .LVU175
 1350 0000 024B     		ldr	r3, .L139
 677:Src/mc_api.c  ****   return (MCI_SetCalibratedOffsetsMotor(pMCI[M1], PolarizationOffsets));
 1351              		.loc 1 677 1 view .LVU176
 1352 0002 0146     		mov	r1, r0
 1353              		.loc 1 678 11 view .LVU177
 1354 0004 1868     		ldr	r0, [r3]
 1355              	.LVL53:
 1356              		.loc 1 678 11 view .LVU178
 1357 0006 FFF7FEBF 		b	MCI_SetCalibratedOffsetsMotor
 1358              	.LVL54:
 1359              	.L140:
 1360              		.loc 1 678 11 view .LVU179
 1361 000a 00BF     		.align	2
 1362              	.L139:
 1363 000c 00000000 		.word	pMCI
 1364              		.cfi_endproc
 1365              	.LFE1129:
 1367              		.section	.text.MC_GetPolarizationOffsetsMotor1,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 36


 1368              		.align	1
 1369              		.p2align 2,,3
 1370              		.global	MC_GetPolarizationOffsetsMotor1
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1375              	MC_GetPolarizationOffsetsMotor1:
 1376              	.LVL55:
 1377              	.LFB1130:
 679:Src/mc_api.c  **** }
 680:Src/mc_api.c  **** 
 681:Src/mc_api.c  **** /**
 682:Src/mc_api.c  ****   * @brief Returns the polarization offset values measured or set for Motor 1
 683:Src/mc_api.c  ****   *
 684:Src/mc_api.c  ****   *  See MC_SetPolarizationOffsetsMotor1() for more details.
 685:Src/mc_api.c  ****   *
 686:Src/mc_api.c  ****   *  If the Motor Control Firmware knows the polarization offset values, they are copied into the
 687:Src/mc_api.c  ****   * @p PolarizationOffsets structure and #MC_SUCCESS is returned. Otherwise, nothing is done and
 688:Src/mc_api.c  ****   * #MC_NO_POLARIZATION_OFFSETS_ERROR is returned.
 689:Src/mc_api.c  ****   *
 690:Src/mc_api.c  ****   * @param PolarizationOffsets an pointer on the structure into which the polarization offsets will
 691:Src/mc_api.c  ****   *        copied
 692:Src/mc_api.c  ****   * @return #MC_SUCCESS if calibration data were present and could be copied into @p PolarizationOf
 693:Src/mc_api.c  ****   *         #MC_NO_POLARIZATION_OFFSETS_ERROR otherwise.
 694:Src/mc_api.c  ****   */
 695:Src/mc_api.c  **** bool MC_GetPolarizationOffsetsMotor1(PolarizationOffsets_t * PolarizationOffsets)
 696:Src/mc_api.c  **** {
 1378              		.loc 1 696 1 is_stmt 1 view -0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 0, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 697:Src/mc_api.c  ****    return (MCI_GetCalibratedOffsetsMotor(pMCI[M1], PolarizationOffsets));
 1383              		.loc 1 697 4 view .LVU181
 1384              		.loc 1 697 12 is_stmt 0 view .LVU182
 1385 0000 024B     		ldr	r3, .L142
 696:Src/mc_api.c  ****    return (MCI_GetCalibratedOffsetsMotor(pMCI[M1], PolarizationOffsets));
 1386              		.loc 1 696 1 view .LVU183
 1387 0002 0146     		mov	r1, r0
 1388              		.loc 1 697 12 view .LVU184
 1389 0004 1868     		ldr	r0, [r3]
 1390              	.LVL56:
 1391              		.loc 1 697 12 view .LVU185
 1392 0006 FFF7FEBF 		b	MCI_GetCalibratedOffsetsMotor
 1393              	.LVL57:
 1394              	.L143:
 1395              		.loc 1 697 12 view .LVU186
 1396 000a 00BF     		.align	2
 1397              	.L142:
 1398 000c 00000000 		.word	pMCI
 1399              		.cfi_endproc
 1400              	.LFE1130:
 1402              		.section	.text.MC_StartPolarizationOffsetsMeasurementMotor1,"ax",%progbits
 1403              		.align	1
 1404              		.p2align 2,,3
 1405              		.global	MC_StartPolarizationOffsetsMeasurementMotor1
 1406              		.syntax unified
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 37


 1407              		.thumb
 1408              		.thumb_func
 1410              	MC_StartPolarizationOffsetsMeasurementMotor1:
 1411              	.LFB1131:
 698:Src/mc_api.c  **** }
 699:Src/mc_api.c  **** 
 700:Src/mc_api.c  **** /**
 701:Src/mc_api.c  ****   * @brief Starts the polarization offsets measurement procedure.
 702:Src/mc_api.c  ****   *
 703:Src/mc_api.c  ****   * See MC_SetPolarizationOffsetsMotor1() for more details.
 704:Src/mc_api.c  ****   *
 705:Src/mc_api.c  ****   * If the Motor Control Firmware is in the #IDLE state, the procedure is started, the state machin
 706:Src/mc_api.c  ****   * of the motor switches to #OFFSET_CALIB and #MC_SUCCESS is returned. Otherwise, nothing is done
 707:Src/mc_api.c  ****   * and the #MC_WRONG_STATE_ERROR error code is returned.
 708:Src/mc_api.c  ****   *
 709:Src/mc_api.c  ****   * The polarization offsets measurement procedure is only triggered by this function and it is has
 710:Src/mc_api.c  ****   * completed when this function returns. The application can use the MC_GetPolarizationState()
 711:Src/mc_api.c  ****   * function to query the state of the procedure.
 712:Src/mc_api.c  ****   *
 713:Src/mc_api.c  ****   * @see MC_GetPolarizationState()
 714:Src/mc_api.c  ****   */
 715:Src/mc_api.c  **** bool MC_StartPolarizationOffsetsMeasurementMotor1(void)
 716:Src/mc_api.c  **** {
 1412              		.loc 1 716 1 is_stmt 1 view -0
 1413              		.cfi_startproc
 1414              		@ args = 0, pretend = 0, frame = 0
 1415              		@ frame_needed = 0, uses_anonymous_args = 0
 1416              		@ link register save eliminated.
 717:Src/mc_api.c  ****   return (MCI_StartOffsetMeasurments(pMCI[M1]));
 1417              		.loc 1 717 3 view .LVU188
 1418              		.loc 1 717 11 is_stmt 0 view .LVU189
 1419 0000 014B     		ldr	r3, .L145
 1420 0002 1868     		ldr	r0, [r3]
 1421 0004 FFF7FEBF 		b	MCI_StartOffsetMeasurments
 1422              	.LVL58:
 1423              	.L146:
 1424              		.align	2
 1425              	.L145:
 1426 0008 00000000 		.word	pMCI
 1427              		.cfi_endproc
 1428              	.LFE1131:
 1430              		.section	.text.MC_GetAveragePowerMotor1_F,"ax",%progbits
 1431              		.align	1
 1432              		.p2align 2,,3
 1433              		.weak	MC_GetAveragePowerMotor1_F
 1434              		.syntax unified
 1435              		.thumb
 1436              		.thumb_func
 1438              	MC_GetAveragePowerMotor1_F:
 1439              	.LFB1132:
 718:Src/mc_api.c  **** }
 719:Src/mc_api.c  **** 
 720:Src/mc_api.c  **** /**
 721:Src/mc_api.c  ****  * @brief This method is used to get the average measured motor power
 722:Src/mc_api.c  ****  *        expressed in watt for Motor 1.
 723:Src/mc_api.c  **** 
 724:Src/mc_api.c  ****  * @retval float_t The average measured motor power expressed in watt.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 38


 725:Src/mc_api.c  ****  */
 726:Src/mc_api.c  **** __weak float_t MC_GetAveragePowerMotor1_F(void)
 727:Src/mc_api.c  **** {
 1440              		.loc 1 727 1 is_stmt 1 view -0
 1441              		.cfi_startproc
 1442              		@ args = 0, pretend = 0, frame = 0
 1443              		@ frame_needed = 0, uses_anonymous_args = 0
 1444              		@ link register save eliminated.
 728:Src/mc_api.c  ****   return (PQD_GetAvrgElMotorPowerW(pMPM[M1]));
 1445              		.loc 1 728 3 view .LVU191
 1446              		.loc 1 728 40 is_stmt 0 view .LVU192
 1447 0000 014B     		ldr	r3, .L148
 1448              		.loc 1 728 11 view .LVU193
 1449 0002 1868     		ldr	r0, [r3]
 1450 0004 FFF7FEBF 		b	PQD_GetAvrgElMotorPowerW
 1451              	.LVL59:
 1452              	.L149:
 1453              		.align	2
 1454              	.L148:
 1455 0008 00000000 		.word	pMPM
 1456              		.cfi_endproc
 1457              	.LFE1132:
 1459              		.section	.text.MC_GetControlPositionStatusMotor1,"ax",%progbits
 1460              		.align	1
 1461              		.p2align 2,,3
 1462              		.weak	MC_GetControlPositionStatusMotor1
 1463              		.syntax unified
 1464              		.thumb
 1465              		.thumb_func
 1467              	MC_GetControlPositionStatusMotor1:
 1468              	.LFB1133:
 729:Src/mc_api.c  **** }
 730:Src/mc_api.c  **** 
 731:Src/mc_api.c  **** /**
 732:Src/mc_api.c  ****  * @brief returns the current control position state of Motor 1.
 733:Src/mc_api.c  ****  *   */
 734:Src/mc_api.c  **** __weak PosCtrlStatus_t MC_GetControlPositionStatusMotor1(void)
 735:Src/mc_api.c  **** {
 1469              		.loc 1 735 1 is_stmt 1 view -0
 1470              		.cfi_startproc
 1471              		@ args = 0, pretend = 0, frame = 0
 1472              		@ frame_needed = 0, uses_anonymous_args = 0
 1473              		@ link register save eliminated.
 736:Src/mc_api.c  ****   return (MCI_GetCtrlPositionState(pMCI[M1]));
 1474              		.loc 1 736 3 view .LVU195
 1475              		.loc 1 736 11 is_stmt 0 view .LVU196
 1476 0000 014B     		ldr	r3, .L151
 1477 0002 1868     		ldr	r0, [r3]
 1478 0004 FFF7FEBF 		b	MCI_GetCtrlPositionState
 1479              	.LVL60:
 1480              	.L152:
 1481              		.align	2
 1482              	.L151:
 1483 0008 00000000 		.word	pMCI
 1484              		.cfi_endproc
 1485              	.LFE1133:
 1487              		.section	.text.MC_GetAlignmentStatusMotor1,"ax",%progbits
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 39


 1488              		.align	1
 1489              		.p2align 2,,3
 1490              		.weak	MC_GetAlignmentStatusMotor1
 1491              		.syntax unified
 1492              		.thumb
 1493              		.thumb_func
 1495              	MC_GetAlignmentStatusMotor1:
 1496              	.LFB1134:
 737:Src/mc_api.c  **** }
 738:Src/mc_api.c  **** 
 739:Src/mc_api.c  **** /**
 740:Src/mc_api.c  ****  * @brief returns the alignment state of Motor 1.
 741:Src/mc_api.c  ****  *   */
 742:Src/mc_api.c  **** __weak AlignStatus_t MC_GetAlignmentStatusMotor1(void)
 743:Src/mc_api.c  **** {
 1497              		.loc 1 743 1 is_stmt 1 view -0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              		@ link register save eliminated.
 744:Src/mc_api.c  ****   return (MCI_GetAlignmentStatus(pMCI[M1]));
 1502              		.loc 1 744 3 view .LVU198
 1503              		.loc 1 744 11 is_stmt 0 view .LVU199
 1504 0000 014B     		ldr	r3, .L154
 1505 0002 1868     		ldr	r0, [r3]
 1506 0004 FFF7FEBF 		b	MCI_GetAlignmentStatus
 1507              	.LVL61:
 1508              	.L155:
 1509              		.align	2
 1510              	.L154:
 1511 0008 00000000 		.word	pMCI
 1512              		.cfi_endproc
 1513              	.LFE1134:
 1515              		.section	.text.MC_GetCurrentPosition1,"ax",%progbits
 1516              		.align	1
 1517              		.p2align 2,,3
 1518              		.weak	MC_GetCurrentPosition1
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1523              	MC_GetCurrentPosition1:
 1524              	.LFB1135:
 745:Src/mc_api.c  **** }
 746:Src/mc_api.c  **** 
 747:Src/mc_api.c  **** /**
 748:Src/mc_api.c  ****  * @brief returns the current position of Motor 1.
 749:Src/mc_api.c  ****  *   */
 750:Src/mc_api.c  **** __weak float_t MC_GetCurrentPosition1(void)
 751:Src/mc_api.c  **** {
 1525              		.loc 1 751 1 is_stmt 1 view -0
 1526              		.cfi_startproc
 1527              		@ args = 0, pretend = 0, frame = 0
 1528              		@ frame_needed = 0, uses_anonymous_args = 0
 1529              		@ link register save eliminated.
 752:Src/mc_api.c  ****   return (MCI_GetCurrentPosition(pMCI[M1]));
 1530              		.loc 1 752 3 view .LVU201
 1531              		.loc 1 752 11 is_stmt 0 view .LVU202
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 40


 1532 0000 014B     		ldr	r3, .L157
 1533 0002 1868     		ldr	r0, [r3]
 1534 0004 FFF7FEBF 		b	MCI_GetCurrentPosition
 1535              	.LVL62:
 1536              	.L158:
 1537              		.align	2
 1538              	.L157:
 1539 0008 00000000 		.word	pMCI
 1540              		.cfi_endproc
 1541              	.LFE1135:
 1543              		.section	.text.MC_GetTargetPosition1,"ax",%progbits
 1544              		.align	1
 1545              		.p2align 2,,3
 1546              		.weak	MC_GetTargetPosition1
 1547              		.syntax unified
 1548              		.thumb
 1549              		.thumb_func
 1551              	MC_GetTargetPosition1:
 1552              	.LFB1136:
 753:Src/mc_api.c  **** }
 754:Src/mc_api.c  **** 
 755:Src/mc_api.c  **** /**
 756:Src/mc_api.c  ****  * @brief returns the target position of Motor 1.
 757:Src/mc_api.c  ****  *   */
 758:Src/mc_api.c  **** __weak float_t MC_GetTargetPosition1(void)
 759:Src/mc_api.c  **** {
 1553              		.loc 1 759 1 is_stmt 1 view -0
 1554              		.cfi_startproc
 1555              		@ args = 0, pretend = 0, frame = 0
 1556              		@ frame_needed = 0, uses_anonymous_args = 0
 1557              		@ link register save eliminated.
 760:Src/mc_api.c  ****   return (MCI_GetTargetPosition(pMCI[M1]));
 1558              		.loc 1 760 3 view .LVU204
 1559              		.loc 1 760 11 is_stmt 0 view .LVU205
 1560 0000 014B     		ldr	r3, .L160
 1561 0002 1868     		ldr	r0, [r3]
 1562 0004 FFF7FEBF 		b	MCI_GetTargetPosition
 1563              	.LVL63:
 1564              	.L161:
 1565              		.align	2
 1566              	.L160:
 1567 0008 00000000 		.word	pMCI
 1568              		.cfi_endproc
 1569              	.LFE1136:
 1571              		.section	.text.MC_GetMoveDuration1,"ax",%progbits
 1572              		.align	1
 1573              		.p2align 2,,3
 1574              		.weak	MC_GetMoveDuration1
 1575              		.syntax unified
 1576              		.thumb
 1577              		.thumb_func
 1579              	MC_GetMoveDuration1:
 1580              	.LFB1137:
 761:Src/mc_api.c  **** }
 762:Src/mc_api.c  **** 
 763:Src/mc_api.c  **** /**
 764:Src/mc_api.c  ****  * @brief returns the total movement duration to reach the target position of Motor 1.
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 41


 765:Src/mc_api.c  ****  *   */
 766:Src/mc_api.c  **** __weak float_t MC_GetMoveDuration1(void)
 767:Src/mc_api.c  **** {
 1581              		.loc 1 767 1 is_stmt 1 view -0
 1582              		.cfi_startproc
 1583              		@ args = 0, pretend = 0, frame = 0
 1584              		@ frame_needed = 0, uses_anonymous_args = 0
 1585              		@ link register save eliminated.
 768:Src/mc_api.c  ****   return (MCI_GetMoveDuration(pMCI[M1]));
 1586              		.loc 1 768 3 view .LVU207
 1587              		.loc 1 768 11 is_stmt 0 view .LVU208
 1588 0000 014B     		ldr	r3, .L163
 1589 0002 1868     		ldr	r0, [r3]
 1590 0004 FFF7FEBF 		b	MCI_GetMoveDuration
 1591              	.LVL64:
 1592              	.L164:
 1593              		.align	2
 1594              	.L163:
 1595 0008 00000000 		.word	pMCI
 1596              		.cfi_endproc
 1597              	.LFE1137:
 1599              		.section	.text.MC_ProfilerCommand,"ax",%progbits
 1600              		.align	1
 1601              		.p2align 2,,3
 1602              		.weak	MC_ProfilerCommand
 1603              		.syntax unified
 1604              		.thumb
 1605              		.thumb_func
 1607              	MC_ProfilerCommand:
 1608              	.LVL65:
 1609              	.LFB1138:
 769:Src/mc_api.c  **** }
 770:Src/mc_api.c  **** 
 771:Src/mc_api.c  **** /**
 772:Src/mc_api.c  ****  * @brief Not implemented MC_Profiler function.
 773:Src/mc_api.c  ****  *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
 774:Src/mc_api.c  **** __weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, ui
 775:Src/mc_api.c  **** {
 1610              		.loc 1 775 1 is_stmt 1 view -0
 1611              		.cfi_startproc
 1612              		@ args = 4, pretend = 0, frame = 0
 1613              		@ frame_needed = 0, uses_anonymous_args = 0
 1614              		@ link register save eliminated.
 776:Src/mc_api.c  ****   return (MCP_CMD_UNKNOWN);
 1615              		.loc 1 776 3 view .LVU210
 777:Src/mc_api.c  **** }
 1616              		.loc 1 777 1 is_stmt 0 view .LVU211
 1617 0000 0220     		movs	r0, #2
 1618              	.LVL66:
 1619              		.loc 1 777 1 view .LVU212
 1620 0002 7047     		bx	lr
 1621              		.cfi_endproc
 1622              	.LFE1138:
 1624              		.text
 1625              	.Letext0:
 1626              		.file 2 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
 1627              		.file 3 "c:\\programdata\\chocolatey\\lib\\gcc-arm-embedded\\tools\\gcc-arm-none-eabi-10.3-2021.10
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 42


 1628              		.file 4 "Drivers/CMSIS/Device/ST/STM32L4xx/Include/stm32l476xx.h"
 1629              		.file 5 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_tim.h"
 1630              		.file 6 "Drivers/STM32L4xx_HAL_Driver/Inc/stm32l4xx_ll_dma.h"
 1631              		.file 7 "Inc/mc_type.h"
 1632              		.file 8 "Inc/pwm_curr_fdbk.h"
 1633              		.file 9 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1634              		.file 10 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 1635              		.file 11 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 1636              		.file 12 "Inc/mc_perf.h"
 1637              		.file 13 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/encoder_speed_pos_fdbk.h"
 1638              		.file 14 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/trajectory_ctrl.h"
 1639              		.file 15 "Inc/mc_interface.h"
 1640              		.file 16 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 1641              		.file 17 "MCSDK_v6.2.1-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 1642              		.file 18 "Inc/mc_config.h"
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 43


DEFINED SYMBOLS
                            *ABS*:00000000 mc_api.c
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:20     .text.MC_StartMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:27     .text.MC_StartMotor1:00000000 MC_StartMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:44     .text.MC_StartMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:49     .text.MC_StopMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:56     .text.MC_StopMotor1:00000000 MC_StopMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:72     .text.MC_StopMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:77     .text.MC_ProgramSpeedRampMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:84     .text.MC_ProgramSpeedRampMotor1:00000000 MC_ProgramSpeedRampMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:120    .text.MC_ProgramSpeedRampMotor1:00000014 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:125    .text.MC_ProgramSpeedRampMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:132    .text.MC_ProgramSpeedRampMotor1_F:00000000 MC_ProgramSpeedRampMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:154    .text.MC_ProgramSpeedRampMotor1_F:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:159    .text.MC_ProgramTorqueRampMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:166    .text.MC_ProgramTorqueRampMotor1:00000000 MC_ProgramTorqueRampMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:202    .text.MC_ProgramTorqueRampMotor1:00000014 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:207    .text.MC_ProgramTorqueRampMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:214    .text.MC_ProgramTorqueRampMotor1_F:00000000 MC_ProgramTorqueRampMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:236    .text.MC_ProgramTorqueRampMotor1_F:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:241    .text.MC_ProgramPositionCommandMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:248    .text.MC_ProgramPositionCommandMotor1:00000000 MC_ProgramPositionCommandMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:265    .text.MC_ProgramPositionCommandMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:270    .text.MC_SetCurrentReferenceMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:277    .text.MC_SetCurrentReferenceMotor1:00000000 MC_SetCurrentReferenceMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:307    .text.MC_SetCurrentReferenceMotor1:00000010 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:312    .text.MC_SetCurrentReferenceMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:319    .text.MC_SetCurrentReferenceMotor1_F:00000000 MC_SetCurrentReferenceMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:344    .text.MC_SetCurrentReferenceMotor1_F:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:349    .text.MC_GetCommandStateMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:356    .text.MC_GetCommandStateMotor1:00000000 MC_GetCommandStateMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:372    .text.MC_GetCommandStateMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:377    .text.MC_StopSpeedRampMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:384    .text.MC_StopSpeedRampMotor1:00000000 MC_StopSpeedRampMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:400    .text.MC_StopSpeedRampMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:405    .text.MC_StopRampMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:412    .text.MC_StopRampMotor1:00000000 MC_StopRampMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:427    .text.MC_StopRampMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:432    .text.MC_HasRampCompletedMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:439    .text.MC_HasRampCompletedMotor1:00000000 MC_HasRampCompletedMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:455    .text.MC_HasRampCompletedMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:460    .text.MC_GetMecSpeedReferenceMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:467    .text.MC_GetMecSpeedReferenceMotor1:00000000 MC_GetMecSpeedReferenceMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:483    .text.MC_GetMecSpeedReferenceMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:488    .text.MC_GetMecSpeedReferenceMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:495    .text.MC_GetMecSpeedReferenceMotor1_F:00000000 MC_GetMecSpeedReferenceMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:511    .text.MC_GetMecSpeedReferenceMotor1_F:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:516    .text.MC_GetMecSpeedAverageMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:523    .text.MC_GetMecSpeedAverageMotor1:00000000 MC_GetMecSpeedAverageMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:539    .text.MC_GetMecSpeedAverageMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:544    .text.MC_GetAverageMecSpeedMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:551    .text.MC_GetAverageMecSpeedMotor1_F:00000000 MC_GetAverageMecSpeedMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:567    .text.MC_GetAverageMecSpeedMotor1_F:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:572    .text.MC_GetLastRampFinalSpeedMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:579    .text.MC_GetLastRampFinalSpeedMotor1:00000000 MC_GetLastRampFinalSpeedMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:595    .text.MC_GetLastRampFinalSpeedMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:600    .text.MC_GetLastRampFinalSpeedM1_F:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 44


C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:607    .text.MC_GetLastRampFinalSpeedM1_F:00000000 MC_GetLastRampFinalSpeedM1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:623    .text.MC_GetLastRampFinalSpeedM1_F:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:628    .text.MC_GetControlModeMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:635    .text.MC_GetControlModeMotor1:00000000 MC_GetControlModeMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:651    .text.MC_GetControlModeMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:656    .text.MC_GetImposedDirectionMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:663    .text.MC_GetImposedDirectionMotor1:00000000 MC_GetImposedDirectionMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:679    .text.MC_GetImposedDirectionMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:684    .text.MC_GetSpeedSensorReliabilityMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:691    .text.MC_GetSpeedSensorReliabilityMotor1:00000000 MC_GetSpeedSensorReliabilityMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:707    .text.MC_GetSpeedSensorReliabilityMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:712    .text.MC_GetPhaseCurrentAmplitudeMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:719    .text.MC_GetPhaseCurrentAmplitudeMotor1:00000000 MC_GetPhaseCurrentAmplitudeMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:735    .text.MC_GetPhaseCurrentAmplitudeMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:740    .text.MC_GetPhaseVoltageAmplitudeMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:747    .text.MC_GetPhaseVoltageAmplitudeMotor1:00000000 MC_GetPhaseVoltageAmplitudeMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:763    .text.MC_GetPhaseVoltageAmplitudeMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:768    .text.MC_GetIabMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:775    .text.MC_GetIabMotor1:00000000 MC_GetIabMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:801    .text.MC_GetIabMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:806    .text.MC_GetIabMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:813    .text.MC_GetIabMotor1_F:00000000 MC_GetIabMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:839    .text.MC_GetIabMotor1_F:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:844    .text.MC_GetIalphabetaMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:851    .text.MC_GetIalphabetaMotor1:00000000 MC_GetIalphabetaMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:877    .text.MC_GetIalphabetaMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:882    .text.MC_GetIqdMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:889    .text.MC_GetIqdMotor1:00000000 MC_GetIqdMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:915    .text.MC_GetIqdMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:920    .text.MC_GetIqdMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:927    .text.MC_GetIqdMotor1_F:00000000 MC_GetIqdMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:953    .text.MC_GetIqdMotor1_F:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:958    .text.MC_GetIqdrefMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:965    .text.MC_GetIqdrefMotor1:00000000 MC_GetIqdrefMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:991    .text.MC_GetIqdrefMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:996    .text.MC_GetIqdrefMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1003   .text.MC_GetIqdrefMotor1_F:00000000 MC_GetIqdrefMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1029   .text.MC_GetIqdrefMotor1_F:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1034   .text.MC_GetVqdMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1041   .text.MC_GetVqdMotor1:00000000 MC_GetVqdMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1067   .text.MC_GetVqdMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1072   .text.MC_GetValphabetaMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1079   .text.MC_GetValphabetaMotor1:00000000 MC_GetValphabetaMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1105   .text.MC_GetValphabetaMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1110   .text.MC_GetElAngledppMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1117   .text.MC_GetElAngledppMotor1:00000000 MC_GetElAngledppMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1133   .text.MC_GetElAngledppMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1138   .text.MC_GetTerefMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1145   .text.MC_GetTerefMotor1:00000000 MC_GetTerefMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1161   .text.MC_GetTerefMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1166   .text.MC_GetTerefMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1173   .text.MC_GetTerefMotor1_F:00000000 MC_GetTerefMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1189   .text.MC_GetTerefMotor1_F:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1194   .text.MC_Clear_IqdrefMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1201   .text.MC_Clear_IqdrefMotor1:00000000 MC_Clear_IqdrefMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1216   .text.MC_Clear_IqdrefMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1221   .text.MC_AcknowledgeFaultMotor1:00000000 $t
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 45


C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1228   .text.MC_AcknowledgeFaultMotor1:00000000 MC_AcknowledgeFaultMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1244   .text.MC_AcknowledgeFaultMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1249   .text.MC_GetOccurredFaultsMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1256   .text.MC_GetOccurredFaultsMotor1:00000000 MC_GetOccurredFaultsMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1272   .text.MC_GetOccurredFaultsMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1277   .text.MC_GetCurrentFaultsMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1284   .text.MC_GetCurrentFaultsMotor1:00000000 MC_GetCurrentFaultsMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1300   .text.MC_GetCurrentFaultsMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1305   .text.MC_GetSTMStateMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1312   .text.MC_GetSTMStateMotor1:00000000 MC_GetSTMStateMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1328   .text.MC_GetSTMStateMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1333   .text.MC_SetPolarizationOffsetsMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1340   .text.MC_SetPolarizationOffsetsMotor1:00000000 MC_SetPolarizationOffsetsMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1363   .text.MC_SetPolarizationOffsetsMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1368   .text.MC_GetPolarizationOffsetsMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1375   .text.MC_GetPolarizationOffsetsMotor1:00000000 MC_GetPolarizationOffsetsMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1398   .text.MC_GetPolarizationOffsetsMotor1:0000000c $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1403   .text.MC_StartPolarizationOffsetsMeasurementMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1410   .text.MC_StartPolarizationOffsetsMeasurementMotor1:00000000 MC_StartPolarizationOffsetsMeasurementMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1426   .text.MC_StartPolarizationOffsetsMeasurementMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1431   .text.MC_GetAveragePowerMotor1_F:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1438   .text.MC_GetAveragePowerMotor1_F:00000000 MC_GetAveragePowerMotor1_F
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1455   .text.MC_GetAveragePowerMotor1_F:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1460   .text.MC_GetControlPositionStatusMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1467   .text.MC_GetControlPositionStatusMotor1:00000000 MC_GetControlPositionStatusMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1483   .text.MC_GetControlPositionStatusMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1488   .text.MC_GetAlignmentStatusMotor1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1495   .text.MC_GetAlignmentStatusMotor1:00000000 MC_GetAlignmentStatusMotor1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1511   .text.MC_GetAlignmentStatusMotor1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1516   .text.MC_GetCurrentPosition1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1523   .text.MC_GetCurrentPosition1:00000000 MC_GetCurrentPosition1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1539   .text.MC_GetCurrentPosition1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1544   .text.MC_GetTargetPosition1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1551   .text.MC_GetTargetPosition1:00000000 MC_GetTargetPosition1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1567   .text.MC_GetTargetPosition1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1572   .text.MC_GetMoveDuration1:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1579   .text.MC_GetMoveDuration1:00000000 MC_GetMoveDuration1
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1595   .text.MC_GetMoveDuration1:00000008 $d
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1600   .text.MC_ProfilerCommand:00000000 $t
C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s:1607   .text.MC_ProfilerCommand:00000000 MC_ProfilerCommand

UNDEFINED SYMBOLS
MCI_StartMotor
pMCI
MCI_StopMotor
MCI_ExecSpeedRamp
MCI_ExecSpeedRamp_F
MCI_ExecTorqueRamp
MCI_ExecTorqueRamp_F
MCI_ExecPositionCommand
MCI_SetCurrentReferences
MCI_SetCurrentReferences_F
MCI_IsCommandAcknowledged
MCI_StopSpeedRamp
MCI_StopRamp
MCI_RampCompleted
MCI_GetMecSpeedRefUnit
ARM GAS  C:\Users\ep_ygh\AppData\Local\Temp\ccIP4lMA.s 			page 46


MCI_GetMecSpeedRef_F
MCI_GetAvrgMecSpeedUnit
MCI_GetAvrgMecSpeed_F
MCI_GetLastRampFinalSpeed
MCI_GetLastRampFinalSpeed_F
MCI_GetControlMode
MCI_GetImposedMotorDirection
MCI_GetSpdSensorReliability
MCI_GetPhaseCurrentAmplitude
MCI_GetPhaseVoltageAmplitude
MCI_GetIab
MCI_GetIab_F
MCI_GetIalphabeta
MCI_GetIqd
MCI_GetIqd_F
MCI_GetIqdref
MCI_GetIqdref_F
MCI_GetVqd
MCI_GetValphabeta
MCI_GetElAngledpp
MCI_GetTeref
MCI_GetTeref_F
MCI_Clear_Iqdref
MCI_FaultAcknowledged
MCI_GetOccurredFaults
MCI_GetCurrentFaults
MCI_GetSTMState
MCI_SetCalibratedOffsetsMotor
MCI_GetCalibratedOffsetsMotor
MCI_StartOffsetMeasurments
PQD_GetAvrgElMotorPowerW
pMPM
MCI_GetCtrlPositionState
MCI_GetAlignmentStatus
MCI_GetCurrentPosition
MCI_GetTargetPosition
MCI_GetMoveDuration
